[
    PodcastChannelEpisode {
        title: "Rebuilding InfluxDB with Rust with Andrew Lamb",
        description: "Allen Wyma talks with Andrew Lamb (http://andrew.nerdnetworks.org/)  about InfluxDB’s rewrite (https://www.influxdata.com/blog/flight-datafusion-arrow-parquet-fdap-architecture-influxdb/) . InfluxDB is an open-source time series database.\n\n\n\n\nAs a Staff Engineer at InfluxData, he works on InfluxDB 3.0, a new time series database written in Rust, focusing on query processing and the Apache Arrow DataFusion and Apache Arrow ecosystems. In that capacity, he is a member and past chair of the Apache Arrow PMC and actively contributes to Apache Arrow DataFusion and the Apache Rust implementation query engine.\n\n\n\n\nAndrew was a professional C/C++ programmer for 10 years before switching to Rust. His experience ranges from startups to large multinational corporations and distributed open source projects, and has paid leadership dues as an architect and manager/VP. He holds an SB and MEng from MIT in Electrical Engineering and Computer Science.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@0:52]\u{a0}- Meet Andrew Lamb, Staff Engineer at InfluxData, working on InfluxDB IOx\n     \n       \n  •  [@2:57]\u{a0}- Transitioning from C++ to Rust: Andrew’s story\n     \n       \n  •  [@11:24]\u{a0}- InfluxDB rewrite and its use cases\n     \n       \n  •  [@22:13]\u{a0}- Compatibility of InfluxDB\n     \n       \n  •  [@26:58]\u{a0}- Downsides of using Rust and other languages\n     \n       \n  •  [@32:40]\u{a0}- Plans for the 3.0 alpha/beta release and different versions\n     \n       \n  •  [@34:54]\u{a0}- Unique use of the async runtime Tokio\n     \n       \n  •  [@55:28]\u{a0}- Rust as a tool for recruitment\n     \n       \n  •  [@58:16]\u{a0}- Closing discussion\n     \n     \n\nOther links\n\n\n     \n       \n  •  Andrew’s X Account (https://twitter.com/andrewlamb1111) \n     \n       \n  •  Using Rustlang’s Async Tokio Runtime for CPU-Bound Tasks (https://thenewstack.io/using-rustlangs-async-tokio-runtime-for-cpu-bound-tasks/) \n     \n       \n  •  Using the FDAP Architecture to build InfluxDB 3.0 (https://www.influxdata.com/blog/flight-datafusion-arrow-parquet-fdap-architecture-influxdb/) \n     \n       \n  •  RustASIA Conf 2025 (https://www.rustasiaconf.com/) \n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr",
        remaining_duration: "1 hr",
        date: "1 day ago",
        video_id: VideoID(
            "MPEDH65miGsCFps",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/H65miGsCFps/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kswjsaI1CZU4ikH6XmPYfHcHR4Zg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/H65miGsCFps/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nVIZWoaKrn-KsNMxxSUm1pQi75FA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Exploring Fiberplane's 3-Year Rust Journey, with Benno van den Berg",
        description: "Benno van der Berg (https://www.linkedin.com/in/bennovandenberg/) , Principal Software Engineer at Fiberplane (https://fiberplane.com/) , \nsits down with Luca Palmieri.\n\n\n\n\nThey discuss Fiberplane’s 3-years long journey with Rust, building an interactive observability notebook.\n\nThey touch on Benno’s experience switching from .NET to Rust and share insights on using Rust for a commercial product, \nincluding the reasons behind Fiberplane’s Rust adoption. They then dive into the challenges of maintaining Fiberplane’s \ncodebase and conclude with a few tips for developers looking for Rust jobs.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n     \n       \n  •  [@00:00] - Introduction\n         \n          \n                \n       •  Video recording of the interview (https://mainmatter.com/blog/2024/04/11/fiberplanes-three-year-rust-journey/) \n          \n              \n       \n     \n       \n  •  [@00:33] - Start of the interview\n     \n       \n  •  [@01:17] - Benno’s journey as a Software Engineer\n     \n       \n  •  [@04:29] - Fiberplane’s products\n     \n       \n  •  [@07:05] - Building an observability product in Rust\n     \n       \n  •  [@09:25] - Uses for Rust at Fiberplane\n     \n       \n  •  [@13:30] - WASM and front end\n     \n       \n  •  [@22:04] - Fiberplane’s 3-year experience with Rust\n     \n       \n  •  [@32:43] - Benno’s advice for developers seeking Rust jobs\n     \n       \n  •  [@35:28] - Conclusion\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Mainmatter (https://mainmatter.com/rust-consulting/) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Mainmatter (https://mainmatter.com/rust-consulting/) \n\n\n\n\nHosts: Luca Palmieri (https://lpalmieri.com/)",
        total_duration: "47 mins",
        remaining_duration: "47 mins",
        date: "12 Aug",
        video_id: VideoID(
            "MPEDZovfCsVyNVY",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/ZovfCsVyNVY/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3nk5GHg3hLDdsChM_tDQ2dNSjzFIw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/ZovfCsVyNVY/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3nVh-RqRX61N0NQabYVl9-E-UpWxg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rama with Glen De Cauwsemaecker",
        description: "Allen Wyma talks with Glen De Cauwsemaecker (https://www.glendc.com/)  about Rama (https://ramaproxy.org/) , a modular and customizable proxy built in Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - Introducing Glen De Cauwsemaecker\n     \n       \n  •  [@01:26] - Rama functionality & use cases\n     \n       \n  •  [@14:38] - Discussing the development story leading up to Rama’s upcoming release\n     \n       \n  •  [@36:19] - Rama architecture, Glen’s background in game development\n     \n       \n  •  [@48:06] - Closing discussion\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "49 mins",
        remaining_duration: "49 mins",
        date: "20 May",
        video_id: VideoID(
            "MPEDnlblyD34qjs",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/nlblyD34qjs/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3llHxIqETroFefDQGgBVhGTraYJ2A",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/nlblyD34qjs/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kB87FkChAAvftcdAQIBb6yAK-MAw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Ratatui with Orhun Parmaksiz",
        description: "Allen Wyma talks with Orhun Parmaksiz (https://blog.orhun.dev/)  about Ratatui (https://ratatui.rs/) , a TUI library for Rust to create beautiful console-based applications in Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - Meet Orhun Parmaksiz\n     \n       \n  •  [@01:21] - Origins of the project and overview of TUIs\n     \n       \n  •  [@09:32] - Rebranding from tui-rs and continuing previous work\n     \n       \n  •  [@14:50] - Documentation of Ratatui\n     \n       \n  •  [@16:18] - Collecting community feedback\n     \n       \n  •  [@22:00] - Custom designs in Ratatui (ratatui-splash-screen)\n     \n       \n  •  [@22:19] - Other terminal UI projects\n     \n       \n  •  [@25:32] - Status and upcoming directions for Ratatui\n     \n       \n  •  [@27:55] - Closing discussion\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Orhun’s Github (https://github.com/orhun) \n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "31 mins",
        remaining_duration: "31 mins",
        date: "26 Apr",
        video_id: VideoID(
            "MPEDEEMkSKDtxe4",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/EEMkSKDtxe4/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3nlk1B7bPPZd3ChnVVdaINuNWB3qg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/EEMkSKDtxe4/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kMxpvysdfoR3nifSEB3Apjz3vmGw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Isograph with Robert Balicki",
        description: "Allen Wyma talks with Robert Balicki (https://www.robertbalicki.com/)  about Isograph (https://isograph.dev/) , a framework powered by Rust to speed up your React app development.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@10:48] - GraphQL (https://graphql.org/)  basics\n     \n       \n  •  [@21:20] - The role of Rust within the project\n     \n       \n  •  [@32:24] - Isograph installation\n     \n       \n  •  [@37:16] - Isograph development\n     \n       \n  •  [@45:46] - Upcoming features\n     \n       \n  •  [@01:00:01] - Closing discussion\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 2 mins",
        remaining_duration: "1 hr 2 mins",
        date: "20 Apr",
        video_id: VideoID(
            "MPEDjra_dQuBaeg",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/jra_dQuBaeg/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kSNh2wZaLyW3ChWfAhp-V4v6nJzw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/jra_dQuBaeg/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3k_Mbz9GyKeKdiEgNZePFyQnzRi5A",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "release-plz with Marco Ieni",
        description: "Allen Wyma talks with Marco Ieni (https://www.marcoieni.com/)  about release-plz (https://release-plz.ieni.dev/) , a CLI-based tool that helps you to release your Rust crates by generating changelogs and bumping the version of your crates.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - Meet Marco Ieni, software engineer at Prisma (https://www.prisma.io/) , creator of release-plz\n     \n       \n  •  [@01:17] - Release-plz creation & features\n     \n       \n  •  [@08:50] - Conventional commit standard\n     \n       \n  •  [@17:41] - Potential upcoming features\n     \n       \n  •  [@21:25] - Gitea, Gitlab, Github integration\n     \n       \n  •  [@28:14] - Release-plz development\n     \n       \n  •  [@31:24] - Windows support\n     \n       \n  •  [@36:22] - Message from Marco\n     \n       \n  •  [@37:07] - Marco’s Rust podcast RustShip (https://www.marcoieni.com/2023/08/rustship-a-new-rust-podcast/) \n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "40 mins",
        remaining_duration: "40 mins",
        date: "12 Apr",
        video_id: VideoID(
            "MPEDgU0SSIXleZQ",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/gU0SSIXleZQ/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3m9MQbh8JjDcyfOQE_wkmejPSgInw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/gU0SSIXleZQ/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3mEusQ07mmeTbVbK4wijI6J2c1dDQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Pavex with Luca Palmieri",
        description: "Allen Wyma talks with Luca Palmieri (https://www.lpalmieri.com/)  about Pavex (https://pavex.dev/) , a new API-focused web framework for Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - Meet Luca Palmieri, software engineer, author of Zero To Production In Rust (https://www.zero2prod.com/) , open source maintainer & contributor\n     \n       \n  •  [@02:04] - Luca’s working experience, discussing time at AWS and moving to Mainmatter\n         \n          \n                \n       •  Smithy (https://smithy.io/2.0/index.html) \n          \n                \n       •  smithy-rs (https://github.com/smithy-lang/smithy-rs) \n          \n              \n       \n     \n       \n  •  [@09:01] - Pavex: a Rust framework for professionals\n         \n          \n                \n       •  Pavex: re-imaging API development in Rust (RustNationUK 2024) (https://youtu.be/cMea6IMRk2s) \n          \n              \n       \n     \n       \n  •  [@22:57] - Rustdoc JSON & the f\u{a0}macro\n         \n          \n                \n       •  Reasoning about Rust: an introduction to Rustdoc’s JSON format (EuroRust 2023) (https://youtu.be/OxQYyg_v3rw) \n          \n                \n       •  cargo-semver-checks (https://github.com/obi1kenobi/cargo-semver-checks) \n          \n              \n       \n     \n       \n  •  [@37:19] - Lessons from maintaining open-source projects like rocket.rs\n         \n          \n                \n       •  Building a Better Foundation for Rocket’s Future (https://rocket.rs/news/2023-11-17-rwf2-prelaunch/) \n          \n                \n       •  The Economics of Programming Languages (Strange Loop 2023) (https://www.youtube.com/watch?v=XZ3w_jec1v8) \n          \n              \n       \n     \n       \n  •  [@52:17] - Pavex’s closed beta stage\n     \n       \n  •  [@56:43] - Plans for production readiness\n     \n       \n  •  [@01:10:43] - Potential pricing models\n     \n       \n  •  [@01:12:39] - Closing discussion\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 18 mins",
        remaining_duration: "1 hr 18 mins",
        date: "9 Apr",
        video_id: VideoID(
            "MPEDDVKOVdigrQA",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/DVKOVdigrQA/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3kwQpEFxarsYH6dNYf6tSd6sUtC9Q",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/DVKOVdigrQA/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3mlZl47Uw-hmnNCEhPlmb1-JmvS6A",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Launching RustRover: JetBrains' Investment in Rust",
        description: "Vitaly Bragilevsky (https://bravit.pro/) , Developer Advocate at JetBrains (https://www.jetbrains.com/)  and author of \nHaskell in depth (https://www.manning.com/books/haskell-in-depth) , sits down with Luca Palmieri.\n\n\n\n\nVitaly explains what led JetBrains to launch a Rust-specific product, RustRover (https://www.jetbrains.com/rust/) .\nHe covers, in particular, why it is a good time to invest further in Rust, touching as well on the state of the Rust ecosystem. \nLuca and Vitaly also touch on the status quo of Rust developer tooling, including debuggers, profilers (or the lack thereof!),\nand framework-specific extensions.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n     \n       \n  •  [@00:00] - Introduction\n         \n          \n                \n       •  Video recording of the interview (https://mainmatter.com/blog/2024/02/29/launching-rustrover/) \n          \n              \n       \n     \n       \n  •  [@01:07] - Becoming a Developer Advocate for Rust at JetBrains\n     \n       \n  •  [@04:34] - Vitaly’s transition from Haskell to Rust\n         \n          \n                \n       •  Haskell in depth (https://www.manning.com/books/haskell-in-depth) \n          \n              \n       \n     \n       \n  •  [@08:13] - Introducing JetBrains’ RustRover (https://www.jetbrains.com/rust/) \n     \n       \n  •  [@18:56] - Usage and status quo of Rust developer tooling\n     \n       \n  •  [@25:12] - Vitaly’s outlook on Rust’s future\n     \n       \n  •  [@31:47] - New use cases for Rust adoption\n     \n       \n  •  [@35:07] - Compiler and IDE suggestions\n     \n       \n  •  [@38:08] - JetBrains’ role and future as a Rust tooling provider\n     \n       \n  •  [@39:59] - Reasoning behind Rust’s increasing popularity\n     \n       \n  •  [@46:18] - Conclusion\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Mainmatter (https://mainmatter.com/rust-consulting/) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Mainmatter (https://mainmatter.com/rust-consulting/) \n\n\n\n\nHosts: Luca Palmieri (https://lpalmieri.com/)",
        total_duration: "47 mins",
        remaining_duration: "47 mins",
        date: "4 Apr",
        video_id: VideoID(
            "MPEDiffbeOInSyY",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/iffbeOInSyY/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kkrHg8m8FJ4faDDBVOONDggAcvnA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/iffbeOInSyY/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kGOarIf-V8UjZkZdlxQJzCrgSOzQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "cargo-semver-checks with Predrag Gruevski",
        description: "Allen Wyma talks with Predrag Gruevski (https://predr.ag/)  about cargo-semver-checks (https://crates.io/crates/cargo-semver-checks) , a linter that checks your crate’s API for any semver (https://semver.org/)  violations.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - Meet Predrag Gruevski - creator & maintainer of cargo-semver-checks\n     \n       \n  •  [@00:35] - Exploring cargo-semver-checks, a linter for preventing breaking changes and ensuring semantic versioning\n     \n       \n  •  [@05:00] - What is Semantic versioning (semver)\n     \n       \n  •  [@08:17] - Determining major version bumps\n     \n       \n  •  [@10:48] - Background of the project\n     \n       \n  •  [@18:25] - Functionality, use cases, and project details of cargo-semver-checks\n     \n       \n  •  [@38:51] - Future plans and upcoming features\n     \n       \n  •  [@47:28] - Closing discussion\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 41 mins",
        remaining_duration: "1 hr 41 mins",
        date: "30 Mar",
        video_id: VideoID(
            "MPEDuOwEiEBl2u8",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/uOwEiEBl2u8/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3kOMLgXYirIfeFNtk7HN17uwkuxXg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/uOwEiEBl2u8/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3mxHaeDsBHKLwiqyyKjXqOBq3kuzQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Hyper 1.0 with Sean McArthur",
        description: "Allen Wyma talks with Sean McArthur (https://seanmonstar.com/)  about the 1.0 release (https://seanmonstar.com/blog/hyper-v1/)  of Hyper (https://hyper.rs/) , the well-known Rust HTTP library.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - Meet open-source engineer Sean McArthur\n     \n       \n  •  [@01:20] - Reasons for the 9-year journey to release hyper 1.0\n     \n       \n  •  [@05:34] - Addressing async fragmentation\n     \n       \n  •  [@07:38] - Sean’s transition to freelance maintenance\n     \n       \n  •  [@10:12] - Freelancing and finding clients while working on open source\n     \n       \n  •  [@16:56] - Hyper’s maturity and future plans\n     \n       \n  •  [@22:16] - Stages of hyper’s development, releases, and post-release issues.\n     \n       \n  •  [@36:14] - Closing discussion\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "38 mins",
        remaining_duration: "38 mins",
        date: "23 Mar",
        video_id: VideoID(
            "MPEDmqDiy1G1dTI",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/mqDiy1G1dTI/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3ni-5kgAN5y6fODFDIjmdG7Fa3lIQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/mqDiy1G1dTI/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3k10wVMasDMVwwSoAHw1vECfMkrdA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Asynchronous Programming in Rust with Carl Fredrik Samson",
        description: "Allen Wyma talks with Carl Fredrik Samson (https://twitter.com/cf_samson)  about his book Asynchronous Programming in Rust (https://www.packtpub.com/product/asynchronous-programming-in-rust/9781805128137) , a deep dive into asynchronous programming in Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - Meet Carl Fredrik Samson, author of Asynchronous Programming in Rust\n     \n       \n  •  [@04:26] - Making the deal with Packt (publishing company)\n     \n       \n  •  [@05:12] - Runtime with green threads\n     \n       \n  •  [@07:50] - Understanding the concept of asynchronous programming\n     \n       \n  •  [@03:17] - The benefits and purpose of using asynchronous programming\n     \n       \n  •  [@28:35] - Comparing green threads and fibers in Rust\n     \n       \n  •  [@35:29] - Importance of learning async programming\n     \n       \n  •  [@41:43] - Insights into the book’s creation process, including research and writing efforts\n     \n       \n  •  [@43:13] - Target audience and prerequisites for the book\n     \n       \n  •  [@45:09] - Book details\n     \n       \n  •  [@48:02] - Closing thoughts\n         \n          \n                \n       •  Rust in Production (https://corrode.dev/podcast/)  podcast\n          \n                \n       •  On the Metal (https://oxide.computer/podcasts/on-the-metal)  podcast\n          \n                \n       •  Chats with James (https://jamesmunns.com/podcast/)  podcast\n          \n              \n       \n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "50 mins",
        remaining_duration: "50 mins",
        date: "17 Mar",
        video_id: VideoID(
            "MPED7jnLMt630OE",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/7jnLMt630OE/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3mC5nP8mRXTwv7tQF_ohvxuj9kT8w",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/7jnLMt630OE/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3k4tk5frRKeNYG41DqedxNKgJppbg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Asciinema with Marcin Kulik",
        description: "Allen Wyma talks with Marcin Kulik (https://ku1ik.com/)  about his work on asciinema (https://www.asciinema.org/) , a service that allows people to record their terminal windows to share with others, that has the custom asciinema player written in Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - Introduction\n     \n       \n  •  [@01:56] - Overview of Asciinema: A suite of tools for recording, replaying, and sharing terminal sessions\n     \n       \n  •  [@09:11] - More about Marcin Kulik, the creator of Asciinema, and his background\n     \n       \n  •  [@10:08] - Inspiration behind the creation of Asciinema\n     \n       \n  •  [@18:52] - Marcin’s journey into Rust\n     \n       \n  •  [@23:15] - Balancing paid development and consulting services for Asciinema\n     \n       \n  •  [@24:36] - Progress on the Rust rewrite\n     \n       \n  •  [@28:37] - AGG (Asciinema GIF generator)\n     \n       \n  •  [@34:44] - Maintaining multiple languages and the role of Rust\n     \n       \n  •  [@40:17] - Future plans for Asciinema and potential features\n     \n       \n  •  [@47:23] - Closing discussion\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "51 mins",
        remaining_duration: "51 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDxp2Vr8AkHts",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/xp2Vr8AkHts/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kksJ72rD2Y9sz0A25wpl28K2e_rA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/xp2Vr8AkHts/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3lOpFBBw43s-sEnVwWzP7Q8SJ8i3w",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Unlocking Rust's power through mentorship and knowledge spreading, with Tim McNamara",
        description: "Tim McNamara (https://tim.mcnamara.nz/) , author of Rust in Action (https://www.manning.com/books/rust-in-action)  \nand founder at Accelerant (https://accelerant.dev) , sits down with Marco Otte-Witte.\n\n\n\n\nTim discusses how Rust, despite common perceptions, is relatively easy to learn and how the compiler empowers engineers \nto avoid common mistakes. The conversation also emphasizes Rust’s growing adoption in companies, \nits role in addressing long-term maintainability challenges, and its potential to significantly reduce software \nenergy consumption, while highlighting the importance of mentorship to ensure successful integration across organizations.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n     \n       \n  •  [@00:00] - Introduction\n         \n          \n                \n       •  Video recording of the interview (https://mainmatter.com/blog/2023/11/02/unlocking-rusts-power-through-mentorship-and-knowledge-spreading/) \n          \n              \n       \n     \n       \n  •  [@00:34] - Start of the interview\n     \n       \n  •  [@01:27] - Tim’s role at AWS\n     \n       \n  •  [@03:57] - Tim’s reasons for learning Rust\n     \n       \n  •  [@04:57] - Rust in Action (https://www.manning.com/books/rust-in-action) \n     \n       \n  •  [@06:59] - How hard is it to learn Rust?\n     \n       \n  •  [@13:49] - Reasons companies are holding back from adopting Rust\n     \n       \n  •  [@23:51] - Rust’s type system and maintainability\n     \n       \n  •  [@36:30] - Dependencies in Rust\n     \n       \n  •  [@41:01] - Energy savings with Rust\n     \n       \n  •  [@48:09] - Tim’s approach to pitching Rust\n     \n       \n  •  [@54:21] - Overcoming concerns around Rust adoption\n     \n       \n  •  [@55:36] - Recruitment strategy for Rust\n     \n       \n  •  [@57:13] - Knowledge spreading\n     \n       \n  •  [@01:02:41] - Conclusion\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Mainmatter (https://mainmatter.com/rust-consulting/) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Mainmatter (https://mainmatter.com/rust-consulting/) \n\n\n\n\nHosts: Marco Otte-Witte (https://twitter.com/marcoow)",
        total_duration: "1 hr 3 mins",
        remaining_duration: "1 hr 3 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDmUy_fnQJQlQ",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/mUy_fnQJQlQ/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3lUzlrQATPyrcZ_6nDtHI9Ekf99wQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/mUy_fnQJQlQ/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3lxMInK7oYvqZx3Tz2-yAOvtZypDw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Prossimo with Josh Aas",
        description: "Allen Wyma talks with Josh Aas (https://www.linkedin.com/in/josh-aas-406a772/)  about his work on Prossimo (https://www.memorysafety.org/) , an Internet Security Research Group (ISRG) (https://www.abetterinternet.org/)  project that is focusing on moving critical software used on the Internet to a memory safe language, such as Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - Meet Josh Aas - Executive Director at ISRG (Internet Security Research Group), a non-profit dedicated to building a more secure and privacy-respecting digital infrastructure.\n     \n       \n  •  [@01:32] - Let’s Encrypt Project (https://letsencrypt.org/)  - a nonprofit Certificate Authority providing TLS certificates to 363 million websites.\n     \n       \n  •  [@06:53] - Divvi Up project (https://divviup.org/)  - a privacy-respecting system for aggregate statistics.\n     \n       \n  •  [@09:48] - Prossimo - ensuring memory safety for the internet’s most critical infrastructure.\n     \n       \n  •  [@15:24] - Discussion about Curl and Rust.\n     \n       \n  •  [@19:06] - The benefits of rewriting software, particularly transitioning from C to Rust for improved memory safety.\n     \n       \n  •  [@34:19] - The ISRG’s ambition to make the Linux kernel memory-safe with Rust.\n     \n       \n  •  [@37:27] - Can Zig (https://ziglang.org/)  potentially be a competitor to Rust?\n     \n       \n  •  [@39:41] - Closing thoughts.\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "40 mins",
        remaining_duration: "40 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDIGFk_tzI8UY",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/IGFk_tzI8UY/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kte-nz7W3MesAEclHZyhJQ4NGvoQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/IGFk_tzI8UY/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nsdzDiEmBqVbvrk_m6j-ZoJByw4A",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Polars with Ritchie Vink",
        description: "Allen Wyma talks with Ritchie Vink (http://www.ritchievink.com/)  about his work on Polars (https://pola.rs/) , a DataFrame library written in Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - Meet Ritchie Vink - Creator of Polars\n     \n       \n  •  [@02:00] - What is a DataFrame?\n     \n       \n  •  [@05:19] - Arrow (https://arrow.apache.org/) \n     \n       \n  •  [@07:26] - NumPy (https://numpy.org/) \n     \n       \n  •  [@11:31] - Polars vs Pandas (https://pandas.pydata.org/) \n     \n       \n  •  [@17:32] - Using Polars in app development\n     \n       \n  •  [@25:24] - Python and Rust docs\n     \n       \n  •  [@31:49] - Polars 1.0 release\n     \n       \n  •  [@35:21] - What keeps Ritchie working on Polars\n     \n       \n  •  [@37:27] - Growing Polars without bloat\n     \n       \n  •  [@39:57] - Closing discussions\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "43 mins",
        remaining_duration: "43 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDwOwPGU2K0lM",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/wOwPGU2K0lM/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3nBe5rHE6l4EIVxEDsXyk-OocZLBw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/wOwPGU2K0lM/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3lDgHexTYYwszsHZyDgWdueyANX_Q",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Exploring Rust's impact on efficiency and cost-savings, with Stefan Baumgartner",
        description: "Stefan Baumgartner (https://fettblog.eu/) , Senior Product Architect at Dynatrace (https://www.dynatrace.com/) , \ndiscusses with Marco Otte-Witte how Rust enables developers to write performant and reliable software that’s efficient \nat a level that leads to substantial cost savings.\n\n\n\n\nStefan shares his firsthand experience with Rust, highlighting the ecosystem’s ability when it comes to delivering \nfunctioning prototypes quickly. He also discusses the importance of understanding memory management and low-level \nconcepts in programming and how teaching Rust empowers developers to write efficient and reliable software.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n     \n       \n  •  [@00:00] - Introduction\n         \n          \n                \n       •  Video recording of the interview (https://mainmatter.com/blog/2023/09/28/exploring-rusts-impact-on-costs-and-efficiency/) \n          \n              \n       \n     \n       \n  •  [@00:34] - Start of the interview\n     \n       \n  •  [@02:06] - Pitching Rust and criteria for adoption\n     \n       \n  •  [@03:35] - What is Dynatrace (https://www.dynatrace.com/) \n     \n       \n  •  [@06:15] - Stability with Rust\n     \n       \n  •  [@09:59] - Benefits of Rust\n     \n       \n  •  [@13:45] - Learning and teaching Rust\n     \n       \n  •  [@19:21] - Comparing Rust’s teachability to other languages\n     \n       \n  •  [@24:39] - The role of the compiler in Rust programming\n     \n       \n  •  [@26:17] - Stefan’s approach to teaching Rust\n     \n       \n  •  [@29:50] - Onboarding at Dynatrace (https://www.dynatrace.com/) \n     \n       \n  •  [@34:14] - Performance versus stability\n     \n       \n  •  [@37:12] - Rust’s highlights\n     \n       \n  •  [@39:41] - Conclusion\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Mainmatter (https://mainmatter.com/rust-consulting/) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Mainmatter (https://mainmatter.com/rust-consulting/) \n\n\n\n\nHosts: Marco Otte-Witte (https://twitter.com/marcoow)",
        total_duration: "40 mins",
        remaining_duration: "40 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDAf1TIrPIfAo",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/Af1TIrPIfAo/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kBdGHoE4mxKyv9RH_6oggQflBbIg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/Af1TIrPIfAo/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3k-pRkN0LQtgU1uOXjReCNb3UDqHg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Recruiting in Rust with Cedric Sellmann",
        description: "Allen Wyma talks with Cedric Sellmann (https://www.understandingrecruitment.com/about-us/meet-the-team/profile/cedric-sellmann/)  about his experience with recuiting Rust engineers.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - Guest introduction: Cedric Sellmann - Rust Recruitment Specialist, previous Java recruiter.\n     \n       \n  •  [@07:18] - Rust’s limited mainstream adoption and challenges in verifying Rust qualifications.\n     \n       \n  •  [@17:28] - Job hunting tips for Rust developers.\n     \n       \n  •  [@29:06] - Current Rust job market compared to previous years.\n     \n       \n  •  [@32:54] - The effectiveness of referrals for Rust developer job opportunities.\n     \n       \n  •  [@35:30] - Industries hiring Rust developers: crypto, gaming, and more!\n     \n       \n  •  [@50:31] - Advice for aspiring Rust developers.\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "53 mins",
        remaining_duration: "53 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDVcAz7cvy0Ug",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/VcAz7cvy0Ug/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3keB7EYw3CQZSYqwU0IqAI-2RPzYA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/VcAz7cvy0Ug/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nPP1FPahfhk1OIedfF-9_1zTk23Q",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rust Digger with Gabor Szabo",
        description: "Allen Wyma talks with Gabor Szabo (https://szabgab.com/) , who also runs Rust Maven (https://rust.code-maven.com/) , about his website Rust Digger (https://rust-digger.code-maven.com/)  which collects data about Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - What is Rust Digger, and why is it useful?\n     \n       \n  •  [@16:36] - Handling crates without repository links (e.g., the Fastly crate)\n     \n       \n  •  [@22:27] - Handling crates without an owner.\n     \n       \n  •  [@30:34] - What’s next for Rust Digger, including name squatting, malware, and dependency management.\n     \n       \n  •  [@38:57] - What to expect in the coming months.\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "44 mins",
        remaining_duration: "44 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDHChati5ypww",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/HChati5ypww/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3keKKmXrEjAtwsbFzXy6Sfyjm0LCw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/HChati5ypww/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nHmK1lgCY6aegc0-0HczVrDtqxLw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Kraken's migration to Rust microservices, with Rob Ede",
        description: "Rob Ede (https://github.com/sponsors/robjtede) , lead maintainer of Actix Web (https://github.com/actix/actix-web) , explains to Marco Otte-Witte how (and why) Kraken (https://www.kraken.com/)  chose to migrate their microservices to Rust.\n\n\n\n\nThey also discuss Rust’s web development ecosystem at large, with a particular focus on Actix Web (https://github.com/actix/actix-web) : Rob shares his view on how improvements in the language and framework space will eventually lead to a future where web development in Rust can be as approachable as web development in Javascript.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n     \n       \n  •  [@00:00] - Introduction\n         \n          \n                \n       •  Video recording of the interview (https://mainmatter.com/blog/2023/09/06/krakens-migration-to-rust-microservices/) \n          \n              \n       \n     \n       \n  •  [@00:36] - Start of the interview\n     \n       \n  •  [@01:26] - What is Actix Web (https://github.com/actix/actix-web) ?\n     \n       \n  •  [@06:34] - Kraken (https://www.kraken.com/) ’s migration from Java to Rust\n     \n       \n  •  [@10:09] - Benefits of Rust adoption at Kraken (https://www.kraken.com/) \n     \n       \n  •  [@12:48] - Rust vs Java\n     \n       \n  •  [@15:42] - Future improvements for Actix Web (https://github.com/actix/actix-web) \n     \n       \n  •  [@21:15] - Do Rust users become contributors?\n     \n       \n  •  [@24:08] - The future of Rust and Actix Web (https://github.com/actix/actix-web) \n     \n       \n  •  [@30:46] - Recommendations for adopting Rust\n     \n       \n  •  [@31:37] - Conclusion\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Mainmatter (https://mainmatter.com/rust-consulting/) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Mainmatter (https://mainmatter.com/rust-consulting/) \n\n\n\n\nHosts: Marco Otte-Witte (https://twitter.com/marcoow)",
        total_duration: "32 mins",
        remaining_duration: "32 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED5eFB6i9l2ps",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/5eFB6i9l2ps/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3n7Ic6PGsHty2YbUztGGMqmiBgOoQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/5eFB6i9l2ps/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kLbMi4i7HtmpwKgIY5yt5Pi1yy_A",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Learn Rust in a Month of Lunches with Dave MacLeod",
        description: "Allen Wyma talks with Dave MacLeod (https://github.com/Dhghomon)  about his book “Learn Rust in a Month of Lunches” (http://mng.bz/OxOO)  from Manning.\n\n\n\n\nRustacean Station discount code for the book: au35mac\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - Introduction: meet Dave MacLeod\n     \n       \n  •  [@01:47] - Target audience and motivation behind the book\n     \n       \n  •  [@08:32] - Taking a direct approach to learning\n     \n       \n  •  [@15:14] - Understanding shadowing in Rust\n     \n       \n  •  [@16:56] - Comparing “Learn Rust in a Month of Lunches” with “EasyRust”\n     \n       \n  •  [@20:06] - Streamlined printing: Changes to printline and print in Rust\n     \n       \n  •  [@22:08] - Dive into async Rust\n     \n       \n  •  [@24:19] - Crafting a coherent flow: process and concept tie-ins in the book\n     \n       \n  •  [@29:46] - Tackling advanced topics: macros, iterators, and closures\n     \n       \n  •  [@33:05] - Exploring the chrono crate\n     \n       \n  •  [@35:29] - Safety and testing: discussing unsafe Rust\n     \n       \n  •  [@41:49] - The book’s release date\n     \n       \n  •  [@44:18] - Dave’s experience writing the book\n     \n       \n  •  [@46:54] - Future plans and projects\n     \n       \n  •  [@49:33] - Closing thoughts\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "57 mins",
        remaining_duration: "57 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED7URTQp-eOY8",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/7URTQp-eOY8/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kFcPOhyu8b8npMRdVbtrv2wSnHqw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/7URTQp-eOY8/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nlwStzbrQD62i9CnxSur0c2wlcgg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's New in Rust 1.70 and 1.71",
        description: "Jon and Ben discuss the highlights of the 1.70 and 1.71 releases of Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n[@01:20] - Rust 1.70 (https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html) \n\n\n\n     \n       \n  •  [@01:22] - Cargo’s sparse protocol by default (https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html#sparse-by-default-for-cratesio) \n     \n       \n  •  [@03:47] - OnceCell and OnceLock (https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html#oncecell-and-oncelock) \n     \n       \n  •  [@10:56] - IsTerminal (https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html#isterminal) \n     \n       \n  •  [@12:49] - Named debug levels (https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html#named-levels-of-debug-information) \n     \n       \n  •  [@14:57] - Enforced stability in the test CLI (https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html#enforced-stability-in-the-test-cli) \n     \n       \n  •  [@16:45] - Stabilized APIs (https://blog.rust-lang.org/2023/06/01/Rust-1.70.0.html#stabilized-apis) \n         \n          \n                \n       •  Add Default impls for iterators (https://github.com/rust-lang/libs-team/issues/77) \n          \n                \n       •  Arc::into_inner (https://doc.rust-lang.org/stable/alloc/sync/struct.Arc.html#method.into_inner) \n          \n                \n       •  Option::is_some_and (https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.is_some_and) \n          \n                \n       •  SocketAddrExt (https://doc.rust-lang.org/stable/std/os/linux/net/trait.SocketAddrExt.html) \n          \n              \n       \n     \n       \n  •  [@24:30] - Changelog deep-dive\n         \n          \n                \n       •  [@24:42] - Use SipHash-1-3 instead of 2-4 (https://github.com/rust-lang/rust/pull/107925/) \n          \n                \n       •  [@26:06] - Alignment debug checks for pointer derefs (https://github.com/rust-lang/rust/pull/98112) \n          \n                \n       •  [@27:04] - Relaxed ordering for asm! operands (https://github.com/rust-lang/rust/pull/105798/) \n          \n                \n       •  [@27:53] - -Zgitoxide (https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#gitoxide) \n          \n                \n       •  [@28:21] - -Zdirect-minimal-versions (https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#direct-minimal-versions) \n          \n              \n       \n     \n     \n\n[@29:16] - Rust 1.71.0 (https://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html) \n\n\n\n     \n       \n  •  [@29:25] - C-unwind ABI (https://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html#c-unwind-abi) \n         \n          \n                \n       •  RFC (https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md#abi-boundaries-and-unforced-unwinding) \n          \n                \n       •  Unwinding by default? (https://hackmd.io/ymsEL6OpR6OSMoFr1As1rw) \n          \n              \n       \n     \n       \n  •  [@36:59] - Debugger visualization attributes (https://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html#debugger-visualization-attributes) \n         \n          \n                \n       •  Detailed documentation (https://doc.rust-lang.org/nightly/reference/attributes/debugger.html#the-debugger_visualizer-attribute) \n          \n              \n       \n     \n       \n  •  [@37:36] - raw-dylib linking (https://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html#raw-dylib-linking) \n         \n          \n                \n       •  Windows linking docs (https://learn.microsoft.com/en-us/cpp/build/linking-an-executable-to-a-dll?view=msvc-170) \n          \n                \n       •  What is ordinal linking (https://stackoverflow.com/questions/44585808/what-is-linking-by-ordinal-and-linking-by-name-mean-in-c) \n          \n              \n       \n     \n       \n  •  [@38:15] - Upgrade to musl 1.2 (https://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html#upgrade-to-musl-12) \n     \n       \n  •  [@39:42] - Const-initialized thread locals (https://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html#const-initialized-thread-locals) \n     \n       \n  •  [@41:14] - Changelog deep-dive\n         \n          \n                \n       •  [@41:40] - Uplift drop_ref clippy lints (https://github.com/rust-lang/rust/pull/109732/) \n          \n                \n       •  [@42:39] - Allow some recursive panics (https://github.com/rust-lang/rust/pull/110975/) \n          \n                \n       •  [@43:57] - Optimize cargo under rustup (https://github.com/rust-lang/car...",
        total_duration: "50 mins",
        remaining_duration: "50 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED9WUCIoc7tK8",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/9WUCIoc7tK8/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3lTl66WOWUK4KrhfeTG0wy3ukCrQw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/9WUCIoc7tK8/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3njTMUN08F_aris8WxDXKjXZjQpHA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "rb-sys with Ian Ker-Seymer",
        description: "Allen Wyma talks with Ian Ker-Seymer (https://www.linkedin.com/in/ikerseymer)  about his work on rb-sys (https://crates.io/crates/rb-sys)  which easily allows you to integrate Ruby with Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - Guest introduction: Ian Ker-Seymer - Staff Software Engineer at Shopify (https://www.shopify.com/) \n     \n       \n  •  [@02:04] - The connection between Liquid (https://shopify.github.io/liquid/)  and Shopify\n     \n       \n  •  [@06:19] - The nenefits of using WebAssembly\n     \n       \n  •  [@11:14] - Exploring the languages in Shopify’s stack, including Ruby\n     \n       \n  •  [@14:24] - Rust’s practical use cases\n     \n       \n  •  [@16:44] - How Rust became part of Shopify’s stack\n     \n       \n  •  [@19:14] - Deep dive into rb-sys\n     \n       \n  •  [@24:17] - RubyGems and Bundler: insights and considerations\n     \n       \n  •  [@36:41] - Integrating Rust into the stack\n     \n       \n  •  [@40:52] - Addressing challenges with Windows compilation\n     \n       \n  •  [@47:46] - Spotlight on rb-sys (https://github.com/oxidize-rb/rb-sys) : why it’s worth exploring\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "56 mins",
        remaining_duration: "56 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED6EHe7ymDaEc",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/6EHe7ymDaEc/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3lp3hmdfVTNzGAP_F8J4wbJUI4UZA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/6EHe7ymDaEc/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3l547LNUn9Ig4ZFWp9abro60p_fQw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's New in Rust 1.68 and 1.69",
        description: "Jon and Ben discuss the highlights of the 1.68 and 1.69 releases of Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n[@01:30] - Rust 1.68 (https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html) \n\n\n\n     \n       \n  •  [@01:32] - Cargo’s sparse protocol (https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html#cargos-sparse-protocol) \n     \n       \n  •  [@09:28] - Local Pin construction (https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html#local-pin-construction) \n         \n          \n                \n       •  Implementation comments (https://doc.rust-lang.org/1.68.0/src/core/pin.rs.html#1171-1241) \n          \n                \n       •  A fun hack (https://github.com/rust-lang/rust/blob/3ebb5629d1a39345d37c4838d31dc7280384ea94/library/core/src/pin.rs#L411-L416) \n          \n              \n       \n     \n       \n  •  [@13:56] - Default alloc error handler (https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html#default-alloc-error-handler) \n         \n          \n                \n       •  Small allocs in panic handler probably ok (https://github.com/rust-lang/rust/pull/106045#issuecomment-1369079471) \n          \n              \n       \n     \n       \n  •  [@18:24] - Stabilized APIs (https://blog.rust-lang.org/2023/03/09/Rust-1.68.0.html#stabilized-apis) \n         \n          \n                \n       •  impl From (https://doc.rust-lang.org/stable/std/primitive.f32.html#impl-From%3Cbool%3E-for-f32) \n          \n              \n       \n     \n       \n  •  [@19:06] - Changelog deep-dive\n         \n          \n                \n       •  [@19:15] - Stabilize UEFI extern (https://github.com/rust-lang/rust/pull/105795/) \n          \n                \n       •  [@20:07] - cargo build --verbose (https://github.com/rust-lang/cargo/pull/11407/) \n          \n                \n       •  [@20:50] - home is a cargo crate (https://github.com/rust-lang/cargo/pull/11359) \n          \n                \n       •  [@21:12] - Cargo.lock for workspace publish (https://github.com/rust-lang/cargo/pull/11477) \n          \n                \n       •  [@21:35] - Make Context !Send and !Sync (https://github.com/rust-lang/rust/pull/95985) \n          \n              \n       \n     \n     \n\n[@24:24] - Rust 1.68.1 (https://blog.rust-lang.org/2023/03/23/Rust-1.68.1.html) \n\n\n[@25:11] - Rust 1.68.2 (https://blog.rust-lang.org/2023/03/28/Rust-1.68.2.html) \n\n\n     \n       \n  •  GitHub announcement (https://github.blog/2023-03-23-we-updated-our-rsa-ssh-host-key/) \n     \n     \n\n[@26:29] - Rust 1.69.0 (https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html) \n\n\n\n     \n       \n  •  [@28:17] - Nice PR#42069 (https://github.com/rust-lang/rust/pull/42069) \n     \n       \n  •  [@29:50] - More cargo fix (https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html#cargo-now-suggests-to-automatically-fix-some-warnings) \n     \n       \n  •  [@31:17] - No more debug info for build scripts (https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html#debug-information-is-not-included-in-build-scripts-by-default-anymore) \n         \n          \n                \n       •  Nicholas Nethercote’s blog (https://nnethercote.github.io/) \n          \n              \n       \n     \n       \n  •  [@34:48] - Stabilized APIs (https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html#stabilized-apis) \n         \n          \n                \n       •  CStr::from_bytes_until_nul (https://doc.rust-lang.org/stable/core/ffi/struct.CStr.html#method.from_bytes_until_nul) \n          \n              \n       \n     \n       \n  •  [@37:24] - Changelog deep-dive\n         \n          \n                \n       •  [@37:28] - Unaligned references is a hard error now (https://github.com/rust-lang/rust/pull/102513/) \n          \n                \n       •  [@38:28] - Deriving on packed structs (https://github.com/rust-lang/rust/pull/104429/) \n                  \n               \n                         \n            •  More detailed description (https://github.com/rust-lang/rust/pull/104429#issuecomment-1319499278) \n               \n                       \n                \n          \n                \n       •  [@44:51] - Suggest cargo add (https://github.com/rust-lang/cargo/pull/11410/) \n          \n                \n       •  [@45:36] - Search for macros with ! (https://github.com/rust-lang/rust/pull/108143/) \n          \n                \n       •  [@46:10] - Compatibility notes (https://github.com/rust-lang/rust/releases/tag/1.69.0) \n          \n                \n       •  [@47:18] - Rust 0.1 release notes (https://gi...",
        total_duration: "51 mins",
        remaining_duration: "51 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDrcttTCEGF98",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/rcttTCEGF98/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3mdrK_MLj6BeSH1LvliHIpOn_gSYg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/rcttTCEGF98/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3m9ByoOmGmoK079WLHfzVykd7jkqQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Pitching Rust to decision-makers, with Joel Marcey",
        description: "Marco Otte-Witte discusses how to pitch Rust to decision-makers with Joel Marcey (https://joelmarcey.com/) , the Director of Technology at the Rust Foundation.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n     \n       \n  •  [@00:00] - Introduction\n         \n          \n                \n       •  Video recording of the interview (https://mainmatter.com/blog/2023/08/01/pitching-rust-to-decision-makers-with-joel-marcey/) \n          \n              \n       \n     \n       \n  •  [@00:33] - Start of the interview\n     \n       \n  •  [@00:50] - Joel’s role at the Rust Foundation\n     \n       \n  •  [@03:17] - The value of Rust adoption for companies\n     \n       \n  •  [@07:29] - Real-world success stories with Rust\n     \n       \n  •  [@11:34] - The implications of adopting Rust as a business\n     \n       \n  •  [@18:17] - Rust’s competitive advantage for hiring\n     \n       \n  •  [@20:18] - Where Rust shines\n     \n       \n  •  [@33:35] - The future of Rust\n     \n       \n  •  [@38:33] - The Rust Foundation’s plans for the future\n     \n       \n  •  [@40:43] - Conclusion\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Mainmatter (https://mainmatter.com/rust-consulting/) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Mainmatter (https://mainmatter.com/rust-consulting/) \n\n\n\n\nHosts: Marco Otte-Witte (https://twitter.com/marcoow)",
        total_duration: "41 mins",
        remaining_duration: "41 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDE1w8SJrhPdY",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/E1w8SJrhPdY/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3kmI_Ki-z7MExGhk9m1aieM2FqKYg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/E1w8SJrhPdY/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3mxXZjpxiRNm8k7ZGfZ3CVeAQnKfw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Adopting Rust: present and future of the Rust web ecosystem, with Luca Palmieri",
        description: "Marco Otte-Witte discusses with Luca Palmieri (https://lpalmieri.com)  the present and future of the Rust web ecosystem.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n     \n       \n  •  [@00:00] - Introduction\n         \n          \n                \n       •  Video recording of the interview (https://www.youtube.com/watch?v=Xb7NokhAVKI) \n          \n              \n       \n     \n       \n  •  [@00:27] - Start of the interview\n     \n       \n  •  [@01:39] - “Zero to Production in Rust”\n         \n          \n                \n       •  Zero to Production in Rust (https://www.zero2prod.com/) \n          \n              \n       \n     \n       \n  •  [@02:40] - Luca’s experience working with Rust at AWS\n     \n       \n  •  [@19:14] - Scenarios and use cases for Rust adoption\n     \n       \n  •  [@34:43] - The state of the art and future of web backend development in Rust\n     \n       \n  •  [@45:57] - Conclusion\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Mainmatter (https://mainmatter.com) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Mainmatter (https://mainmatter.com) \n\n\n\n\nHosts: Marco Otte-Witte (https://twitter.com/marcoow)",
        total_duration: "47 mins",
        remaining_duration: "47 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED7NHNwOBuZ9I",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/7NHNwOBuZ9I/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3nRoRFHtTPZMLWkGoSbAE8l7U4rCw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/7NHNwOBuZ9I/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3noc3cR-Nnu637-YXONdHiEyquHpg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Scanner.dev with Cliff Crosland",
        description: "Allen Wyma talks with Cliff Crosland (https://cliffcrosland.com/)  about his work on Scanner.dev that is powered by Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - Introduction\n     \n       \n  •  [@02:16] - Rust for Cloud Infrastructure\n     \n       \n  •  [@07:34] - Exploring libcurl\n     \n       \n  •  [@13:23] - Introducing Rust to Scanner.dev\n     \n       \n  •  [@13:23] - Scala in Data Science\n     \n       \n  •  [@25:22] - Rust vs. Other Languages\n     \n       \n  •  [@40:08] - Encoding/Decoding\n     \n       \n  •  [@45:03] - How Scanner.dev Works\n     \n       \n  •  [@55:16] - Future of Scanner.dev\n     \n       \n  •  [@01:00:58] - Final Information\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 3 mins",
        remaining_duration: "1 hr 3 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED_EHjBsGvE2U",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/_EHjBsGvE2U/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3mkVK5s4DxkQubgHsYgFXhEuFfF6g",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/_EHjBsGvE2U/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3mRyfoAFREIUu5r7djLRGkssFQYcw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Bootstrapping Rust with Albert Larsan",
        description: "Allen Wyma talks with Albert Larsan (https://github.com/albertlarsan68)  about his work on bootstrapping the Rust compiler.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@0:00] - Introduction to Bootstrap\n     \n       \n  •  [@1:57] - Building the standard library and compiler.\n     \n       \n  •  [@5:34] - The biggest challenges when bootstrapping rustc (the Rust compiler)\n     \n       \n  •  [@11:26] - Why use Python to start the bootstrapping process?\n     \n       \n  •  [@13:08] - Running tests as part of the Rust CI to ensure that each component is well-tested.\n     \n       \n  •  [@15:07] - Running tests on Linux, MacOS, and Windows\n     \n       \n  •  [@18:54] - Features that the Rust bootstrap team has been working on.\n     \n       \n  •  [@20:50] - Plans to run Clippy and fix issues.\n     \n       \n  •  [@23:41] - Stage redesign, verification, reproducibility, and different optimizations implemented in the compiler.\n     \n       \n  •  [@27:28] - Albert’s advice on the process of bootstrapping Rust.\n     \n       \n  •  [@31:05] - The importance of documentation\n     \n       \n  •  [@31:49] - Parting thoughts\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "33 mins",
        remaining_duration: "33 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDU8CmYdgKIIg",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/U8CmYdgKIIg/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3lBtuaIaxZW_yFBK-meNi-_qf1uUQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/U8CmYdgKIIg/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3mMgf6TS8HwLLDYfc2mi_90Yn0wxA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Shuttle with Ivan Cernja",
        description: "Allen Wyma and Zeeshan Ali Khan (https://github.com/zeenix)  talk with Ivan Cernja (https://twitter.com/cernjai) , DevRel at Shuttle (https://www.shuttle.rs/) , a platform for deploying Rust apps.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@0:00] - Introduction.\n     \n       \n  •  [@2:04] - Ivan’s programming background and how he got involved with Shuttle.\n     \n       \n  •  [@4:41] - What is Shuttle?\n     \n       \n  •  [@6:15] - Why choose Rust for Shuttle?\n     \n       \n  •  [@9:36] - Deciding to make Shuttle open source and community feedback.\n     \n       \n  •  [@12:38] - Shuttle AI and integration with ChatGPT.\n     \n       \n  •  [@18:04] - Shuttle Heroes program.\n     \n       \n  •  [@21:10] - Pain points working with Rust.\n     \n       \n  •  [@22:51] - Async runtime issues.\n     \n       \n  •  [@24:01] - What’s next for Shuttle?\n     \n       \n  •  [@26:22] - The best things and advantages about using Rust.\n     \n       \n  •  [@27:28] - Why startups are reluctant about using Rust.\n     \n       \n  •  [@32:14] - Moving to Linz and getting involved in Rust Linz.\n     \n       \n  •  [@36:10] - Ivan’s goal on making Rust education as accessible as possible.\n     \n       \n  •  [@37:26] - How to get hold of Ivan and get more information about Shuttle.\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)  and Zeeshan Ali Khan (https://github.com/zeenix)",
        total_duration: "38 mins",
        remaining_duration: "38 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDbTBrrMtGBCw",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/bTBrrMtGBCw/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3mZhVaRGFOUW6nE-Aap4wZlJ3MfBA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/bTBrrMtGBCw/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kRxyiaKnfQZnI5eTGgFz2rynX9IQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Fish Folk with Erlend Sogge Heggen",
        description: "Allen Wyma talks with Erlend Sogge Heggen (https://twitter.com/erlend_sh) , Founder of Fish Folk (https://fishfolk.org/) . Fish Folk is a collection of open source games written in Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - Introduction to Fish Folk.\n     \n       \n  •  [@2:17] - Initial concerns about using Rust in a game development project and how it worked out.\n     \n       \n  •  [@5:46] - The inspiration behind Fish Folk.\n     \n       \n  •  [@8:05] - The importance of modding and building an open and community-oriented environment.\n     \n       \n  •  [@10:52] - Protection and licensing of the project.\n     \n       \n  •  [@14:38] - The process of finding developers and contributors to the project.\n     \n       \n  •  [@18:24] - Initial funding for the project and financing contributors.\n     \n       \n  •  [@22:19] - Legalization and registration.\n     \n       \n  •  [@23:37] - Fish Folk’s Kickstarter campaign.\n     \n       \n  •  [@25:16] - Fish Folk’s several iterations and transitions and how they affected the development of the game.\n     \n       \n  •  [@25:50] - The decision to switch from Macroquad to Bevy.\n     \n       \n  •  [@31:40] - The overall experience and result of switching from Macroquad to Bevy.\n     \n       \n  •  [@32:49] - Experimenting with different approaches and models for multiplayer implementation.\n     \n       \n  •  [@35:22] - Plans on monetization.\n     \n       \n  •  [@40:57] - Timelines and deadlines for the release of the game.\n     \n       \n  •  [@44:39] - How to get involved with the project.\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "51 mins",
        remaining_duration: "51 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDGoZeCoNQqnE",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/GoZeCoNQqnE/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3lZ-drkiVs-49Qs94spmOKYj0ZPfw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/GoZeCoNQqnE/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kElsW7owsgzltCnADN34NwpPfLLw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Daily with Kwindla Hultman Kramer",
        description: "Allen Wyma talks with Kwindla Hultman Kramer (https://www.linkedin.com/in/kwkramer) , Founder and CEO of Daily (https://www.daily.co/) , and João Neves (https://www.linkedin.com/in/jo%C3%A3o-neves-8a990411/) , Staff Engineer at Daily. Daily provides SDKs for building video applications on top of the WebRTC standard using Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - Introduction to Daily\n     \n       \n  •  [@05:00] - WebRTC Implementation and sharing across different platform\n     \n       \n  •  [@10:31] - The challenges of integrating C++ with WebRTC\n     \n       \n  •  [@19:16] - Signaling in WebRTC - Session setup and initial configuration\n     \n       \n  •  [@22:45] - Challenges in implementing WebRTC standards\n     \n       \n  •  [@27:21] - Handling and working around platform and browser differences when implementing WebRTC\n     \n       \n  •  [@30:51] - Daily’s mono repo approach for code sharing\n     \n       \n  •  [@33:30] - The process of building and releasing code in relation to different platforms and dependencies\n     \n       \n  •  [@35:57] - Integrating Rust, C, Objective C, and Swift for iOS development\n     \n       \n  •  [@37:20] - Daily’s automated testing processes\n     \n       \n  •  [@42:24] - Daily’s network simulation layer in their testing process\n     \n       \n  •  [@44:00] - The use of Rust in implementing network simulation for testing purposes\n     \n       \n  •  [@49:15] - Using WebAssembly alongside native code in an application, and the potential obstacles to consider\n     \n       \n  •  [@50:52] - Crates that are being used by Daily\n     \n       \n  •  [@52:44] - What would differentiate Daily compared to other solutions?\n     \n       \n  •  [@55:48] - Daily vs Zoom\n     \n       \n  •  [@56:38] - Other open-source projects from Daily\n     \n       \n  •  [@1:01:20] - Parting thoughts and how to get in touch with Daily\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 3 mins",
        remaining_duration: "1 hr 3 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDfT2k4cMORP0",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/fT2k4cMORP0/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3mhQL9Zm-03wbCC5JAT1ksl6n0oMg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/fT2k4cMORP0/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3ktcKVwKIxNw3hEscQs8tfGbmi-Qg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Slint 1.0 with Tobias Hunger",
        description: "Allen Wyma talks with Tobias Hunger (https://twitter.com/t_hunger) , developer on Slint (https://slint-ui.com/) . Slint is a toolkit to efficiently develop fluid graphical user interfaces for any display. Slint has just made a 1.0 release.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - Introduction\n     \n       \n  •  [@04:02] - Slint updates and progress from the previous interview\n     \n       \n  •  [@06:15] - Upgrades that came along releasing of Slint 1.0\n     \n       \n  •  [@11:12] - Bugs fixed in Slint 1.0\n     \n       \n  •  [@12:43] - Stability, improved tooling and other key features in the Slint upgrade\n     \n       \n  •  [@15:34] - Multi-window support\n     \n       \n  •  [@18:26] - Screen reader accessibility and keyboard shortcut in Slint\n     \n       \n  •  [@22:04] - Raspberry Pi Pico and Zero 2 W\n     \n       \n  •  [@24:21] - Rust support, line buffering and graphics acceleration\n     \n       \n  •  [@26:10] - Other UIs that are out in the Rust space\n     \n       \n  •  [@27:17] - Handling bugs and feature reports\n     \n       \n  •  [@29:10] - Slint documentation\n     \n       \n  •  [@34:02] - Patch files\n     \n       \n  •  [@37:16] - Plans for the 1.1 release\n     \n       \n  •  [@38:51] - Interesting ways users used Slint API\n     \n       \n  •  [@40:30] - Slint users and Rust community feedback\n     \n       \n  •  [@43:35] - Requiring that users have a Rust compiler installed\n     \n       \n  •  [@46:31] - Programming with Rust vs C, C++\n     \n       \n  •  [@48:33] - Tobias’ great experience with the Rust community\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "49 mins",
        remaining_duration: "49 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDPlbtXr0E3I4",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/PlbtXr0E3I4/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3nFDTjhOFz6wRQqXP6M7eiCqAXVRg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/PlbtXr0E3I4/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nZs-W1v6EiAl5Z5x6GahpcuogdsA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Shuttle Launchpad with Stefan Baumgartner",
        description: "Allen Wyma and Zeeshan Ali Khan (https://github.com/zeenix)  talk with Stefan Baumgartner (https://twitter.com/ddprrt) , contributor to the Shuttle Launchpad (https://www.shuttle.rs/launchpad)  tutorial series on Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:00] - Introduction\n     \n       \n  •  [@01:45] - What is Shuttle Launchpad and why was it created\n     \n       \n  •  [@03:34] - Shuttle Launchpad initial development\n     \n       \n  •  [@06:39] - Supporting multiple backends and databases\n     \n       \n  •  [@08:32] - How did Stefan get into Shuttle\n     \n       \n  •  [@10:27] - Rust, Shuttle, and security\n     \n       \n  •  [@12:57] - Rust community in Austria\n     \n       \n  •  [@15:27] - Rust Linz\n     \n       \n  •  [@17:33] - Stefan’s career background\n     \n       \n  •  [@21:19] - Language choice trade-offs\n     \n       \n  •  [@25:34] - Developer communication\n     \n       \n  •  [@27:15] - Gimoji\n     \n       \n  •  [@28:50] - Zed\n     \n       \n  •  [@30:00] - Copilot when working with Rust\n     \n       \n  •  [@32:12] - VS Code\n     \n       \n  •  [@33:14] - Shuttle Launchpad’s aim in making learning Rust much easier\n     \n       \n  •  [@37:50] - Initial issue of creating Shuttle Launchpad\n     \n       \n  •  [@45:25] - Differences with traditional linked list newsletters\n     \n       \n  •  [@48:09] - Other materials and ways to learn and get started with Rust\n     \n       \n  •  [@54:25] - Plugs for Gimoji and Shuttle Launchpad\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)  and Zeeshan Ali Khan (https://github.com/zeenix)",
        total_duration: "56 mins",
        remaining_duration: "56 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDArvAb2XRpRg",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/ArvAb2XRpRg/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3klsze35gePgAobuklh8lM0foXmhw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/ArvAb2XRpRg/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3lG1JetHsmJfffmPMePb3YIm8oXUA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "CoderDojo and Rust Linz with Rainer Stropek",
        description: "Allen Wyma and Zeeshan Ali Khan (https://toot.cat/@zeenix)  talk with Rainer Stropek (https://github.com/rstropek) , creator of CoderDojo Linz (https://linz.coderdojo.net/)  and Rust Linz (https://rust-linz.at/) .\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@0:00] - Introduction to Rust Linz\n     \n       \n  •  [@3:23] - How did Rainer get into teaching kids in Austria how to code\n     \n       \n  •  [@5:17] - CoderDojo’s vision in creating a coding club\n     \n       \n  •  [@7:44] - Why text-based programming is not an option for kids younger than 10\n     \n       \n  •  [@11:31] - Starting programming at a young age\n     \n       \n  •  [@18:40] - Is coding and programming for everyone?\n     \n       \n  •  [@22:40] - Parent’s huge influence on kids who wants to pursue programming\n     \n       \n  •  [@24:32] - CoderDojo’s approach to inclusive programming\n     \n       \n  •  [@33:55] - CoderDojo for adults and for kids\n     \n       \n  •  [@35:59] - Rainer’s programming background\n     \n       \n  •  [@37:29] - Organizing Rust Linz meet-ups\n     \n       \n  •  [@43:26] - Rust meet-up schedules\n     \n       \n  •  [@45:09] - Call for speakers for Rust Linz\n     \n       \n  •  [@49:22] - Using rust in building web APIs and application programming\n     \n       \n  •  [@50:14] - Interfacing Rust with other languages\n     \n       \n  •  [@52:19] - Future of WebAssembly\n     \n       \n  •  [@54:01] - Parting thoughts\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)  and Zeeshan Ali Khan (https://toot.cat/@zeenix)",
        total_duration: "55 mins",
        remaining_duration: "55 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDxI1gxegXJaI",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/xI1gxegXJaI/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kRMr5O9m_iBOX9LWdYZor2Juhf9w",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/xI1gxegXJaI/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3ksMb_ypGcxRGcuYrHgmE4ffdGGkA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "PyO3 with David Hewitt",
        description: "Allen Wyma talks with David Hewitt (https://github.com/davidhewitt) , contributor to the PyO3 (https://github.com/PyO3/pyo3)  crate that helps to create Python extensions using Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@0:00] - Introduction PyO3\n     \n       \n  •  [@5:03] - History of PyO3\n     \n       \n  •  [@9:14] - Maintainers of PyO3\n     \n       \n  •  [@12:15] - Comparing different languages for machine learning\n     \n       \n  •  [@16:21] - Python’s ability to tap into native languages\n     \n       \n  •  [@17:38] - Consideration of using Rust with Python\n     \n       \n  •  [@20:39] - Python’s Global Interpreter Lock (GIL)\n     \n       \n  •  [@23:14] - Python vs Rust performance\n     \n       \n  •  [@24:20] - Rust error handling and two reasons to move Python code to Rust\n     \n       \n  •  [@26:08] - The complaints about Python\n     \n       \n  •  [@31:03] - C vs Python\n     \n       \n  •  [@33:17] - Why use Rust instead of C in the cryptography library\n     \n       \n  •  [@36:06] - Small percentage of people who get cut out by the use of Rust\n     \n       \n  •  [@39:36] - The importance of memory safety\n     \n       \n  •  [@41:27] - Zig and Rust\n     \n       \n  •  [@43:58] - The reliability of Rust use in Android Kernel\n     \n       \n  •  [@46:32] - Python interpreter\n     \n       \n  •  [@51:13] - Inline Python\n     \n       \n  •  [@56:05] - How to get started with Rust\n     \n       \n  •  [@57:41] - The future of PyO3\n     \n       \n  •  [@59:07] - Parting thoughts\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 2 mins",
        remaining_duration: "1 hr 2 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED2bpp30JBrUc",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/2bpp30JBrUc/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3lJ-bfgr1r66k0W76KYNqD9atPg7g",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/2bpp30JBrUc/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3miUXSOcpqOhohYnkP-uz1CEzW5ig",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "smol with John Nunley",
        description: "Allen Wyma and Zeeshan Ali Khan (https://toot.cat/@zeenix)  talk with John Nunley (https://github.com/notgull) , contributor to the smol (https://github.com/smol-rs/smol)  async runtime.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@0:00] - Introduction\n     \n       \n  •  [@1:46] - Advantage of smol\n     \n       \n  •  [@5:40] - John Nunley’s programming background\n     \n       \n  •  [@11:50] - Tauri, GTK and other GUI frameworks\n     \n       \n  •  [@16:16] - Async.io\n     \n       \n  •  [@19:28] - Writing packages and breaking up packages into smaller modules\n     \n       \n  •  [@24:21] - John’s work career\n     \n       \n  •  [@25:09] - Windows vs Linux API\n     \n       \n  •  [@29:06] - windows-rs (https://github.com/microsoft/windows-rs) \n     \n       \n  •  [@30:03] - Windows support with Rust\n     \n       \n  •  [@31:46] - Recent changes in smol\n     \n       \n  •  [@33:16] - Event Listener and how it works\n     \n       \n  •  [@37:26] - Handling pull requests and complaints\n     \n       \n  •  [@41:40] - smol’s integration with other runtimes\n     \n       \n  •  [@44:54] - smol vs Tokio\n     \n       \n  •  [@47:04] - Reason why smol is growing in popularity among GUI crates\n     \n       \n  •  [@49:06] - Recent developments in async\n     \n       \n  •  [@52:18] - The Async working group\n     \n       \n  •  [@58:11] - Community-based crates with suggestions and structure\n     \n       \n  •  [@1:00:22] - What to expect to come out of smol in the near future?\n     \n       \n  •  [@1:02:11] - Parting thoughts\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)  and Zeeshan Ali Khan (https://toot.cat/@zeenix)",
        total_duration: "1 hr 5 mins",
        remaining_duration: "1 hr 5 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDa1uY6lvoOI8",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/a1uY6lvoOI8/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3n4BBb-6YvBbysrJzBi3NH9eRhO8Q",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/a1uY6lvoOI8/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kcyig3C0rSNzKWfNSyKRUb0SJFcQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Glidesort with Orson Peters",
        description: "Allen Wyma talks with Orson Peters (https://orlp.net/) , creator of the Glidesort (https://github.com/orlp/glidesort)  sorting algorithm that may make its way into the Rust core library.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@0:00] - Introduction to Glidesort\n     \n       \n  •  [@1:19] - What got Orson interested in sorting algorithms\n     \n       \n  •  [@4:47] - Process of creating Glidesort\n     \n       \n  •  [@6:06] - Quicksort and how to handle low cardinality inputs\n     \n       \n  •  [@8:18] - Three-way comparison and binary partitioning\n     \n       \n  •  [@10:59] - Basic terms to know about quicksort and mergesort\n     \n       \n  •  [@15:28] - Choosing an element as a pivot\n     \n       \n  •  [@24:16] - Stable and unstable sorting algorithms\n     \n       \n  •  [@27:03] - How Glidesort can help with memory usage and memory savings\n     \n       \n  •  [@35:51] - How Glidesort detects if there is already a sorting in an array\n     \n       \n  •  [@38:19] - Linear scanning\n     \n       \n  •  [@41:47] - When Glidesort is a good algorithm to use\n     \n       \n  •  [@45:53] - Glidesort is a comparison-based algorithm\n     \n       \n  •  [@49:09] - What datatype would be great for Glidesort\n     \n       \n  •  [@52:17] - Sorting algorithms and language issues\n     \n       \n  •  [@53:11] - Sorting algorithm in Python vs Rust\n     \n       \n  •  [@55:52] - The challenge of implementing sorting algorithms in Rust\n     \n       \n  •  [@58:36] - Reducing Glidesort’s code size\n     \n       \n  •  [@1:01:21] - Standard library benchmarking criteria\n     \n       \n  •  [@1:02:52] - Performance evaluation of Glidesort and other improvements\n     \n       \n  •  [@1:06:08] - Quantum computing\n     \n       \n  •  [@1:07:43] - Next on the list for Glidesort improvements\n     \n       \n  •  [@1:10:54] - Parting thoughts\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 14 mins",
        remaining_duration: "1 hr 14 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDgo4B5LAybP4",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/go4B5LAybP4/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3m9fqse-jrLzNNahQx-K1Qek4Igug",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/go4B5LAybP4/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3lDzXNjOwQe7LQ6q6HjfxWG58XB7Q",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rust Embedded WG with Jonathan Pallant",
        description: "Allen Wyma talks with Jonathan Pallant, Senior Embedded Engineer of Ferrous Systems (https://ferrous-systems.com/)  and member of Rust Embedded Working Group (https://www.rust-lang.org/governance/wgs/embedded)  about Rust on embedded systems.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@0:00] - Introduction\n     \n       \n  •  [@2:23] - Jonathan’s projects\n     \n       \n  •  [@10:3] - Keyboard drivers, CP/M, IBM history\n     \n       \n  •  [@22:19] - Jonathan’s background in embedded systems\n     \n       \n  •  [@23:46] - Understanding more about computers and laptops\n     \n       \n  •  [@33:37] - Rust working group for embedded systems\n     \n       \n  •  [@37:16] - The power of Rust on microcontrollers\n     \n       \n  •  [@40:00] - The difference between a Microcontroller and a Central Processing Unit\n     \n       \n  •  [@42:15] - Discussing System on Chip (SoC), Memory Management Unit (MMU), and Microcontrollers\n     \n       \n  •  [@45:50] - RISC (Reduced Instruction Set Computing) vs CISC (Complex Instruction Set Computing) architecture\n     \n       \n  •  [@53:30] - How did the working group become an official working group?\n     \n       \n  •  [@56:00] - Using Rust with microcontrollers\n     \n       \n  •  [@59:54] - Choosing Rust over C or Python\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 3 mins",
        remaining_duration: "1 hr 3 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDCTR5diZDMlw",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/CTR5diZDMlw/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3kYqbiojiFMj8UpcYUw6BzXiN41yg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/CTR5diZDMlw/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3nLKBZBk4uywqkLWOQV5RuGs6AHoQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "SurrealDB with Tobie and Jamie Morgan",
        description: "Allen Wyma talks with Tobie and Jamie Morgan, creators of SurrealDB (https://surrealdb.com/)  about why they switched to Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@0:00] - Intro\n     \n       \n  •  [@1:42] - What made SurrealDB switch from Go to Rust?\n     \n       \n  •  [@4:51] - What is SurrealDB and why it was made?\n     \n       \n  •  [@9:18] - How does SurrealDB store data?\n     \n       \n  •  [@11:24] - SurrealDB and WebAssembly\n     \n       \n  •  [@13:25] - SurrealDB limitations running in the browser\n     \n       \n  •  [@14:09] - Running SurrealDB in the cloud\n     \n       \n  •  [@15:37] - Advantage of SurrealDB over other services\n     \n       \n  •  [@16:35] - Transparency in SurrealDB\n     \n       \n  •  [@18:37] - Encryption in SurrealDB\n     \n       \n  •  [@19:26] - SurrealDB licensing and open-source\n     \n       \n  •  [@25:45] - SurrealDB services and users\n     \n       \n  •  [@28:57] - When not to use SurrealDB?\n     \n       \n  •  [@31:34] - Parting thoughts\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "32 mins",
        remaining_duration: "32 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDPGWfB8K7Ad4",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/PGWfB8K7Ad4/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3mnqNQcECPcaFBxugzdPgCdIKdCwg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/PGWfB8K7Ad4/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3k350oEF9hLqAg5zTEV8JPBAF2lRQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rust Analyzer with Lukas Wirth",
        description: "Allen Wyma talks with Lukas Wirth (https://veykril.github.io/) , member of the rust-analyzer (https://rust-analyzer.github.io/)  team.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@0:00] - Introduction\n     \n       \n  •  [@1:46] - Rust Analyzer’s source of funding and history\n     \n       \n  •  [@10:56] - Lukas’ contribution and work in Rust Analyzer\n     \n       \n  •  [@16:01] - What is Rust Analyzer and what does it do?\n     \n       \n  •  [@17:35] - Rust Analyzer diagnostics and implementation\n     \n       \n  •  [@21:23] - The importance of Rust Analyzer\n     \n       \n  •  [@25:36] - Rust Analyzer’s limitations\n     \n       \n  •  [@32:54] - Lessons from the left-pad library issue\n     \n       \n  •  [@35:20] - Difficulties with dependency version duplicates\n     \n       \n  •  [@39:53] - Installing Rust Analyzer for different code editors\n     \n       \n  •  [@44:29] - Rust Language Server vs Rust Analyzer\n     \n       \n  •  [@51:25] - Clippy\n     \n       \n  •  [@56:39] - Rust’s advantage over other languages\n     \n       \n  •  [@58:08] - Parting thoughts\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "59 mins",
        remaining_duration: "59 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDk7SUnJ2dUgk",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/k7SUnJ2dUgk/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3n0nxvXRVLVYrGhdlK9FYBCkZSjQw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/k7SUnJ2dUgk/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kj9kK351_9PSyY-i41mt2l5UL9wg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Wasmer with Syrus Akbary",
        description: "Allen Wyma talks with Syrus Akbary (https://syrusakbary.com/) , Founder and CEO at Wasmer (https://wasmer.io/) , a WebAssembly runtime written in Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@0:00] - What is Wasmer?\n     \n       \n  •  [@4:50] - How Syrus got into Wasmer\n     \n       \n  •  [@7:55] - WebAssembly vs Docker and Kubernetes\n     \n       \n  •  [@14:30] - WebAssembly GC proposal and updates\n     \n       \n  •  [@18:06] - Advantage of using WASM over other techniques\n     \n       \n  •  [@20:52] - Permission system with WebAssembly\n     \n       \n  •  [@23:30] - Why choose Wasmer?\n     \n       \n  •  [@25:04] - Wasmer installation process\n     \n       \n  •  [@25:56] - What makes Rust the best language to use for creating Wasmer\n     \n       \n  •  [@28:47] - Compiling and running your Rust codes to WebAssembly\n     \n       \n  •  [@30:48] - Updates and features that are coming out on WebAssembly\n     \n       \n  •  [@39:36] - Rust and WebAssembly\n     \n       \n  •  [@46:00] - Making all applications able to compile to WebAssembly\n     \n       \n  •  [@47:01] - Using GUI with Wasmer\n     \n       \n  •  [@50:16] - Where to get more information about Wasmer\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "51 mins",
        remaining_duration: "51 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED_gwDJObv7Cg",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/_gwDJObv7Cg/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3nDvp25xb26TwYOBYTyRr8e-TUuoQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/_gwDJObv7Cg/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3mMXMNhwZ35pKL5_6Lna65aG2ViJw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Servo with Josh Matthews",
        description: "Allen Wyma talks with Josh Matthews (https://www.linkedin.com/in/joshuadmatthews/) , former Engineering Manager at Mozilla for Servo (https://servo.org/) , a web browser engine written in Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:00] - Josh’s history with Servo\n     \n       \n  •  [@3:54] - Community fears around the future of Rust when Mozilla had their layoffs\n     \n       \n  •  [@6:52] - Chrome’s Javascript engine\n     \n       \n  •  [@10:54] - How to make web design more secure with Rust\n     \n       \n  •  [@19:50] - How Servo is using Rust\n     \n       \n  •  [@24:49] - Servo’s responsibility as browser engine vs a JavaScript engine\n     \n       \n  •  [@30:14] - CSS Grid support\n     \n       \n  •  [@35:51] - Developer tools\n     \n       \n  •  [@39:54] - Complexity in web optimization\n     \n       \n  •  [@42:13] - Running multiple iframes within a page\n     \n       \n  •  [@44:21] - How Rust helped Servo\n     \n       \n  •  [@46:32] - Funding Servo\n     \n       \n  •  [@50:19] - Where to get updates on Servo\n     \n       \n  •  [@50:40] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "51 mins",
        remaining_duration: "51 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDyRlK0Rqi07M",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/yRlK0Rqi07M/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3llOV03LcpO9Fw2bFcC_RRHRJT-tw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/yRlK0Rqi07M/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nufv9z_pARUHwLyvunxf8auKv1Ew",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "AI-NC with Tom Miles",
        description: "Allen Wyma talks with Tom Miles (https://www.linkedin.com/in/thomasgregorymiles/) , CTO of AI-NC (https://www.ai-nc.com/) , a platform written in Rust to get manufactorability feedback for hardware designs.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:00] - Introduction\n     \n       \n  •  [@0:46] - What is Spin\n     \n       \n  •  [@1:23] - AI-NC’s company history\n     \n       \n  •  [@2:46] - What made Tom start a machine shop company\n     \n       \n  •  [@8:17] - AI-NC’s goal to provide automation, design, and advanced manufacturing\n     \n       \n  •  [@17:04] - Communication between designers and assembly people\n     \n       \n  •  [@19:22] - The margin for error in manufacturing\n     \n       \n  •  [@30:40] - What made the team switch to Rust vs other languages\n     \n       \n  •  [@35:06] - Libraries that AI-NC uses in their services\n     \n       \n  •  [@42:35] - Integrations with third-party chat applications\n     \n       \n  •  [@46:03] - Hiring Rust talent\n     \n       \n  •  [@50:23] - Teaching people Rust\n     \n       \n  •  [@53:27] - Advice for companies that want to use Rust\n     \n       \n  •  [@54:42] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "55 mins",
        remaining_duration: "55 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDqiwafO25QZ8",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/qiwafO25QZ8/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3mzTB0fkSKRcnu-vZcsVNdELnqZow",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/qiwafO25QZ8/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kzusmvbOnQ4LAjyEQFMlj9Zy3DWg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Cargo Limit with Alexander Lopatin",
        description: "Allen Wyma talks with Alexander Lopatin (https://codonaft.com/) , creator of Cargo Limit (https://crates.io/crates/cargo-limit) , a cargo plugin that will show errors in your Rust code before any warnings.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:00] - Alexander’s programming background\n     \n       \n  •  [@3:17] - What made Alexander interested in the Rust\n     \n       \n  •  [@4:43] - What is Cargo Limit?\n     \n       \n  •  [@9:19] - Cargo Limit’s features\n     \n       \n  •  [@11:20] - Improvements that Alexander wants to make in Cargo Limit\n     \n       \n  •  [@12:52] - Cargo extensions and installation\n     \n       \n  •  [@13:31] - Alexander’s process for creating Cargo extensions and plugins\n     \n       \n  •  [@16:00] - Using Neovim and integrating with Rust Analyzer\n     \n       \n  •  [@18:57] - Upcoming upgrades and features of Cargo Limit\n     \n       \n  •  [@24:46] - How to get in touch with Alexander and learn more\n     \n       \n  •  [@25:28] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "26 mins",
        remaining_duration: "26 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDLyiy9mMF6OQ",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/Lyiy9mMF6OQ/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3nsg31MN1PJ_W9iUhW0bc50I0nhQw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/Lyiy9mMF6OQ/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nHlLlnYPXOsN3K2bfEYr8vQKndaw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Zed with Antonio Scandurra",
        description: "Allen Wyma talks with Antonio Scandurra (https://twitter.com/as__cii) , co-creator of Zed (https://zed.dev) , a high performance code editor written in Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:00] - Introduction\n     \n       \n  •  [@2:56] - The story behind Zed\n     \n       \n  •  [@6:24] - Zed’s performance and features powered by Rust\n     \n       \n  •  [@12:01] - How Zed balances speed vs features\n     \n       \n  •  [@16:00] - What is the most important thing an editor has to have?\n     \n       \n  •  [@18:01] - Zed customization and the ability to add plugins\n     \n       \n  •  [@23:13] - Zed’s built-in contacts panel for team collaboration\n     \n       \n  •  [@26:54] - Third-party services that Zed uses\n     \n       \n  •  [@31:28] - Zed’s tab support\n     \n       \n  •  [@32:39] - Zed’s theme customization and system\n     \n       \n  •  [@34:31] - Top crates that power Zed\n     \n       \n  •  [@36:05] - Zed’s plans to support other platforms\n     \n       \n  •  [@37:56] - Porting Rust vs porting other languages\n     \n       \n  •  [@42:09] - Zed’s pricing plans\n     \n       \n  •  [@43:15] - Zed’s possible plan for open-sourcing parts of the editor\n     \n       \n  •  [@44:10] - Check out more information about Zed and sign up to join the waitlist\n     \n       \n  •  [@44:29] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "45 mins",
        remaining_duration: "45 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDjy9HXpmbwYE",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/jy9HXpmbwYE/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kOkahusjCtIB8N3Im7gZMJKDv-HA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/jy9HXpmbwYE/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3ke_3IAlZJkQ75zer6wibLeSt4j0g",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rustdoc with Joshua Nelson",
        description: "Allen Wyma talks with Joshua Nelson (https://jyn.dev/) , team lead for the Bootstrap (https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html)  team for Rust, and formally on the Rustdoc team for Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:00] - Introduction\n     \n       \n  •  [@1:07] - Different groups and teams in the Rust community\n     \n       \n  •  [@8:31]  - Memory safety and security issues\n     \n       \n  •  [@10:26] - Rust documentation\n     \n       \n  •  [@12:13] - Joshua’s contribution to Rust’s documentation\n     \n       \n  •  [@14:57] - How did Joshua get involved with Rust\n     \n       \n  •  [@18:17] - Documentation and prioritizing features\n     \n       \n  •  [@23:19] - Rust team and governance issues\n     \n       \n  •  [@34:17] - Maintaining the code\n     \n       \n  •  [@37:45] - Joshua’s new team and career\n     \n       \n  •  [@42:20] - Cargo and the bootstrap tool\n     \n       \n  •  [@46:08] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "48 mins",
        remaining_duration: "48 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDZlZ-AwboeD4",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/ZlZ-AwboeD4/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3nTVEDjcVA2SjJ-ilUom8-1oLG_3w",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/ZlZ-AwboeD4/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3lfft5TA0Dc7yv94JKP_WggTFIYfw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Asynchronix with Serge Barral",
        description: "Allen Wyma talks with Serge Barral (https://www.linkedin.com/in/serge-barral-9a2805218/)  about Asynchronix (https://github.com/asynchronics/asynchronix) , a event simulation framework written in Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:00] - What is Asynchronix (https://github.com/asynchronics/asynchronix) ?\n     \n       \n  •  [@2:21] - Writing Rust documentation\n     \n       \n  •  [@4:28] - Serge’s career & background\n     \n       \n  •  [@8:51] - How does the Asynchronix simulator work?\n     \n       \n  •  [@11:40] - The importance of writing the library in Rust\n     \n       \n  •  [@16:51] - Time-based simulation and practical use cases\n     \n       \n  •  [@26:59] - Building the custom executor\n     \n       \n  •  [@30:48] - How long did it take to build Asynchronix?\n     \n       \n  •  [@34:10] - Asynchronix’s vision to improve modern systems development\n     \n       \n  •  [@40:15] - Getting in touch to learn more about Asynchronix\n     \n       \n  •  [@41:43] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "42 mins",
        remaining_duration: "42 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED6-vnc0PlTwA",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/6-vnc0PlTwA/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3ll8-x5qjgaAu1fO0a9OwkwMWQx1g",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/6-vnc0PlTwA/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3lHeMDWu2gdvlndkqIsXWQph9crbg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Lodestone with Wilbur Zhang, Peter Jiang, and Kevin Huang",
        description: "Allen Wyma talks with the Lodestone (https://www.lodestone.cc/)  team, who is working a tool to create private Minecraft servers in a safe and convenient way using Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:00] - Introduction\n     \n       \n  •  [@2:51] - How did the Lodestone team discover Rust?\n     \n       \n  •  [@8:26] - Motivation for writing the Lodestone project\n     \n       \n  •  [@9:28] - Why choose Rust\n     \n       \n  •  [@12:23] - Go vs Rust\n     \n       \n  •  [@13:53] - Experience using Tauri (https://tauri.app/) \n     \n       \n  •  [@16:05] - Lodestone’s front-end work\n     \n       \n  •  [@19:18] - Setting up and using Lodestone\n     \n       \n  •  [@21:46] - Issues and challenges the team is currently working on\n     \n       \n  •  [@25:27] - The advantage of using Rust\n     \n       \n  •  [@27:21] - Crates used in the project\n     \n       \n  •  [@29:51] - How Actors work\n     \n       \n  •  [@34:56] - Lodestone’s scripting system\n     \n       \n  •  [@39:29] - Lodestone’s security and permission system\n     \n       \n  •  [@45:37] - How to reach out to the Lodestone team\n     \n       \n  •  [@46:19] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "47 mins",
        remaining_duration: "47 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDfwOy1yo151A",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/fwOy1yo151A/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3maJDje0bRfFfbuHkl9qkaiJmW3ig",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/fwOy1yo151A/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3lHInZEwzKWDvLzgcLpEyucDwAOFA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's New in Rust 1.65, 1.66, and 1.67",
        description: "Jon and Ben discuss the highlights of the 1.65, 1.66, and 1.67 releases of Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n[@01:11] - Rust 1.65 (https://blog.rust-lang.org/2022/11/03/Rust-1.65.0.html) \n\n\n\n     \n       \n  •  [@01:28] - Generic Associated Types (https://blog.rust-lang.org/2022/11/03/Rust-1.65.0.html#generic-associated-types-gats) \n         \n          \n                \n       •  More detailed blog post (https://blog.rust-lang.org/2022/10/28/gats-stabilization.html) \n          \n              \n       \n     \n       \n  •  [@06:48] - let-else statements (https://blog.rust-lang.org/2022/11/03/Rust-1.65.0.html#let-else-statements) \n         \n          \n                \n       •  if_chain crate (https://docs.rs/if_chain/latest/if_chain/) \n          \n              \n       \n     \n       \n  •  [@16:56] - break from labeled blocks (https://blog.rust-lang.org/2022/11/03/Rust-1.65.0.html#break-from-labeled-blocks) \n     \n       \n  •  [@19:21] - Splitting Linux debuginfo (https://blog.rust-lang.org/2022/11/03/Rust-1.65.0.html#splitting-linux-debuginfo) \n     \n       \n  •  [@20:44] - Stabilized APIs (https://blog.rust-lang.org/2022/11/03/Rust-1.65.0.html#stabilized-apis) \n         \n          \n                \n       •  std::backtrace::Backtrace (https://doc.rust-lang.org/stable/std/backtrace/struct.Backtrace.html) \n          \n              \n       \n     \n       \n  •  [@22:41] - RLS deprecation (https://blog.rust-lang.org/2022/07/01/RLS-deprecation.html) \n     \n       \n  •  [@23:19] - Changelog deep-dive\n         \n          \n                \n       •  [@23:30] - Cargo queue reordering (https://github.com/rust-lang/cargo/pull/11032) \n                  \n               \n                         \n            •  Benchmarking results (https://github.com/lqd/rustc-benchmarking-data/tree/main/experiments/cargo-schedules/pending-queue-sorted) \n               \n                       \n                \n          \n                \n       •  [@24:54] - Niches in data-filled enums (https://github.com/rust-lang/rust/issues/46213) \n          \n                \n       •  [@27:23] - poll_fn and Unpin (https://github.com/rust-lang/rust/pull/102737) \n          \n                \n       •  [@28:05] - Too many personalities (https://github.com/rust-lang/rust/issues/102754) \n          \n                \n       •  [@29:20] - uninit integers are UB (https://github.com/rust-lang/rust/pull/98919/) \n                  \n               \n                         \n            •  Working Group discussion (https://github.com/rust-lang/unsafe-code-guidelines/issues/71) \n               \n                       \n                \n          \n                \n       •  [@33:23] - Uplift let_underscore lint (https://github.com/rust-lang/rust/pull/97739/) \n          \n                \n       •  [@35:13] - #[non_exhaustive] on enum variants\n          \n              \n       \n     \n     \n\n[@36:27] - Rust 1.66.0 (https://blog.rust-lang.org/2022/12/15/Rust-1.66.0.html) \n\n\n\n     \n       \n  •  [@36:40] - Explicit discriminants on enums with fields (https://blog.rust-lang.org/2022/12/15/Rust-1.66.0.html#explicit-discriminants-on-enums-with-fields) \n         \n          \n                \n       •  Dark and forbidden secrets (https://github.com/rust-lang/rust/issues/81686) \n          \n                \n       •  RFC (https://github.com/rust-lang/rfcs/blob/master/text/2363-arbitrary-enum-discriminant.md) \n          \n              \n       \n     \n       \n  •  [@40:05] - core::hint::black_box (https://blog.rust-lang.org/2022/12/15/Rust-1.66.0.html#corehintblack_box) \n         \n          \n                \n       •  Tracking issue discussion (https://github.com/rust-lang/rust/issues/64102) \n          \n              \n       \n     \n       \n  •  [@46:34] - cargo remove (https://blog.rust-lang.org/2022/12/15/Rust-1.66.0.html#cargo-remove) \n     \n       \n  •  [@46:52] - Stabilized APIs (https://blog.rust-lang.org/2022/12/15/Rust-1.66.0.html#stabilized-apis) \n         \n          \n                \n       •  Mixed integer operations (https://github.com/rust-lang/rust/issues/87840) \n          \n                \n       •  BTreeMap/Set first/last operations (https://github.com/rust-lang/rust/issues/62924) \n          \n                \n       •  std::os::fd (https://doc.rust-lang.org/stable/std/os/fd/index.html) \n          \n              \n       \n     \n       \n  •  [@50:51] - Changelog deep-dive\n         \n          \n                \n       •  [@51:10] - C...",
        total_duration: "1 hr 25 mins",
        remaining_duration: "1 hr 25 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDZ-hdndu4g1A",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/Z-hdndu4g1A/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3mRJq5W0q1nRZKkGaFRXvi5_86baQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/Z-hdndu4g1A/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3nELxP29R6FThpCJ7qBFME712qNGw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rust ABI with Aurimas Blažulionis",
        description: "Allen Wyma talks with Aurimas Blažulionis (https://blaz.is/) , author of We Need Type Information, Not Stable ABI (https://blaz.is/blog/post/we-dont-need-a-stable-abi/)  blog post, which details possible alternatives to a stable Rust ABI.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:00] - Who is Auri?\n     \n       \n  •  [@3:07] - Auri’s background: video game development, hacking, and reverse engineering\n     \n       \n  •  [@8:14] - Common advice for optimizing your code\n     \n       \n  •  [@10:24] - Auri’s article on how to link multiple libraries together\n     \n       \n  •  [@14:07] - What is an ABI (Application Binary Interface)?\n     \n       \n  •  [@17:05] - ABI between C and C++\n     \n       \n  •  [@19:02] - ABI for Rust\n     \n       \n  •  [@21:14] - Fat pointers and zero-size types\n     \n       \n  •  [@23:50] - Writing FFI\n     \n       \n  •  [@31:15] - C FFI in relation to a Rust ABI\n     \n       \n  •  [@32:12] - System support for Rust\n     \n       \n  •  [@39:30] - Auri’s blog and articles\n     \n       \n  •  [@40:53] - Where to reach out to Auri\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "42 mins",
        remaining_duration: "42 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDEClEx4QyWro",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/EClEx4QyWro/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3nWntEANz5CVqIiYDi_zP9w1vUAYQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/EClEx4QyWro/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nbVIosrbGesH-cAmieFfBsGUyhiA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Cloudflare with Adam Chalmers",
        description: "Allen Wyma talks with Adam Chalmers (https://adamchalmers.com/) , software engineer at Cloudflare (https://www.cloudflare.com/) , which is a global network of servers located around the world, that uses Rust to help power and secure the internet.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:00] - Introduction to Cloudflare\n     \n       \n  •  [@3:57] - Cloudflare’s edge computing\n     \n       \n  •  [@7:56] - Running Rust binary on Cloudflare\n     \n       \n  •  [@10:36] - Adams’ background and work history\n     \n       \n  •  [@15:12] - How does Cloudflare provide web security?\n     \n       \n  •  [@32:30] - Cloudflare’s transition and rewriting from C to Rust\n     \n       \n  •  [@37:12] - Cloudflare’s data plane and control plane\n     \n       \n  •  [@43:00] - Hacking and security issues on Apple and other devices\n     \n       \n  •  [@50:56] - How does Cloudflare handle onboarding people to Rust\n     \n       \n  •  [@1:00:09] - The importance of Rust’s performance and reliability for Cloudflare\n     \n       \n  •  [@1:05:07] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 6 mins",
        remaining_duration: "1 hr 6 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDCA-LwdkFuK0",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/CA-LwdkFuK0/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3maet53Fu7NV3jI09kpwUWts5i-Nw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/CA-LwdkFuK0/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3l2gXGg16HEJbIEQIV5lmnfNRkQfw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rust Web Programming with Maxwell Flitton",
        description: "Allen Wyma talks with Maxwell Flitton (https://maxwellflitton.com/) , author of Rust Web Programming (https://www.amazon.com/Rust-Web-Programming-hands-applications-dp-1803234695/dp/1803234695/)  which details how to build web services using Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:00] - Introduction\n     \n       \n  •  [@3:21] - What led Maxwell to write and publish books about Rust\n     \n       \n  •  [@6:02] - Type-checking and Python crashes\n     \n       \n  •  [@8:50] - Rust technology and its sustainability\n     \n       \n  •  [@12:32] - Python vs Rust\n     \n       \n  •  [@13:23] - Maxwell’s background and history\n     \n       \n  •  [@16:11] - Details about Maxwell’s book Rust Web Programming\n     \n       \n  •  [@19:19] - Using the actor model\n     \n       \n  •  [@24:02] - Maxwell’s thoughts and motivation for publishing more books\n     \n       \n  •  [@32:44] - Rust community\n     \n       \n  •  [@35:19] - Rust innovations happening in London\n     \n       \n  •  [@36:22] - Where to purchase the Rust Web Programming book\n     \n       \n  •  [@40:14] - What to expect for the upcoming book editions\n     \n       \n  •  [@43:48] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "46 mins",
        remaining_duration: "46 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDthSQ_956c5M",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/thSQ_956c5M/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3lN8UXfyPPj5X4gV8bjTFfQjmeZKg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/thSQ_956c5M/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3lRgE5laUiiHoKXaz3hWvmA5IGVgg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rust Magazine with Shuang Zhu",
        description: "Allen Wyma talks with Shuang Zhu (https://folyd.com/) , creator of Rust Magazine (https://rustmagazine.org/) , a Rust-focused online magazine that provides articles from experts and enthusiasts in Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:00] - Introduction\n     \n       \n  •  [@3:28] - Rust community in China\n     \n       \n  •  [@4:03] - Shuang Zhu’s experience using Go\n     \n       \n  •  [@7:30] - Go vs Rust\n     \n       \n  •  [@11:21] - Rust Magazine\n     \n       \n  •  [@11:42] - What separates Rust Magazine from other Rust publications\n     \n       \n  •  [@18:01] - How to contribute and submit articles to Rust Magazine\n     \n       \n  •  [@21:41] - How to apply as an editor for Rust Magazine\n     \n       \n  •  [@22:08] - Publishing frequency for Rust Magazine\n     \n       \n  •  [@24:04] - How to stay up to date with the Rust Magazine\n     \n       \n  •  [@25:26] - What made Shuang Zhu decide to create Rust Magazine\n     \n       \n  •  [@27:25] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "28 mins",
        remaining_duration: "28 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDjoddrUWyUvk",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/joddrUWyUvk/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3lz71vVh2TaHkIcrFXHwFFk_R7k9g",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/joddrUWyUvk/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3ne7X1n-aGjIYRqrxsCCiMMB_YOuw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rust Nation with Ernest Kissiedu",
        description: "Allen Wyma talks with Ernest Kissiedu (https://github.com/ernestkissiedu) , organizer of Rust Nation (https://www.rustnationuk.com/) , a Rust-focused conference geared towards Rust beginners and the Rust-curious.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:00] - Introduction\n     \n       \n  •  [@3:21] - Rust Nation’s purpose and goal\n     \n       \n  •  [@5:14] - Ernest’s background and being the community lead of Rust London Community\n     \n       \n  •  [@13:29] - Rust communities all around the world\n     \n       \n  •  [@16:14] - Possible guests and speakers at the Rust conference.\n     \n       \n  •  [@22:39] - Why you should attend the Rust conference regardless of how experienced you are with Rust\n     \n       \n  •  [@26:44] - Choosing and narrowing down the list of speakers for the conference\n     \n       \n  •  [@31:55] - How the Rust conference will be different from other conferences\n     \n       \n  •  [@35:29] - How to join the Rust London Community Meetup group\n     \n       \n  •  [@42:20] - Get 15% off on Rust conference ticket price use promo code RUSTACEAN-STATION\n     \n       \n  •  [@50:31] - How to reach out to Ernest\n     \n       \n  •  [@51:27] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "52 mins",
        remaining_duration: "52 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDVvod274eCBA",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/Vvod274eCBA/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3m0jW75KfBWVzF24BPxX6Bf4BGmjA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/Vvod274eCBA/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3lFQyYTFjN-f5i-3CgjGERSavkVlw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Fermyon with Matt Butcher",
        description: "Allen Wyma talks with Matt Butcher (https://twitter.com/technosophos) , CEO of Fermyon (https://www.fermyon.com/) , who is working on Fermyon Cloud (https://www.fermyon.com/cloud) , a platform to deploy and host WebAssembly applications, with a prime focus on hosting Spin applications (https://developer.fermyon.com/spin/developing)  written in Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:00] - Introduction\n     \n       \n  •  [@2:13] - A deeper dive into the Cloud and its impact\n     \n       \n  •  [@9:39] - Matt’s work experience on HP and HP Cloud.\n     \n       \n  •  [@13:40] - Kubernetes\n     \n       \n  •  [@20:07] - WebAssembly\n     \n       \n  •  [@30:27] - Krustlet (https://krustlet.dev/) \n     \n       \n  •  [@36:21] - Edge Computing\n     \n       \n  •  [@41:05] - Fermyon Cloud\n     \n       \n  •  [@50:48] - Where to learn more about Fermyon Cloud\n     \n       \n  •  [@52:58] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "54 mins",
        remaining_duration: "54 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDuBkQjQ1Fn24",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/uBkQjQ1Fn24/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3kv2kwSzaSeFxlTph3EvYSFQRrsEg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/uBkQjQ1Fn24/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3ll-G3Ov4FP4ChEYPM889EYDdDqpw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "C2Rust with Stephen Crane",
        description: "Allen Wyma talks with Stephen Crane (https://immunant.com/authors/stephen-crane/) , CTO of Immunant (https://immunant.com/) , who is working on C2Rust (https://github.com/immunant/c2rust) , a library that transpiles C99-compliant C code into unsafe Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@00:00] - C2Rust Introduction\n     \n       \n  •  [@01:50] - How C2Rust works and its goal as a transpiler\n     \n       \n  •  [@05:49] - Transpilers vs compilers\n     \n       \n  •  [@12:30] - Unstructured control flow vs structured control flow\n     \n       \n  •  [@16:32] - The process of transforming C to Rust projects\n     \n       \n  •  [@19:15] - Parsing C code correctly\n     \n       \n  •  [@22:13] - The importance of compiler flags on interpreting C Code\n     \n       \n  •  [@28:45] - C++ vs C\n     \n       \n  •  [@38:50] - When you should you look at using C2Rust\n     \n       \n  •  [@45:04] - The best way to run your tests in Rust\n     \n       \n  •  [@48:15] - Projects that are currently using C2Rust\n     \n       \n  •  [@50:29] - Improving the usability and safety of the output of rust code\n     \n       \n  •  [@53:55] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "55 mins",
        remaining_duration: "55 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED2HiLxAnuGvc",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/2HiLxAnuGvc/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3nO27Gz8tnGLbObbExxTXDVSqZ26Q",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/2HiLxAnuGvc/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3l9fpjzGuC7NrjeQMn4GnNcNt8dWg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Kernel Density Estimation with Seaton Ullberg",
        description: "Allen Wyma talks with Seaton Ullberg (https://github.com/seatonullberg) , developer of kernel-density-estimation (https://github.com/seatonullberg/kernel-density-estimation) , a Rust library that computes kernel density estimations (https://en.wikipedia.org/wiki/Kernel_density_estimation) .\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:00] - Introduction\n     \n       \n  •  [@0:55] - Crate overview and how it works\n     \n       \n  •  [@17:49] - Kernel Density Estimation vs other competing algorithms\n     \n       \n  •  [@24:05] - Application uses of Kernel Density Estimation\n     \n       \n  •  [@33:38] - Why write this library\n     \n       \n  •  [@35:03] - Why use Rust when re-writing this library\n     \n       \n  •  [@40:26] - Seaton using f64 as a feature\n     \n       \n  •  [@42:20] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "43 mins",
        remaining_duration: "43 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDC2kbBRZ-AZA",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/C2kbBRZ-AZA/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3l9R3PY0y1Aa595GXYhpD38xNq-Ow",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/C2kbBRZ-AZA/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3lCcGzjvrY1xDhwcpnOppoX-j2ewg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Presser with Gray Olson",
        description: "Allen Wyma talks with Gray Olson (https://www.grayolson.me/) , developer of Presser (https://github.com/EmbarkStudios/presser) , a library that aims to make it easier to safely work with byte buffers.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@00:00] - Gray’s background and introduction\n     \n       \n  •  [@04:18] - Gray’s art and graphic designing work for Embark Studio\n     \n       \n  •  [@08:40] - Ray tracing and fractals\n     \n       \n  •  [@13:44] - The most expensive process in a video game\n     \n       \n  •  [@16:48] - Vector graphics are so hard on the GPU\n     \n       \n  •  [@18:57] - What makes triangles very useful in drawing and designing\n     \n       \n  •  [@22:41] - Matrix math as a fundamental building block of computer graphics\n     \n       \n  •  [@28:13] - Understanding the concept of uninitialized memory and why Presser is necessary\n     \n       \n  •  [@36:31] - LLVM’s “No Uninitialized Memory” attribute.\n     \n       \n  •  [@39:06] - Rust’s virtual machine\n     \n       \n  •  [@40:52] - Allocating memory for data\n     \n       \n  •  [@49:34] - Safety invariants and validity invariants in the Rust ecosystem\n     \n       \n  •  [@53:19] - How to use unsafe code in a way that does not violate the validity invariant of Rust\n     \n       \n  •  [@1:04:01] - Embark Studio’s mission to enable those who play games to also modify the game worlds they play in\n     \n       \n  •  [@1:07:27] - Embark Studio’s Rust game projects\n     \n       \n  •  [@1:09:08] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 11 mins",
        remaining_duration: "1 hr 11 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDcOX-bGn67ls",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/cOX-bGn67ls/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3mHGgrTD4n2gMxD8mdVS7Nqh1paIg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/cOX-bGn67ls/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3lInDFTvpO0gkbBDq50vNRZuUDDJg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Leptos with Greg Johnston",
        description: "Allen Wyma talks with Greg Johnston (https://twitter.com/greg_johnston) , creator of Leptos (https://github.com/gbj/leptos) , a full-stack, web framework using a reactive design to build declaritive user interfaces.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@00:00] - Introduction of Greg\n     \n       \n  •  [@02:12] - Programming languages has Greg worked with\n     \n       \n  •  [@05:14] - Greg’s other passions besides programming\n     \n       \n  •  [@10:59] - How Elm has set the agenda for a lot of Javascript front-end frameworks\n     \n       \n  •  [@13:25] - Elm vs Rust in terms of error handling\n     \n       \n  •  [@18:16] - What is Leptos and why Greg created it\n     \n       \n  •  [@33:44] - Pros of using Leptos\n     \n       \n  •  [@38:19] - Leptos’ Server Side Rendering feature\n     \n       \n  •  [@45:44] - Leptos’ build tool limitations\n     \n       \n  •  [@51:40] - Leptos’ ability to interact with other languages\n     \n       \n  •  [@59:25] - Greg’s work and projects using JavaScript\n     \n       \n  •  [@1:00:45] - Greg’s Flutter experience\n     \n       \n  •  [@1:04:21] - Greg’s Ionic experience\n     \n       \n  •  [@1:08:28] - HTML\n     \n       \n  •  [@1:12:46] - Leptos’ version\n     \n       \n  •  [@1:14:14] - Leptos’ production readiness\n     \n       \n  •  [@1:16:23] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 16 mins",
        remaining_duration: "1 hr 16 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDV2Y1E0XPW7g",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/V2Y1E0XPW7g/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3nnri8BXztu3azU8bCdEiBSiIWc6g",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/V2Y1E0XPW7g/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kQmlgwEcTLE8D9o6Q0_YkOFUQZBA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Kanal with Khashayar Fereidani",
        description: "Allen Wyma talks with Khashayar Fereidani (https://fereidani.com/) , creator of Kanal (https://github.com/fereidani/kanal) , a sync and async channel library boasting the fastest implementation of channels in Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@00:10] - Introduction\n     \n       \n  •  [@03:10] - Where did the idea of creating Kanal come from?\n     \n       \n  •  [@04:10] - Go vs Rust performance\n     \n       \n  •  [@06:32] - How Kanal works with synchronous Rust\n     \n       \n  •  [@07:40] - When did work on Kanal get started\n     \n       \n  •  [@11:08] - What’s left to get done for Kanal to be production ready\n     \n       \n  •  [@13:48] - Feedback so far for Kanal\n     \n       \n  •  [@15:54] - Async frameworks that work with Kanal\n     \n       \n  •  [@16:59] - Kinds of problems that are solved with channels\n     \n       \n  •  [@19:11] - Channels can help in learning Rust\n     \n       \n  •  [@19:48] - What’s next for Kanal\n     \n       \n  •  [@20:49] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "21 mins",
        remaining_duration: "21 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDhsWEe93_aaE",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/hsWEe93_aaE/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kzX63EkFu9BmdFSnaWx41DreHm1Q",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/hsWEe93_aaE/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3mr2dRc7jNuP-GLBrfMjkuF9uYe-g",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "cargo-auditable with Sergey Davidoff",
        description: "Allen Wyma talks with Sergey Davidoff (https://github.com/Shnatsel) , creator of cargo-auditable (https://github.com/rust-secure-code/cargo-auditable) , a cargo plugin for auditing your Rust dependencies for security vulnerabilities.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@00:10] - Introduction to cargo-auditable\n     \n       \n  •  [@07:51] - Guarantees that cargo-auditable provides\n     \n       \n  •  [@17:33] - Trivy and other crates that are in cargo-auditable\n     \n       \n  •  [@19:47] - cargo-auditable vs cargo audit\n     \n       \n  •  [@21:09] - Sergey’s programming background\n     \n       \n  •  [@34:49] - Vulnerabilities Sergey was able to encounter and reported to RustSec\n     \n       \n  •  [@39:47] - Feedbacks and reactions from library owners that were found to have issues\n     \n       \n  •  [@48:52] - How does Sergey handle problems and issues he encounters?\n     \n       \n  •  [@56:48] - Sergey’s tips and advice to those who want to improve security on their projects\n     \n       \n  •  [@59:36] - Parting thoughts and shoutouts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 4 mins",
        remaining_duration: "1 hr 4 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDwMvNuA_vabk",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/wMvNuA_vabk/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3nQO2Aymyxr1fA7WgWdzqfNfIkEZw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/wMvNuA_vabk/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3mFKydcQ-3DyCkNTfJXzxgLs1I4JQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Pants with Eric Arellano and Stu Hood",
        description: "Allen Wyma talks with Eric Arellano (https://www.linkedin.com/in/arellanoeric)  (they/them) and Stu Hood (https://twitter.com/stuhood)  (he/him), maintainers of Pants (https://www.pantsbuild.org/) , a build system made for monorepos.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@00:10] - Pants’ Introduction\n     \n       \n  •  [@01:26] - Different languages used in building Pants\n     \n       \n  •  [@03:25] - Pants versions\n     \n       \n  •  [@06:00] - Pants’ history and why it started\n     \n       \n  •  [@11:09] - What is a Monorepo and why you would want to use it\n     \n       \n  •  [@13:48] - Polyrepo vs Monorepo\n     \n       \n  •  [@19:04] - What makes Pants unique\n     \n       \n  •  [@21:03] - Why Pants needed to rewrite some parts from Python to Rust and other languages\n     \n       \n  •  [@22:31] - Why Pants chose Rust\n     \n       \n  •  [@25:46] - Pants 1 vs Pants 2\n     \n       \n  •  [@27:12] - Challenges integrating Python and Rust\n     \n       \n  •  [@29:03] - How Eric and Stu figured out which parts should be written in Python and which should be in Rust\n     \n       \n  •  [@32:27] - Future plans and what’s next for Pants?\n     \n       \n  •  [@36:15] - Shoutouts and parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "42 mins",
        remaining_duration: "42 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED7n1yuwszW9Y",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/7n1yuwszW9Y/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3nJe84qfxxz6Wn4RTLPjq5eI0gsRQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/7n1yuwszW9Y/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3l-crzfKUk348WB-41NcAR2zdw_pA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Veloren with Forest Anderson",
        description: "Allen Wyma talks with Forest Anderson (https://www.forest-anderson.ca/) , co-host at Rust GameDev Podcast (https://rustgamedev.com/) , and core dev on Veloren (https://veloren.net/) . Allen and Forest talk about Veloren, a multiplayer voxel RPG game engine, written in Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@00:11] - Introduction\n     \n       \n  •  [@03:31] - The Rust Game Dev Team\n     \n       \n  •  [@07:31] - The size of the community for Rust game development\n     \n       \n  •  [@10:48] - The complexity of game development\n     \n       \n  •  [@12:43] - How Veloren was created\n     \n       \n  •  [@18:30] - What is Veloren\n     \n       \n  •  [@22:52] - The kinds of games that can be developed in Veloren\n     \n       \n  •  [@25:36] - The advantage of using Rust in game development\n     \n       \n  •  [@31:51] - Game development experience in Linux vs Windows\n     \n       \n  •  [@34:46] - Gaming community for Linux\n     \n       \n  •  [@37:40] - System Requirement for running Veloren\n     \n       \n  •  [@42:17] - Parting thoughts\n     \n       \n  •  [@43:54] - Where to reach out and how to get involved with Veloren and in the Rust Game Dev community\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "44 mins",
        remaining_duration: "44 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDejqL7Y2TPN0",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/ejqL7Y2TPN0/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kkFG-T020kDkS1XvkmGHjRq3_zVw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/ejqL7Y2TPN0/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3m7GhQKYV7nekaM0yFF4p1Vu7ClDw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's New in Rust 1.62, 1.63, and 1.64",
        description: "Jon and Ben discuss the highlights of the 1.62, 1.63, and 1.64 releases of Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n[@00:50] - Rust 1.62 (https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html) \n\n\n\n     \n       \n  •  [@00:58] - cargo add (https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html#cargo-add) \n         \n          \n                \n       •  Maintaining sorting in TOML files (https://github.com/rust-lang/cargo/blob/13ae438cf079da58272edc71f4d4968043dbd27b/src/cargo/ops/cargo_add/mod.rs#L97) \n          \n                \n       •  toml_edit (https://crates.io/crates/toml_edit) \n          \n                \n       •  cargo-edit (https://github.com/killercup/cargo-edit) \n          \n              \n       \n     \n       \n  •  [@03:37] - #[default] enum variants (https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html#default-enum-variants) \n         \n          \n                \n       •  Generated bounds part of RFC (https://rust-lang.github.io/rfcs/3107-derive-default-enum.html#generated-bounds) \n          \n                \n       •  Macro helper attributes (https://doc.rust-lang.org/stable/reference/procedural-macros.html#derive-macro-helper-attributes) \n          \n                \n       •  Extra bounds on derive (https://github.com/rust-lang/rust/issues/26925) \n          \n              \n       \n     \n       \n  •  [@07:36] - Thinner, faster mutexes on Linux (https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html#thinner-faster-mutexes-on-linux) \n         \n          \n                \n       •  Tracking issue (https://github.com/rust-lang/rust/issues/93740) \n          \n                \n       •  Short thread on the change from Mara (https://twitter.com/m_ou_se/status/1526211117651050497) \n          \n                \n       •  More details from Mara on pthread mutexes (https://twitter.com/m_ou_se/status/1505179030336819209) \n          \n              \n       \n     \n       \n  •  [@13:21] - Bare-metal x86_64 target (https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html#bare-metal-x86_64-target) \n         \n          \n                \n       •  Target triples (https://wiki.osdev.org/Target_Triplet) \n          \n                \n       •  Tier 2 target policy (https://doc.rust-lang.org/rustc/target-tier-policy.html#tier-2-target-policy) \n          \n                \n       •  Tier 2 targets (https://doc.rust-lang.org/rustc/platform-support.html#tier-2) \n          \n                \n       •  x86_64-unknown-none (https://doc.rust-lang.org/beta/rustc/platform-support/x86_64-unknown-none.html) \n          \n                \n       •  Custom target triples (https://rustc-dev-guide.rust-lang.org/building/new-target.html) \n          \n              \n       \n     \n       \n  •  [@22:20] - Stabilized APIs (https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html#stabilized-apis) \n         \n          \n                \n       •  f64::total_cmp (https://doc.rust-lang.org/stable/std/primitive.f64.html#method.total_cmp) \n                  \n               \n                         \n            •  Implementing PR (https://github.com/rust-lang/rust/pull/72568) \n               \n                       \n                \n          \n                \n       •  Stdin::lines (https://doc.rust-lang.org/stable/std/io/struct.Stdin.html#method.lines) \n          \n                \n       •  FusedIterator (https://doc.rust-lang.org/stable/std/iter/trait.FusedIterator.html) \n          \n              \n       \n     \n       \n  •  [@29:22] - Changelog deep-dive\n         \n          \n                \n       •  cargo -F for --features (https://github.com/rust-lang/cargo/pull/10576) \n          \n                \n       •  unaligned_references lint now warns by default (https://github.com/rust-lang/rust/pull/95372/) \n                  \n               \n                         \n            •  addr_of! (https://doc.rust-lang.org/core/ptr/macro.addr_of.html) \n               \n                       \n                \n          \n              \n       \n     \n     \n\n[@31:09] - Rust 1.62.1 (https://blog.rust-lang.org/2022/07/19/Rust-1.62.1.html) \n\n\n\n\nNot much to talk about. We also didn’t talk about:\n\n\n\n     \n       \n  •  Rustup 1.25.0 (https://blog.rust-lang.org/2022/07/11/Rustup-1.25.0.html) \n     \n       \n  •  Rustup 1.25.1 (https://blog.rust-lang.org/2022/07/12/Rustup-1.25.1.html) \n     \n     \n\n[@31:56] - Rust 1.63 (https://blog.rust-lang.org/2022/08/11/Rust-1.63.0.html) \n\n\n\n     \n       \n  •  [@31:56] - Scoped threads (http...",
        total_duration: "1 hr 31 mins",
        remaining_duration: "1 hr 31 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED-cfDoLt_wdc",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/-cfDoLt_wdc/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3nTxAi3ZKwdqXzJZyxJt_xXPgEB2A",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/-cfDoLt_wdc/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3moegLyAlAXfzx6wIslWf5ixzRM4g",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Ockam with Mrinal Wadhwa",
        description: "Allen Wyma talks with Mrinal Wadhwa (https://twitter.com/mrinal) , CTO at Ockam (https://www.ockam.io/) . Allen and Mrinal talk about Ockham, a toolkit, written in Rust, to build distributed applications that provide trust across hostile networks.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@00:10] - Mrinal’s Introduction\n     \n       \n  •  [@01:01] - What is Ockam?\n     \n       \n  •  [@05:04] - Building Ockam from scratch and building it open source\n     \n       \n  •  [@10:45] - How Ockam provides security with modern data distribution\n     \n       \n  •  [@18:15] - The reason behind building Ockam with Rust\n     \n       \n  •  [@26:15] - Feedback that Ockam received from using Rust & Elixir (https://elixir-lang.org/) \n     \n       \n  •  [@28:04] - Concerns with Rust and Elixir\n     \n       \n  •  [@29:38] - The most difficult part of working on Ockam\n     \n       \n  •  [@30:42] - Competing technologies that solve the same issues as Ockam\n     \n       \n  •  [@33:04] - When Ockam is not a good solution\n     \n       \n  •  [@35:15] - What’s next for Ockam\n     \n       \n  •  [@40:17] - Job opportunity with Ockam\n     \n       \n  •  [@41:48] - Why Ockham switched From Erlang (https://www.erlang.org/)  to Elixir\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "44 mins",
        remaining_duration: "44 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED1YAHcRNf1EU",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/1YAHcRNf1EU/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3l93o24cBYHFO1NV3g2hNfNd5Osqg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/1YAHcRNf1EU/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nafjw2CdLL3anjN9G7qdMi80bM1g",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Axum with David Pedersen",
        description: "Allen Wyma talks with David Pedersen (https://twitter.com/davidpdrsn) , Core Team Member at Tokio (https://tokio.rs/) . Allen and David talk about Axum (https://github.com/tokio-rs/axum) , a web application framework written in Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:40] - Introduction\n     \n       \n  •  [@1:13] - Why Axum is developed under the Tokio project umbrella\n     \n       \n  •  [@5:58] - What to expect from Axum\n     \n       \n  •  [@8:14] - Axum additional features\n     \n       \n  •  [@9:40] - Why Tokio decided to roll their own web framework\n     \n       \n  •  [@13:04] - Understanding Axum vs other web frameworks\n     \n       \n  •  [@22:16] - Testing, reviews, and feedback of the Axum framework\n     \n       \n  •  [@23:46] - Axum’s production readiness\n     \n       \n  •  [@28:57] - Semantic versioning\n     \n       \n  •  [@31:59] - Understanding and learning lessons from other web frameworks to improve Axum\n     \n       \n  •  [@34:47] - Production use cases that should use Axum\n     \n       \n  •  [@35:54] - David’s Rust experience vs other web frameworks\n     \n       \n  •  [@40:25] - Clippy\n     \n       \n  •  [@41:41] - Upcoming changes and roadmap for Axum\n     \n       \n  •  [@45:28] - Parting thoughts and how to reach out to David\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "49 mins",
        remaining_duration: "49 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDOaBpgn14WBI",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/OaBpgn14WBI/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3mut0OyNAxctpzO5QdhMye-GR-6ZA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/OaBpgn14WBI/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kpori6T4KUG9lhtD7swJ2ikVagQg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rust at Microsoft with Nell Shamrell-Harrington",
        description: "Allen Wyma talks with Nell Shamrell-Harrington (https://twitter.com/nellshamrell) , Member Board of Directors at Rust Foundation (https://foundation.rust-lang.org/)  and Principal Software Engineer at Microsoft (https://microsoft.com/)  about Microsoft’s use of Rust, her time being involved with Rust, and also the Rust RFC process..\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@1:30] - Nell’s Background and Introduction\n     \n       \n  •  [@5:31] - Rust communities all over the world\n     \n       \n  •  [@7:10] - Handling opinions, feedback and RFCs when making changes and updating a language\n     \n       \n  •  [@11:23] - What is a RFC and how does it work?\n     \n       \n  •  [@17:43] - Nell’s experience switching from Ruby to Rust\n     \n       \n  •  [@19:56] - Nell’s career background\n     \n       \n  •  [@24:18] - How the Rust Foundation operates\n     \n       \n  •  [@24:20] - Rust Foundation’s sponsorship model\n     \n       \n  •  [@33:08] - What Microsoft is currently working on with Rust\n     \n       \n  •  [@42:22] - How much Rust is going into Windows\n     \n       \n  •  [@44:25] - Is there a public long-term plan for Microsoft’s involvement with Rust?\n     \n       \n  •  [@48:02] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "51 mins",
        remaining_duration: "51 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDvyOLD7hLfkI",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/vyOLD7hLfkI/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3l6UHnFOUOph_TcNyuJEVgCvKeIrg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/vyOLD7hLfkI/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3li28dxXmi2SdtUswLQtMsy0tgliA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Fyrox with Dmitry Stepanov",
        description: "Allen Wyma talks with Dmitry Stepanov (https://github.com/mrDIMAS) , creator of Fyrox (https://fyrox.rs/) . Fyrox is a feature-rich, general purpose game engine built in Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:41] - Dmitry’s background and programming introduction\n     \n       \n  •  [@4:12] - How did Dmitry got into building game engines\n     \n       \n  •  [@7:39] - How Dmitry discovered Rust\n     \n       \n  •  [@8:57] - Dmitry’s experience so far using Rust\n     \n       \n  •  [@12:13] - When did Dmitry start working on Fyrox\n     \n       \n  •  [@15:03] - What’s the original idea of Fyrox\n     \n       \n  •  [@16:23] - The advantage of Fyrox over other game engines\n     \n       \n  •  [@22:05] - Is Fyrox production ready?\n     \n       \n  •  [@23:17] - Games and projects that are now using Fyrox\n     \n       \n  •  [@25:58] - Things need to know before using Fyrox game engine\n     \n       \n  •  [@30:21] - Fyrox’s monetization plan\n     \n       \n  •  [@31:33] - Dmitry’s upcoming features and plans for Fyrox\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Fyrox’s Github (https://github.com/FyroxEngine/Fyrox) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "34 mins",
        remaining_duration: "34 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDdlub6wXfA0M",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/dlub6wXfA0M/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3mFOkzWpIvZY-t-9_TYlw-5cvUwqw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/dlub6wXfA0M/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kPlAqiZQkNnuv9QwQWdutqdVocog",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Tauri with Daniel Thompson-Yvetot",
        description: "Allen Wyma talks with Daniel Thompson-Yvetot (https://github.com/nothingismagick) , co-founder of Tauri (https://tauri.studio/) . Tauri is a toolkit that helps developers make applications for the major desktop platforms using a variety of front-end frameworks.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:33] - Daniel’s introduction\n     \n       \n  •  [@3:38] - Tauri’s focus on safety and security\n     \n       \n  •  [@6:50] - Tauri’s mission to reduce their footprint\n     \n       \n  •  [@14:48] - How does Tauri handles features that are not supported across different platforms\n     \n       \n  •  [@23:56] - How does Tauri monetize to keep the project going?\n     \n       \n  •  [@26:16] - Why choose Tauri over other solutions?\n     \n       \n  •  [@28:57] - What are the tools being built with Tauri?\n     \n       \n  •  [@31:09] - Tyler’s programming background\n     \n       \n  •  [@35:11] - Tauri’s future release and features\n     \n       \n  •  [@38:38] - ‘Tauri Foundations’ book by Daniel Thompson-Yvetot and Lucas Nogueira\n     \n       \n  •  [@40:00] - Requirement on building a Tauri app\n     \n       \n  •  [@43:13] - Parting thoughts\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Tauri’s Github (https://github.com/tauri-apps/tauri) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "44 mins",
        remaining_duration: "44 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDcMxvM1dCgMg",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/cMxvM1dCgMg/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3llu77z9k1Jclerfwnw21ZVepPIzQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/cMxvM1dCgMg/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nuGRmAk0p5Kbkz0vHahEhiYZr71Q",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Asynchronous Rust with Tyler Mandry",
        description: "Allen Wyma talks with Tyler Mandry (https://twitter.com/tmandry) , lead on Rust Async Working Group (https://rust-lang.github.io/wg-async/welcome.html) . Rust Async Working Group is focused around implementation/design of the “foundations” for Async I/O.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:10] - Async Working Group introduction\n     \n       \n  •  [@3:08] - Async progress over the past few years\n     \n       \n  •  [@5:16] - The Fuchsia operating system and its goals\n     \n       \n  •  [@6:19] - How much of Fushia is written in Rust?\n     \n       \n  •  [@8:16] - The experience of using Rust in Fuchsia so far\n     \n       \n  •  [@17:29] - Why are async runtimes not compatible with each other, and how might it be solved?\n     \n       \n  •  [@23:06] - How does the working group handle feedback?\n     \n       \n  •  [@25:33] - What’s the most important issue the working group is working on?\n     \n       \n  •  [@32:45] - Different types of async runtimes\n     \n       \n  •  [@34:36] - Turning synchronous into async\n     \n       \n  •  [@39:36] - How did Tyler go from async C++ to async Rust?\n     \n       \n  •  [@47:14] - Tyler’s code and documentation writing\n     \n       \n  •  [@54:21] - Where to connect with Tyler\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Tyler’s Blog (https://tmandry.gitlab.io/blog/) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "56 mins",
        remaining_duration: "56 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED2teSp_JnujE",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/2teSp_JnujE/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3lM52bTBDBEJmP0kScS-IWveaTd3Q",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/2teSp_JnujE/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3lZVpk4XZcksMpBqwN1gwIcDQz6IQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "High Assurance Rust with Tiemoko Ballo",
        description: "Allen Wyma talks with Tiemoko Ballo (https://tiemoko.com/) , author of High Assurance Rust (https://highassurance.rs/) . High Assurance Rust is a book about building performant software we can justifiably trust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:34] - Tiemeko’s introduction\n     \n       \n  •  [@2:18] - Defining Safety critical and Mission critical\n     \n       \n  •  [@3:22] - How to develop software in Rust and have a high assurance?\n     \n       \n  •  [@8:21] - The lack of standardized behavior and different compilers\n     \n       \n  •  [@13:29] - Different approaches to assurance testing\n     \n       \n  •  [@14:54] - How does Rust’s memory safety work?\n     \n       \n  •  [@20:57] - Temporal memory\n     \n       \n  •  [@22:59] - What is a borrow checker and how do we know that it’s working properly?\n     \n       \n  •  [@28:17] - The difference between fuzz testing, property-based testing, and chaos testing\n     \n       \n  •  [@35:48] - Teimoko’s programming background\n     \n       \n  •  [@42:55] - Teimoko’s work and projects\n     \n       \n  •  [@46:15] - Rust’s error handling and concurrency advantages over other languages\n     \n       \n  •  [@49:29] - What Rust lacks in terms of guaranteeing high assurance and justifiability\n     \n       \n  •  [@53:17] - How to stay up to date on what’s happening in the security space.\n     \n       \n  •  [@54:35] - Parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "58 mins",
        remaining_duration: "58 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDOWCX1UzIQzA",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/OWCX1UzIQzA/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3lUImsx18TYCqbXmBR7uxOqJvgL2w",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/OWCX1UzIQzA/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kqMGHms76BRj8Zyzy1bGBHYYKe_A",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "New Rustacean with Chris Krycho",
        description: "Allen Wyma talks with Chris Krycho (https://v5.chriskrycho.com/index.html) , host of the now-ended New Rustacean (https://newrustacean.com/)  podcast about learning the Rust programming language.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@1:08] - Chris’ background and introduction\n     \n       \n  •  [@4:33] - Chris’ current career and projects\n     \n       \n  •  [@12:17] - Rust and WebAssembly\n     \n       \n  •  [@19:35] - Chris’ podcasting plans\n     \n       \n  •  [@23:47] - Chris’ podcasting preparation and processes\n     \n       \n  •  [@36:02] - Lessons and insights coming from podcasting\n     \n       \n  •  [@48:08] - ZSH vs Fish\n     \n       \n  •  [@53:12] - Picking out potential podcast guests and making great interviews\n     \n       \n  •  [@57:12] - Chris’ opinion and comparison on the different programming languages\n     \n       \n  •  [@1:07:33] - Chris’ parting thoughts and future plans\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Chris’s Twitter (https://twitter.com/chriskrycho) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 11 mins",
        remaining_duration: "1 hr 11 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDPeJsWxPeZi4",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/PeJsWxPeZi4/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3nQNRaCHVel6gVoULnei1Cd0tMi-w",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/PeJsWxPeZi4/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3mkt0jpPNcjUaVs9NS64-NAYKhNXg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 446",
        description: "Highlights from This Week in Rust - Issue 446 (https://this-week-in-rust.org/blog/2022/06/08/this-week-in-rust-446/) ,\npresented by Allen (https://twitter.com/allenwyma)  and Tim (https://twitter.com/timClicks) , with Nell\nShamrell-Harrington (https://twitter.com/nellshamrell) , co-hosting for the first time in 2022.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n\n[@00:00:00] Welcome\n\n\n\n     \n       \n  •  [@00:00:10] - Introduction\n     \n       \n  •  [@00:00:52] - Agenda\n     \n       \n  •  [@00:01:27] - Interview with Nell Shamrell-Harrington about editing This Week\n     in Rust\n         \n          \n                \n       •  [@00:06:21] Submitting an article to This week in Rust\n          \n                \n       •  TWIR Github Repository github.com/rust-lang/this-week-in-rust (https://github.com/rust-lang/this-week-in-rust) \n          \n                \n       •  TWIR Twitter account @thisweekinrust (https://twitter.com/thisweekinrust) \n          \n                \n       •  [@00:07:42] Call for volunteers to co-host an episode\n          \n              \n       \n     \n       \n  •  [@00:08:38] - Quote of the\n     week (https://news.ycombinator.com/item?id=31616966) \n         \n           \n     \n     I wrote a bespoke time-series database in Rust a few years ago, and it has\n     had exactly one issue since I stood it up in production, and that was due to\n     pessimistic filesystem access patterns, rather than the language. This thing\n     is handling hundreds of thousands of inserts per second, and it’s even\n     threaded.\n     \n     \n           \n     \n     Given that I’ve been programming professionally for over a decade in Python,\n     Perl, Ruby, C, C++, Javascript, Java, and Rust, I’ll pick Rust absolutely\n     any time that I want something running that I won’t get called at 3 AM to\n     fix. It probably took me 5 times as long to write it as if I did it in Go or\n     Python, but I guarantee it’s saved me 10 times as much time I would have\n     otherwise spent triaging, debugging, and running disaster recovery.\n     \n         \n         \n          \n                \n       •  “Configuring uWSGI for Production\n          Deployment (https://www.bloomberg.com/company/stories/configuring-uwsgi-production-deployment/) ”\n          (2019) by at Peter Sperl and Ben Green from Bloomberg\n          \n                \n       •  uWSGI’s  max-requests (https://uwsgi-docs.readthedocs.io/en/latest/Options.html#max-requests)  and max-worker-lifetime (https://uwsgi-docs.readthedocs.io/en/latest/Options.html#max-worker-lifetime)  options are intended to reduce the chance of memory leaks affecting production workloads\n          \n              \n       \n     \n       \n  •  [@00:14:47] - Crate of the week: osmpbf (https://lib.rs/crates/osmpbf) \n         \n           \n     \n     A Rust library for reading the OpenStreetMap PBF file format (*.osm.pbf). It\n     strives to offer the best performance using parallelization and\n     lazy-decoding with a simple interface while also exposing iterators for\n     items of every level in a PBF file.\n     \n         \n         \n          \n                \n       •  OpenStreetMap (https://www.openstreetmap.org) \n          \n                \n       •  Humanitarian OpenStreetMap Team (https://www.hotosm.org/)  (HOT OSM)\n          \n              \n       \n     \n     \n\n[@00:16:40] Official Notices\n\n\n\n     \n       \n  •  [@00:16:43] - Rust Compiler June 2022 Steering Cycle (https://blog.rust-lang.org/inside-rust/2022/06/03/jun-steering-cycle.html) \n     \n     \n\n[@00:21:24] Highlights\n\n\n\n     \n       \n  •  [@00:21:51] (async) Rust doesn’t have to be\n     hard (https://itsallaboutthebit.com/async-simple/) \n         \n          \n                \n       •  Rust Is Hard, Or: The Misery of Mainstream\n          Programming (https://hirrolot.github.io/posts/rust-is-hard-or-the-misery-of-mainstream-programming.html) \n          \n                \n       •  Stack Overflow Developer Survey: Most loved programming\n          language (https://survey.stackoverflow.co/2022/#section-most-loved-dreaded-and-wanted-programming-scripting-and-markup-languages) \n          \n              \n       \n     \n       \n  •  [@00:28:28] clippy book (https://github.com/rust-lang/rust-clippy/pull/7359) \n     \n       \n  •  [@00:29:40] Rolling co-lead roles for T-compiler (https://github.com/rust-lang/rfcs/pull/3262) \n     \n       \n  •  [@00:36:33] Hyper vs Rocket - Low Level vs Batteries included (https://www.s...",
        total_duration: "56 mins",
        remaining_duration: "56 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDYIUDz6pKSJ8",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/YIUDz6pKSJ8/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3lHC2xRIuTPzRBscB79C01F8lpSSw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/YIUDz6pKSJ8/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nh40O4WwqlDpl7X9ABaUo--a3F2A",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Zig with Andrew Kelley",
        description: "Allen Wyma talks with Andrew Kelley (https://andrewkelley.me/) , creator of Zig (https://ziglang.org/) . Zig is a general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:51] - Andrew’s introduction\n     \n       \n  •  [@2:55] - Rust vs Zig\n     \n       \n  •  [@5:27] - What is undefined behavior (UB) (https://doc.rust-lang.org/reference/behavior-considered-undefined.html)  and what causes it?\n     \n       \n  •  [@11:37] - How does Zig deal with undefined behavior?\n     \n       \n  •  [@16:09] - How well does Zig work in production?\n     \n       \n  •  [@22:46] - Deeper dive into Andrew’s programming background\n     \n       \n  •  [@33:35] - Zig’s mission statement and what they’re doing as a non-profit\n     \n       \n  •  [@37:38] - Zig’s update release management\n     \n       \n  •  [@40:06] - Andrew’s OkCupid project (https://andrewkelley.me/post/full-time-zig.html) \n     \n       \n  •  [@42:20] - Andrew’s preparations and motivations for making a language\n     \n       \n  •  [@46:11] - Zig using LLVM (https://llvm.org/) \n     \n       \n  •  [@49:12] - What’s next for Zig?\n     \n       \n  •  [@54:20] - Parting thoughts\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Zig’s Github (https://github.com/ziglang) \n     \n       \n  •  Andrew’s Github (https://github.com/andrewrk) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "56 mins",
        remaining_duration: "56 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDrKXsZno9ijw",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/rKXsZno9ijw/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3l9HJ8dEy-3A8pWYdZ45aKN-NatpA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/rKXsZno9ijw/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3lM0VZaj90nOfEDxZOS8kdbx3zqLA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's New in Rust 1.60 and 1.61",
        description: "Jon and Ben discuss the highlights of the 1.60 and 1.61 releases of Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n[@01:15] - Rust 1.60 (https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html) \n\n\n\n     \n       \n  •  [@01:45] - Source-Based Code Coverage (https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html#source-based-code-coverage) \n         \n          \n                \n       •  -Cinstrument-coverage documentation (https://doc.rust-lang.org/rustc/instrument-coverage.html) \n          \n                \n       •  grcov (https://github.com/mozilla/grcov) \n          \n                \n       •  cargo-llvm-cov (https://github.com/taiki-e/cargo-llvm-cov) \n          \n              \n       \n     \n       \n  •  [@08:21] - cargo --timings (https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html#cargo---timings) \n         \n          \n                \n       •  Example output for Cargo build (https://blog.rust-lang.org/images/2022-04-07-timing.html) \n          \n                \n       •  Cargo documentation (https://doc.rust-lang.org/nightly/cargo/reference/timings.html) \n          \n              \n       \n     \n       \n  •  [@10:21] - New syntax for Cargo features (https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html#new-syntax-for-cargo-features) \n         \n          \n                \n       •  Optional dependencies (https://doc.rust-lang.org/cargo/reference/features.html#optional-dependencies) \n          \n                \n       •  Dependency features (https://doc.rust-lang.org/cargo/reference/features.html#dependency-features) \n          \n              \n       \n     \n       \n  •  [@17:06] - Incremental compilation status (https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html#incremental-compilation-status) \n         \n          \n                \n       •  Incremental disabled in 1.59 (https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html#incremental-compilation-off-by-default) \n          \n              \n       \n     \n       \n  •  [@20:06] - Instant monotonicity guarantees (https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html#instant-monotonicity-guarantees) \n         \n          \n                \n       •  “And now we come upon a sad state of affairs” (https://github.com/rust-lang/rust/commit/9d8ef1160747a4d033f21803770641f2deb32b25#diff-c0599a43ca38e854116fe267604d2f9c5b565adad68a1e0e17fc59f99e439647L252-L290) \n          \n                \n       •  PR moving from Mutex to AtomicU64 (https://github.com/rust-lang/rust/pull/83093) \n          \n                \n       •  PR removing backsliding protection (https://github.com/rust-lang/rust/pull/89926) \n          \n              \n       \n     \n       \n  •  [@26:01] - Stabilized APIs (https://blog.rust-lang.org/2022/04/07/Rust-1.60.0.html#stabilized-apis) \n         \n          \n                \n       •  Arc::new_cyclic (https://doc.rust-lang.org/stable/std/sync/struct.Arc.html#method.new_cyclic) \n                  \n               \n                         \n            •  Source for Arc::new_cyclic (https://github.com/rust-lang/rust/blob/08871139915b95ec868aff807f224f78d00f4311/library/alloc/src/sync.rs#L408) \n               \n                       \n                \n          \n                \n       •  ＜[u8]＞::escape_ascii (https://doc.rust-lang.org/stable/std/primitive.slice.html#method.escape_ascii) \n          \n                \n       •  usize::abs_diff (https://doc.rust-lang.org/stable/std/primitive.usize.html#method.abs_diff) \n          \n              \n       \n     \n       \n  •  [@32:27] - Changelog deep-dive\n         \n          \n                \n       •  Stabilize #[cfg(panic = \"..\")] (https://github.com/rust-lang/rust/pull/93658) \n          \n                \n       •  Port cargo from toml-rs to toml_edit (https://github.com/rust-lang/cargo/pull/10086) \n                  \n               \n                         \n            •  toml_edit crate (https://docs.rs/toml_edit/) \n               \n                       \n                \n          \n                \n       •  Adding OpenWRT target (https://github.com/rust-lang/rust/pull/92300) \n                  \n               \n                         \n            •  OpenWRT (https://openwrt.org/) \n               \n                       \n                \n          \n              \n       \n     \n     \n\n[@36:59] - Rust 1.61 (https://blog.rust-lang.org/2022/05/19/Rust-1.61.0.html) \n\n\n\n     \n       \n  •  [@36:59] - Custom exit codes from main (https://blog.rust-lang.org/2022/05/19/Rust-1.6...",
        total_duration: "1 hr 15 mins",
        remaining_duration: "1 hr 15 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDy5aRQlSQ8vo",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/y5aRQlSQ8vo/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3nZ3BKfa3hUsgaTwq1mJHniU05p-g",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/y5aRQlSQ8vo/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3kUW-eufBEGPKxC8HNqCvsG1QZPYw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Fig with Grant Gurvis",
        description: "Allen Wyma talks with Grant Gurvis (https://ggurvis.com/) , Founding Engineer at Fig (https://fig.io/) . Fig adds IDE-style autocomplete to your existing terminal.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:32] - Grant’s bio and Fig (https://fig.io/)  introduction\n     \n       \n  •  [@4:25] - Fig’s support and integration expansion\n     \n       \n  •  [@6:05] - Differentiating Warp (https://www.warp.dev/)  and Fig\n     \n       \n  •  [@8:38] - Changes that need to happen in order to support Linux and Windows\n     \n       \n  •  [@10:36] - Fig’s switch to Rust\n     \n       \n  •  [@18:40] - Grant’s experience using different programming platforms\n     \n       \n  •  [@25:06] - Fig’s monetization plans\n     \n       \n  •  [@26:53] - Fig’s user reviews and feedback\n     \n       \n  •  [@29:55] - Opportunites for Rust engineers\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Fig’s GitHub (https://github.com/withfig) \n     \n       \n  •  Grant’s GitHub (https://github.com/grant0417) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "31 mins",
        remaining_duration: "31 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDDHThQe3Aogo",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/DHThQe3Aogo/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3nrK8Xvv9NmIYsYgDlDdGcxcKEgUg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/DHThQe3Aogo/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3l9IGheKwOHueComyPymsvq7otnjg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 445",
        description: "Highlights from This Week in Rust - Issue\n445 (https://this-week-in-rust.org/blog/2022/06/01/this-week-in-rust-445/) ,\npresented by Tim (https://twitter.com/timClicks)  and Allen (https://twitter.com/allenwyma) .\nThemes for the discussion include getting work as a Rust developer, creating a\nspecification for Rust, and the health of the community.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n\n[@00:00] Welcome\n\n\n\n     \n       \n  •  [@00:10] - Introduction\n     \n       \n  •  [@01:49] - Agenda\n     \n       \n  •  [@02:44] - Quote of the week (https://www.reddit.com/r/rust/comments/uxx7w8/this_week_in_rust_444/ia1cwn6) \n         \n           \n     \n     Rust is a perfect language for a dad like me, who every day puts kids to\n     sleep, and tired after long day of work and chores, can sit down and possibly \n     write some code for the hobby open source project, even when he’s already just\n     half awake. And it usually just works, tend to be robust and make the day\n     feel extra productive.\n     \n         \n       \n     \n       \n  •  [@04:14] - Crate of the week (https://github.com/DJDuque/pgfplots) \n         \n          \n                \n       •  Tectonic (https://tectonic-typesetting.github.io/) \n          \n                \n       •  d3.js (https://d3js.org/) \n          \n                \n       •  matplotlib (https://matplotlib.org/) \n          \n              \n       \n     \n     \n\n[@07:26] Official Notices\n\n\n\n     \n       \n  •  [@07:30] - Concluding the events of last November (https://blog.rust-lang.org/inside-rust/2022/05/26/Concluding-events-mods.html) \n     \n     \n\n[@14:20] Highlights\n\n\n\n     \n       \n  •  [@14:27] - [video] Rust makes you feel like a GENIUS (https://www.youtube.com/watch?v=0rJ94rbdteE)  by Tris Oaten (https://twitter.com/0atman) \n         \n          \n                \n       •  [video] Wat (https://www.destroyallsoftware.com/talks/wat)  lightning talk\n          \n                \n       •  [video] Rust: Your code can be perfect (https://www.youtube.com/watch?v=IA4q0lzmyfM) \n          \n              \n       \n     \n       \n  •  [@18:32] - Builder Lite (https://matklad.github.io/2022/05/29/builder-lite.html)  pattern by\n     matklad (https://github.com/matklad) \n     \n       \n  •  [@22:06] - The Rust Jobs Market (https://www.rustjobs.com/blog/the-rust-jobs-market.html)  by Alfie John\n     \n       \n  •  [@26:55] - Introducing the Ferrocene Language Specification (https://ferrous-systems.com/blog/ferrocene-language-specification/)  by Ferrous Systems\n         \n          \n                \n       •  Ferrous Systems and AdaCore to join forces on Ferrocene (https://ferrous-systems.com/blog/ferrous-systems-adacore-joining-forces/) \n          \n                \n       •  [audio] Rust Safety with Quentin Ochem and Florian\n          Gilcher (https://rustacean-station.org/episode/067-quentin-ochem-florian-gilcher/) \n          \n                \n       •  High Assurance Rust (https://highassurance.rs/) \n          \n              \n       \n     \n       \n  •  [@32:12] Simple rust interview questions (https://flakm.github.io/posts/rust_interview_questions/)  by Maciej\n     Flak (https://github.com/FlakM) \n     \n       \n  •  [@36:36] PR 97046: improve case conversion happy\n     path (https://github.com/rust-lang/rust/pull/97046)  by Conrad Ludgate (https://twitter.com/conradludgate) \n     \n     \n\nOther items\n\n\n\n     \n       \n  •  [@39:12] Call for Participation: mirrord (https://github.com/metalbear-co/mirrord/issues/53) \n     \n       \n  •  [@39:25] RFC: create a “types team” (https://github.com/rust-lang/rfcs/pull/3254) \n     \n       \n  •  [@40:37] PR: improve error message for E0081 (https://github.com/rust-lang/rust/pull/97456) \n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Aleksandar Nikolic\n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo) \n\n\n\n\nShow Notes: Tim McNamara (https://twitter.com/timClicks) \n\n\n\n\nHosts: Tim McNamara (https://twitter.com/timClicks)  and Allen Wyma (https://twitter.com/allenwyma) .",
        total_duration: "42 mins",
        remaining_duration: "42 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDb3Gv6Z8zn7E",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/b3Gv6Z8zn7E/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3lZVlyiw596YB-bYRemQwCq_qgCRA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/b3Gv6Z8zn7E/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nP7x9fafmqm9P0Dixhos8DTCdlXg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rust Foundation with Rebecca Rumbul",
        description: "Allen Wyma talks with Rebecca Rumbul (https://twitter.com/rebeccarumbul) , Executive Director and CEO at Rust Foundation (https://foundation.rust-lang.org/) . The Rust Foundation is an independent non-profit organization to steward the Rust programming language and ecosystem, with a unique focus on supporting the set of maintainers that govern and develop the project.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@1:00] - Rebecca’s Bio (https://twitter.com/rebeccarumbul) \n     \n       \n  •  [@2:36] - The Rust Foundation (https://foundation.rust-lang.org/) \n     \n       \n  •  [@7:27] - How the Rust Foundation deals with legal work\n     \n       \n  •  [@9:26] - How the Rust Foundation helps all contributors\n     \n       \n  •  [@12:47] - Scoring matrix to measure the value\n     \n       \n  •  [@15:20] - DevX Initiative (https://devxinitiative.org/)  & Ernest Kissiedu (https://github.com/ernestkissiedu) \n     \n       \n  •  [@17:14] - Competing in funding projects\n     \n       \n  •  [@20:29] - Applying for a membership (https://foundation.rust-lang.org/members/)  in The Rust Foundation\n     \n       \n  •  [@23:25] - Company membership benefits\n     \n       \n  •  [@28:34] - The Rust Foundation can potentially connect people and projects\n     \n       \n  •  [@31:08] - Board member Nell Shamrell-Harrington (https://twitter.com/nellshamrell)  & The Rust Foundation sponsoring\n     \n       \n  •  [@35:00] - Rebecca on making tough decisions\n     \n       \n  •  [@36:46] - Nell’s weekly newsletter\n     \n       \n  •  [@40:20] - What makes a company pay for a Platinum membership?\n     \n       \n  •  [@44:21] - Rebecca’s background (https://www.linkedin.com/in/rebecca-rumbul-96a5441a/) \n     \n       \n  •  [@49:28] - Anything difficult in running The Rust Foundation?\n     \n       \n  •  [@51:16] - Future plans for Rust Foundation\n     \n       \n  •  [@54:12] - Contacting The Rust Foundation (https://foundation.rust-lang.org/info/contact/) \n     \n       \n  •  [@54:48] - Parting words\n     \n     \n\nOther Resources\n\n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "56 mins",
        remaining_duration: "56 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDFVBroqO0z_8",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/FVBroqO0z_8/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3lw7qx_G0HzNGoswrvqfJ3bAD4jEw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/FVBroqO0z_8/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3l6eL-9WR69mJ5ZnvmNdl-RJ1QYaQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 444",
        description: "Highlights from This Week in Rust - Issue\n444 (https://this-week-in-rust.org/blog/2022/05/25/this-week-in-rust-444/) . This\nweek features a juicy post-mortem, open source, open hardware, and lots of news\nfrom around the Rust ecosystem.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n\n[@00:00] Welcome\n\n\n\n     \n       \n  •  [@00:10] - Introduction\n     \n       \n  •  [@00:50] - Agenda\n     \n       \n  •  [@01:23] - Quote of the week (https://lobste.rs/s/wiavtb/rust_critical_retrospective#c_jkfhpb) \n         \n           \n     \n     This is the difference in approaches of the two languages. In C++ if the\n     code is vulnerable, the blame is on the programmer. In Rust if the code is\n     vulnerable, Rust considers it a failure of the language, and takes\n     responsibility to stop even “bad” programmers from writing vulnerable code.\n     I can’t stress enough how awesome it is that I can be a careless fool, and\n     still write perfectly robust highly multi-threaded code that never crashes.\n     \n         \n         \n          \n                \n       •  [@03:09] Allen: Rust is both good and bad at marketing\n          \n              \n       \n     \n       \n  •  [@03:30] - Crate of the week (https://docs.rs/rustdoc-types) \n         \n          \n                \n       •  [@04:15] - Tim and Sean discuss parsing in episode\n          2022-05-26 (https://rustacean-station.org/episode/071-twir-442/)  at 47:10\n          \n              \n       \n     \n     \n\n[@05:10] Official Notices\n\n\n\n     \n       \n  •  [@05:22] - Announcing Rust 1.61.0 (https://blog.rust-lang.org/2022/05/19/Rust-1.61.0.html) \n         \n          \n                \n       •  Custom exit codes from main\n                  \n               \n                         \n            •  [Note from Tim: I say “termination crate”, but should have said “Termination trait”.]\n               \n                       \n                \n          \n                \n       •  More capabilities for const fn\n                  \n               \n                         \n            •  “Basic” handling of fn pointers\n               \n                         \n            •  Add trait bounds to a const fn\n               \n                         \n            •  dyn trait and impl Trait support\n               \n                       \n                \n          \n                \n       •  Stdio handles can be locked directly\n          \n                \n       •  Several stabilized APIs\n          \n              \n       \n     \n     \n\n[@08:07] Highlights\n\n\n\n     \n       \n  •  [@08:27] - Developer survey: JavaScript and Python reign, but Rust is rising (https://www.infoworld.com/article/3661248/developer-survey-javascript-and-python-reign-but-rust-is-rising.html) \n         \n          \n                \n       •  [@09:09] - Sean: “Rust adoption has nearly quadrupled in the last two years, going from\n           600k developers in Q1 2022 to 2.2m in Q1 2022.”\n          \n              \n       \n     \n       \n  •  [@13:00] - Redust (https://github.com/appellation/redust)  by Will Nelson (https://wnelson.dev/) \n         \n          \n                \n       •  [@13:50] Allen: I think the comments are actually more interesting. They\n          are starting to point to something really—I don’t know whether it’s\n          good or bad for the community—where, you know, people start rolling\n          their own crates instead of, say, doing stuff upstream. It kind of goes back\n          to what Tim was complaining about before (https://rustacean-station.org/episode/069-twir-441/)  [Easy Mode for\n          Rust, discussed on This Week in Rust - Issue 441]—well, lightly\n          pointing out to people out there—that okay, now which crate should I\n          use?\n          \n                \n       •  [@16:20] Tim: Open source is really complicated. You need to talk to\n          people. That’s … challenging. [Laughs]\n          \n                \n       •  [@16:40] Josh Triplett on Building with\n          Rust (https://anchor.fm/building-with-rust/episodes/Josh-Triplett-on-Building-the-Build-System-of-his-Dreams-e1dt81c) ,\n           discussing the orphan rule\n          \n                \n       •  [@16:50] Sean: Rust is not very good at sharing between crates.\n          \n              \n       \n     \n       \n  •  [@19:07] - Rust: A Critical\n     Retrospective (https://www.bunniestudios.com/blog/?p=6375)  by bunnie (https://en.wikipedia.org/wiki/Andrew_Huang_(hacker)) \n         \n   ...",
        total_duration: "58 mins",
        remaining_duration: "58 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDkVW-NJAcZLY",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/kVW-NJAcZLY/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3mtR1oLYQMRz3P-rkPHG8sgHlmvng",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/kVW-NJAcZLY/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3kSlTT3Z-Ssvj5f_bMyhdaiTvtaLQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "egui with Emil Ernerfeldt",
        description: "Allen Wyma talks with Emil Ernerfeldt (https://twitter.com/ernerfeldt) , creator of egui (https://www.egui.rs/) . egui is a simple, fast, and highly portable immediate mode GUI library for Rust. egui runs on the web, natively, and in your favorite game engine (or will soon).\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:41] - History of Emil’s last name “Ernerfeldt”\n     \n       \n  •  [@1:25] - Getting Emil on this podcast\n     \n       \n  •  [@4:06] - Emil’s Bio and egui (https://www.egui.rs/) \n     \n       \n  •  [@11:52] - Building egui\n     \n       \n  •  [@16:47] - Immediate mode\n     \n       \n  •  [@26:27] - Knowing when to use egui\n     \n       \n  •  [@31:35] - Parent-child contraints\n     \n       \n  •  [@34:21] - Immediate mode is dynamic\n     \n       \n  •  [@36:22] - Refresh rate and Continuous mode\n     \n       \n  •  [@39:11] - Themes in egui\n     \n       \n  •  [@39:59] - egui more for development or client side app?\n     \n       \n  •  [@45:17] - Opinions on hiring people and Emil’s company (https://www.rerun.io/) \n     \n       \n  •  [@49:09] - Opinions on products built by you vs built by others\n     \n       \n  •  [@53:48] - Other GUIs\n     \n       \n  •  [@56:54] - Future plans on egui\n     \n       \n  •  [@58:45] - Anything else you want to mention?\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  egui’s Github (https://github.com/emilk/egui) \n     \n       \n  •  Emil’s Github (https://github.com/emilk) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 1 min",
        remaining_duration: "1 hr 1 min",
        date: "7 Feb",
        video_id: VideoID(
            "MPED6YzGGta_J1I",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/6YzGGta_J1I/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3mQyGfJldZscQv1MST6fmEAFMVqjg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/6YzGGta_J1I/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3lySbTCqRmIQyb1sqxSHD3xJFUthA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 443",
        description: "Highlights from This Week in Rust - Issue 443 (https://this-week-in-rust.org/blog/2022/05/18/this-week-in-rust-443/) . This week features a new section within the newsletter as well as the hosts Sean, Allen and Tim chatting about compilers, front-end development, extending databases with Rust and more.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n\n[@00:00] Welcome\n\n\n\n     \n       \n  •  [@00:10] - Introduction\n     \n       \n  •  [@00:50] - Agenda\n     \n       \n  •  [@01:20] - Quote of the week (https://lobste.rs/s/vtcocq/c_is_truly_all_we_need_everything_else_is#c_yrcjm1) \n     \n       \n  •  [@02:50] - Crate of the week (https://crates.io/crates/cargo-supply-chain) \n     \n     \n\n[@03:30] Highlights\n\n\n\n     \n       \n  •  [@03:45] - Things are Getting Rusty in Kernel Land (https://hackaday.com/2022/05/17/things-are-getting-rusty-in-kernel-land/) \n         \n          \n                \n       •  Rust for Linux (https://github.com/Rust-for-Linux)  GitHub org\n          \n                \n       •  Version 6 of the Rust patchset (https://lore.kernel.org/lkml/20220507052451.12890-1-ojeda@kernel.org/) \n          \n                \n       •  Supporting Linux kernel development in Rust (https://lwn.net/Articles/829858/)  LWN article discussing the Linux Plumbers 2020 session that kicked off the effort\n          \n                \n       •  Prossimo funding the effort (https://www.memorysafety.org/initiative/linux-kernel/) , sponsored by Google\n          \n              \n       \n     \n       \n  •  [@09:45] - The Rust Borrow Checker - A Deep Dive (https://www.infoq.com/presentations/rust-borrow-checker/) \n         \n          \n                \n       •  MIR (https://rustc-dev-guide.rust-lang.org/mir/index.html)  (Mid-level representation) introduction\n          \n                \n       •  From MIR to binaries (https://rustc-dev-guide.rust-lang.org/part-5-intro.html)  discusses how binaries are generated\n          \n                \n       •  MIR borrow check (https://rustc-dev-guide.rust-lang.org/borrow_check.html)  section of the rustc dev guide (https://rustc-dev-guide.rust-lang.org/) \n          \n                \n       •  rustc_borrowck (https://doc.rust-lang.org/nightly/nightly-rustc/rustc_borrowck/index.html)  crate within the compiler\n          \n              \n       \n     \n       \n  •  [@14:40] - PixelBox Public Alpha (https://www.josephcatrambone.com/?p=1382) \n         \n          \n                \n       •  PixelBox source code (https://github.com/JosephCatrambone/pixelbox) \n          \n                \n       •  egui (https://github.com/emilk/egui)  GUI framework for Rust\n          \n                \n       •  PyTorch (https://pytorch.org/) , a popular Python wrapper for the Torch machine learning framework (http://torch.ch/) \n          \n                \n       •  ONNX (https://onnx.ai/)  machine learning format\n          \n              \n       \n     \n       \n  •  [@18:00] - Rust Ergonomics: Default and From (https://elijahcaine.me/rust-default-from/) \n         \n          \n                \n       •  std::default::Default trait (https://doc.rust-lang.org/std/default/trait.Default.html)  documentation\n          \n                \n       •  std::convert::From trait (https://doc.rust-lang.org/std/convert/trait.From.html)  documentation\n          \n                \n       •  std::convert::Into trait (https://doc.rust-lang.org/std/convert/trait.Into.html)  documentation\n          \n                \n       •  Code Like a Pro in Rust (https://www.manning.com/books/code-like-a-pro-in-rust)  book by Brendan Matthews, published by Manning\n          \n              \n       \n     \n       \n  •  [@23:30] - Our Experience Porting the YJIT Ruby Compiler to Rust (https://shopify.engineering/porting-yjit-ruby-compiler-to-rust) \n         \n          \n                \n       •  YJIT: Building a New JIT Compiler for CRuby (https://shopify.engineering/yjit-just-in-time-compiler-cruby) \n          \n                \n       •  [talk] MoreVMs’21: “YJIT: Building a New JIT Compiler Inside CRuby” (https://www.youtube.com/watch?v=vucLAqv7qpc) \n          – Maxime Chevalier-Boisvert (https://twitter.com/Love2Code) \n          \n              \n       \n     \n       \n  •  [@30:30] - Asteracea (https://blog.schichler.dev/posts/Asteracea/) \n         \n          \n                \n       •  JSX introduction (https://reactjs.org/docs/introducing-jsx.html) , from the ReactJS (https://reactjs.org/)  project\n          \n               ...",
        total_duration: "1 hr 1 min",
        remaining_duration: "1 hr 1 min",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDH1YCeYD4MpA",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/H1YCeYD4MpA/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3mpwjtQxOmAGLCA9Dc7cm3rBVUteQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/H1YCeYD4MpA/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3leDiY5Pe2XUotmuwsRswqehAc6bA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Buttplug with Kyle Machulis",
        description: "Allen Wyma talks with Kyle Machulis (https://twitter.com/qDot) , lead developer on Buttplug (https://buttplug.io/) . Buttplug is an open-source standards and software project for controlling intimate hardware such as sex toys.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:58] - Kyle’s Introduction\n     \n       \n  •  [@3:17] - What got Kyle into sex tech and why start Buttplug\n     \n       \n  •  [@9:08] - How does Buttplug operate and what functions does it provide?\n     \n       \n  •  [@11:45] - How did Rust come into their project?\n     \n       \n  •  [@19:48] - How was their experience with the Rust community?\n     \n       \n  •  [@28:05] - What protocols does Buttplug use and develop?\n     \n       \n  •  [@33:33] - Buttplug’s capabilities, limitations, and safety protocols\n     \n       \n  •  [@44:23] - Why the name “Buttplug”?\n     \n       \n  •  [@51:53] - Buttplug’s push for not just entertainment but also health and wellness purposes\n     \n       \n  •  [@56:07] - How people can help contribute to pushing Buttplug’s project\n     \n       \n  •  [@59:45] - Kyle’s parting thoughts\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Buttplug’s Twitter (https://twitter.com/buttplugio) \n     \n       \n  •  Buttplug’s Github (https://github.com/buttplugio) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 1 min",
        remaining_duration: "1 hr 1 min",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDEQxchDx4W_I",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/EQxchDx4W_I/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3kIt-qKe2KnWJqJM4SmXAVeY7ZTvg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/EQxchDx4W_I/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3nCTIgCWePHBPwRdqFZvhhIOgxBMg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 442",
        description: "Tim McNamara (https://twitter.com/timClicks) , Sean Chen (https://twitter.com/seanchen1991)  and Allen Wyma (https://twitter.com/allenwyma)  discuss their\nhighlights from This Week in Rust\n442 (https://this-week-in-rust.org/blog/2022/05/11/this-week-in-rust-442/) .\nThemes include security, testing, embedded development and async Rust. Watch out\nfor the cameo by the Ada programming language towards the end!\n\n\nTimestamps\n\n\nWelcome\n\n\n\n     \n       \n  •  [@00:12] Introductions and agenda\n     \n       \n  •  [@01:20] Quote of the week\n     \n     \n\n[@02:57] Official updates\n\n\n\n     \n       \n  •  [@03:01] Security advisory: the rustdecimal crate\n     \n       \n  •  [@06:55] CTCFC Agenda\n         \n          \n                \n       •  A whirlwind tour of Embedded\n            Rust (https://www.youtube.com/watch?v=MfG7OvfVYQY&t=105s)  by James Munns\n          \n                \n       •  Async Rust for Embedded\n          Systems (https://www.youtube.com/watch?v=MfG7OvfVYQY&t=1260s)  by Dario\n          Nieuwenhuis\n          \n                \n       •  Rust in Automotive (https://www.youtube.com/watch?v=MfG7OvfVYQY&t=2760s)  by Christof\n          Petig and Florian Gilcher\n          \n              \n       \n     \n     \n\n[@09:50] Highlights from the newsletter\n\n\n\n     \n       \n  •  [@10:15] Kani Rust Verifier\n     Project (https://model-checking.github.io/kani-verifier-blog/2022/05/04/announcing-the-kani-rust-verifier-project.html)  announcement\n     \n       \n  •  [@20:29] Rocket web framework v0.5 2nd release candidate (https://rocket.rs/v0.5-rc/news/2022-05-09-version-0.5-rc.2/) \n     \n       \n  •  [@23:35] Xilem (https://raphlinus.github.io/rust/gui/2022/05/07/ui-architecture.html) , a\n     UI architecture for Rust\n     \n       \n  •  [@29:30] Over-Engineering A Fairly Simple Coding\n     Challenge (https://ada-x64.github.io/over-engineering/) \n     \n       \n  •  [@35:26] RepliByte’s release\n     announcement (https://www.reddit.com/r/rust/comments/ukmnow/an_opensource_tool_to_seed_your_dev_database_with/) \n     \n       \n  •  [@39:07] Securing\n     Crates (https://tl8.co/entry/securing-crates) , discussing side channel attacks\n     \n       \n  •  [@44:09] Modeling Interconnected Social and Technical Risks in Open Source\n     Software Ecosystems (https://arxiv.org/abs/2205.04268) , a related paper\n     \n       \n  •  [@47:10] Parsing/Recursive Descent Parser (https://www.huy.rocks/everyday/05-08-2022-parsing-recursive-descent-parser) \n     \n       \n  •  [@54:10] Rust Safety with Quentin Ochem and Florian Gilcher (https://rustacean-station.org/episode/067-quentin-ochem-florian-gilcher/) \n     \n     \n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to\nsuggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Aleksandar Nikolic (https://linkedin.com/in/dbsound) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo) \n\n\n\n\nShow Notes: Tim McNamara (https://twitter.com/timClicks) \n\n\n\n\nHosts: Tim McNamara (https://twitter.com/timClicks) , Allen Wyma (https://twitter.com/allenwyma) , and Sean Chen (https://twitter.com/seanchen1991)",
        total_duration: "58 mins",
        remaining_duration: "58 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDK14kosNyQmU",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/K14kosNyQmU/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3ne8wuyEhqHc5SSSi4K4Fqdf-NPag",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/K14kosNyQmU/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3mGtvly4k1kPvu9EhDOVDKlcfPeRQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Actix Web with Rob Ede",
        description: "Allen Wyma talks with Rob Ede (https://twitter.com/robjtede) , lead developer on Actix Web (https://actix.rs/) . Actix Web is a powerful, pragmatic, and extremely fast web framework for Rust\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:27] - Rob’s programming background\n     \n       \n  •  [@3:28] - Rob’s experience with Actix Web\n     \n       \n  •  [@8:46] - What got Rob into Rust\n     \n       \n  •  [@14:01] - How Rust came into their project\n     \n       \n  •  [@22:21] - How Rob got involved in the Actix web framework\n     \n       \n  •  [@24:28] - Actix Web versions\n     \n       \n  •  [@30:24] - Why Actix Web does not use Hyper (https://hyper.rs/) \n     \n       \n  •  [@38:14] - Actix Web’s upcoming updates and roadmap\n     \n       \n  •  [@38:56] - Rob’s parting thoughts\n     \n     \n\nOther Resources\n\n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "42 mins",
        remaining_duration: "42 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED9tehvRyKR1U",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/9tehvRyKR1U/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kncunrwAY7zMc1BMinvBBpRvWxiw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/9tehvRyKR1U/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nXgLeOe4a7z1-C5uPWudkKdaVETg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 441",
        description: "Tim McNamara (https://twitter.com/timClicks)  and Allen Wyma (https://twitter.com/allenwyma)  discuss their highlights from This\nWeek in Rust 441 (https://this-week-in-rust.org/blog/2022/05/04/this-week-in-rust-441/) .\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to\nsuggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Jan Lund\n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo) \n\n\n\n\nShow Notes: Tim McNamara (https://twitter.com/timClicks) \n\n\n\n\nHosts: Tim McNamara (https://twitter.com/timClicks)  and Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "35 mins",
        remaining_duration: "35 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED0DU5uGDNUQs",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/0DU5uGDNUQs/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3l8aM_tIoxcZTfCcsBYOliK5ULvgQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/0DU5uGDNUQs/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3n_6gflaRIIIpYTopXJIvyHp8ywdg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Slint with Tobias Hunger",
        description: "Allen Wyma talks with Tobias Hunger (https://twitter.com/t_hunger) , developer on Slint (https://slint-ui.com/) . Slint is a toolkit to efficiently develop fluid graphical user interfaces for any display.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:30] - Tobias’ introduction\n     \n       \n  •  [@2:21] - What does Slint offer compared to other GUI frameworks?\n     \n       \n  •  [@6:52] - Slint’s UI language\n     \n       \n  •  [@9:02] - From SixtyFPS to Slint, what’s the idea behind the name change (https://slint-ui.com/blog/sixtyfps-becomes-slint.html) ?\n     \n       \n  •  [@14:57] - Different industries that Slint is serving\n     \n       \n  •  [@18:45] - Three different options for licensing Slint\n     \n       \n  •  [@21:39] - Slint’s progress and efforts in supporting more customization\n     \n       \n  •  [@32:07] - Slint’s upcoming projects and roadmap\n     \n       \n  •  [@35:19] - Tobias parting thoughts\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "40 mins",
        remaining_duration: "40 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDVNfeXpCo17w",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/VNfeXpCo17w/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3m9TncJCdGwlQuFL9B8qacHxIS-2A",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/VNfeXpCo17w/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3neeqWad-FgD8htOGemA6wLgUcdjg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rust Safety with Quentin Ochem and Florian Gilcher",
        description: "Allen Wyma talks with Quentin Ochem (https://www.linkedin.com/in/quentin-ochem-5653864/) , Lead of Product Management and Business Development at AdaCore (https://www.adacore.com/)  and Florian Gilcher (https://twitter.com/argorak) , Managing Director at Ferrous Systems (https://ferrous-systems.com/) . Rust use in safety-critical industries is becoming more and more desired from users. Allen, Quentin, and Florian discuss the recent partnership between AdaCore and Ferrous Systems.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@1:46] - What is Ferrocene (https://ferrous-systems.com/ferrocene/) ?\n     \n       \n  •  [@6:08] - Why does Ferrocene need to exist?\n     \n       \n  •  [@10:18] - How can Ferrocene help industries that require high-quality security?\n     \n       \n  •  [@16:14] - Why AdaCore decided to support Rust.\n     \n       \n  •  [@21:25] - Does Ada use a VM?\n     \n       \n  •  [@24:06] - What brought Quentin & Florian together to work on Rust?\n     \n       \n  •  [@30:52] - What are the changes that came along with AdaCore and Ferrous Systems’ partnership (https://www.adacore.com/press/adacore-joins-forces-ferrous-systems-support-rust) ?\n     \n       \n  •  [@40:46] - How in demand is AdaCore and Ferrous System with their customers in different industries?\n     \n       \n  •  [@47:01] - AdaCore and Ferrous System’s quality management\n     \n       \n  •  [@49:35] - Quentin & Florian’s parting thoughts.\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "50 mins",
        remaining_duration: "50 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDz4vg7K0_3PU",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/z4vg7K0_3PU/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3mOmRuioS4oIZO5NVltsQfs_gtkmA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/z4vg7K0_3PU/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3ngjXDg8Xdq49DDPTRmLCfmjGc3rQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Game Development with Rust and WebAssembly with Eric Smith",
        description: "Allen Wyma talks with Eric Smith (https://twitter.com/paytonrules) , author of Game Development with Rust and WebAssembly (https://www.packtpub.com/product/game-development-with-rust-and-webassembly/9781801070973) . Game Development with Rust and WebAssembly teaches you how to make games for the web, using Rust and WebAssembly.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:59] - Eric’s introduction\n     \n       \n  •  [@3:26] - Eric’s experience using Rust vs other programming languages\n     \n       \n  •  [@9:20] - What makes Rust appealing?\n     \n       \n  •  [@11:32] - Why Rust is becoming a good language for game development.\n     \n       \n  •  [@13:47] - Comparison of different game engines\n     \n       \n  •  [@19:48] - Insights on Rust game development\n     \n       \n  •  [@26:06] - Eric talks about his book — Game Development with Rust and WebAssembly\n     \n       \n  •  [@29:17] - WebAssembly versus other platforms\n     \n       \n  •  [@41:29] - Eric’s writing process\n     \n       \n  •  [@43:24] - Is Rust web ready?\n     \n       \n  •  [@50:19] - Parting thoughts and where to check out Eric’s book\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Eric’s Github (https://github.com/paytonrules) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "52 mins",
        remaining_duration: "52 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDfXKj3b6Y1aE",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/fXKj3b6Y1aE/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3nONgL4IRAL_O47cS5obJYU1p4xbw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/fXKj3b6Y1aE/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3k3GfGfAdJpv9JvxejzPP2yF_Yh6w",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "clap with Ed Page",
        description: "Allen Wyma talks with Ed Page (https://github.com/epage) , maintainer of clap (https://github.com/clap-rs/clap) . Command Line Argument Parser (clap) is a library to help create CLI apps using Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:41] - Ed’s introduction of clap\n     \n       \n  •  [@3:09] - What makes clap better than other parsing solutions?\n     \n       \n  •  [@7:30] - Ed’s programming background\n     \n       \n  •  [@10:10] - Ed’s comparison of Rust vs other programming languages\n     \n       \n  •  [@14:06] - Ed and his team’s participation in the Rust community\n     \n       \n  •  [@22:07] - Futurewei’s Rust development efforts\n     \n       \n  •  [@26:51] - How did Ed start in Rust and what took him to clap\n     \n       \n  •  [@32:05] - How does clap handle customization.\n     \n       \n  •  [@34:28] - clap’s 3.0 & 3.1 release\n     \n       \n  •  [@42:03] - What are the future plans for clap\n     \n       \n  •  [@47:40] - argparse (https://docs.python.org/3/library/argparse.html)  vs Click (https://click.palletsprojects.com/en/8.1.x/) \n     \n       \n  •  [@51:34] - Ongoing plans for clap’s improvement\n     \n       \n  •  [@53:45] - Ed’s efforts on keeping CLI alive\n     \n       \n  •  [@56:09] - What is cargo-script (https://github.com/DanielKeep/cargo-script) ?\n     \n       \n  •  [@1:03:12] - Ed’s view about the state of education in Rust\n     \n       \n  •  [@1:08:06] - Ed’s tips and tricks for beginners.\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 10 mins",
        remaining_duration: "1 hr 10 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDt9UHkWqIWb4",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/t9UHkWqIWb4/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3l6uJ4YChdDcck0V5JsriCCMgz2AA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/t9UHkWqIWb4/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3kbTOAJihDsihFF1-bmo_WFYuekiw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Armin Ronacher on experimental deserialization with Deser",
        description: "Allen Wyma talks with Armin Ronacher (http://armin.ronacher.eu/) , creator of Deser (https://github.com/mitsuhiko/deser) . Deser is an experimental serialization system for Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:50] - Armin’s background\n     \n       \n  •  [@2:49] - The difference between Jinja (https://jinja.palletsprojects.com/)  & Jinja2\n     \n       \n  •  [@3:47] - What is Twig (https://twig.symfony.com/) ?\n     \n       \n  •  [@4:14] - Where did the names Jinja & Twig come from?\n     \n       \n  •  [@7:36] - What makes Jinja2 good in portablility?\n     \n       \n  •  [@12:46] - Armin’s programming history\n     \n       \n  •  [@16:07] - How did Armin go from Delphi to Python?\n     \n       \n  •  [@19:18] - The Pocoo team\n     \n       \n  •  [@23:25] - When did Armin start using Rust?\n     \n       \n  •  [@27:26] - The pros & cons of mixing Python and Rust together\n     \n       \n  •  [@36:14] - Stacktrace errors\n     \n       \n  •  [@41:41] - How does Armin deal with developers having different compilers in a working environment.\n     \n       \n  •  [@45:57] - Armin talks about Serde and other serialization challenges\n     \n       \n  •  [@55:33] - Serialization Frameworks\n     \n       \n  •  [@1:04:23] - Where to check out Armin’s library: https://github.com/mitsuhiko/deser\n     \n       \n  •  [@1:07:34] - Armin’s tips and tricks for people starting in Rust\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Armin’s Github (https://github.com/mitsuhiko) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 9 mins",
        remaining_duration: "1 hr 9 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED2qBUaiui-jw",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/2qBUaiui-jw/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3nF4fzTVJLwNkulKggo2SFaGZDjyg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/2qBUaiui-jw/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3lbCHt3kTUaN89-f1gcmp69-5PYkw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Purdy with Marty Jones",
        description: "Allen Wyma talks with Marty Jones (https://twitter.com/murtyjones) , creator of Purdy (https://github.com/murtyjones/purdy) . Purdy is an experimental PDF renderer built on top of WebGPU.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:55] - Marty’s Background\n     \n       \n  •  [@4:06] - What sparked Marty’s interest in PDFs\n     \n       \n  •  [@6:21] - What kind of primitives are built into PDF?\n     \n       \n  •  [@8:56] - How to solve edge cases in PDFs?\n     \n       \n  •  [@11:54] - Property-based testing\n     \n       \n  •  [@16:54] - The deciding factor that got Marty into creating his library.\n     \n       \n  •  [@19:59] - What is Web GPU\n     \n       \n  •  [@22:13] - Marty’s goal with PDF JS\n     \n       \n  •  [@24:08] - Why use PDF JS?\n     \n       \n  •  [@29:02] - Why Marty used Rust instead of JavaScript\n     \n       \n  •  [@30:15] - What’s next with PDF JS?\n     \n       \n  •  [@36:51] - Legalities of PDFs\n     \n       \n  •  [@41:42] - How to reach Marty\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Marty’s Github (https://github.com/murtyjones) \n     \n       \n  •  What is unique about PDF rendering? (https://www.youtube.com/watch?v=TiqDqd-1pwU) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "47 mins",
        remaining_duration: "47 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDTWMFoCreeAM",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/TWMFoCreeAM/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3nZM9g5DvDiSrWgbFp_1fxsLqdt9A",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/TWMFoCreeAM/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3lbtJJbY7D7jCxh8WSIeXWtiE6LLw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rusty Engine",
        description: "Allen Wyma talks with Nathan Stocks (https://twitter.com/nathanstocks) , creator of Rusty Engine (https://github.com/CleanCut/rusty_engine) . Rusty Engine is a simple 2D game engine for those who are learning Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:46] - Nathan’s background and programming history\n     \n       \n  •  [@11:08] - Nathan talks about his Python course and other programming languages\n     \n       \n  •  [@18:13] - What led Nathan to create his Rust course\n     \n       \n  •  [@25:12] - Bevy & other game engines\n     \n       \n  •  [@36:50] - Nathan’s views and opinions with Unreal Engine\n     \n       \n  •  [@40:59] - Malware and other safety issues with Rust\n     \n       \n  •  [@43:20] - Why Nathan prefers Rust over other languages\n     \n       \n  •  [@47:15] - Nathan’s experience working with Go\n     \n       \n  •  [@53:37] - Nathan’s announcement with his ongoing course\n     \n       \n  •  [@54:41] - Nathan’s tips and tricks for beginners who want to learn Rust\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Nathan’s Github (https://github.com/CleanCut) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "58 mins",
        remaining_duration: "58 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDBlEl163yT2k",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/BlEl163yT2k/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3mO-PqQ29J9LpbyOxuvVdfTzFD1Ag",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/BlEl163yT2k/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nrqoOnblzSs9VND18B5NcMHJourw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rust Servers, Services, and Apps with Prabhu Eshwarla",
        description: "Allen Wyma talks with Prabhu Eshwarla (https://twitter.com/peshwarla) , author of Rust Servers, Services, and Apps (https://www.manning.com/books/rust-servers-services-and-apps) . Rust Servers, Services, and Apps teaches you how to build web servers, RESTful services, server-rendered apps, and client front-ends in Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:49] - Prabhu’s Introduction\n     \n       \n  •  [@1:28] - Elixir vs Rust\n     \n       \n  •  [@4:20] - Prabhu’s Phoenix experience\n     \n       \n  •  [@8:09] - What is required to do web development?\n     \n       \n  •  [@25:09] - Java vs Rust\n     \n       \n  •  [@29:07] - Asynchronous programming vs multithreading\n     \n       \n  •  [@34:13] - Why Rust is a good choice for blockchain\n     \n       \n  •  [@42:12] - What is Blockchain?\n     \n       \n  •  [@53:34] - Next generation of blockchain - Assests, NFTs, Data Storage\n     \n       \n  •  [@1:02:50] - Why Prabhu thinks Rust is the right language for web development\n     \n       \n  •  [@1:04:42] - Prabhu’s tips for people who are beginners in Rust\n     \n       \n  •  [@1:09:42] - Prabhu’s book and parting thoughts.\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Zeeshan’s Github (https://github.com/zeenix) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 12 mins",
        remaining_duration: "1 hr 12 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDA7kUTf0C9PY",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/A7kUTf0C9PY/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kLqLsJknbETqPBuZR6sbJ0wIwtFA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/A7kUTf0C9PY/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nB23Meyjg9JtCcFNrCJD0_9Gg9tA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "id3 with Roel",
        description: "Allen Wyma talks with Roel (https://polyfloyd.net/) , creator of id3 (https://docs.rs/id3/latest/id3/) . id3 is a Rust library used for reading id3 (https://id3.org/) .\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@0:44] - Roel’s Bio\n     \n       \n  •  [@1:59] - What is ID3?\n     \n       \n  •  [@4:41] - What does ID3 tech consists of and what is its structure?\n     \n       \n  •  [@09:08] - What got Roel interested in ID3?\n     \n       \n  •  [@10:49] - What are some notable projects that use ID3?\n     \n       \n  •  [@19:57] - ID3 Future Roadmap\n     \n       \n  •  [@24:37] - The Rust Community in the Netherlands\n     \n       \n  •  [@25:30] - Go vs Rust\n     \n       \n  •  [@29:23] - Roel’s programs and upcoming events\n     \n       \n  •  [@31:37] - Hackerspace and Roel’s parting thoughts\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Roel’s Github (https://github.com/polyfloyd) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "33 mins",
        remaining_duration: "33 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDGBW_e_-IpCw",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/GBW_e_-IpCw/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3l6NdZWdc8Edz5Go4JUNVvls8aPAw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/GBW_e_-IpCw/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3mu5jQ_zfl6MnFC85UDsr9zD246MA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "PancakeDB with Martin Loncaric",
        description: "Allen Wyma talks with Martin Loncaric (https://twitter.com/m_wlon) , creator of PancakeDB (https://pancakedb.com/) . PancakeDB is a database that focuses on low latency ingestion of data.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@0:35] - Martin’s Bio\n     \n       \n  •  [@1:30] - What is PancakeDB?\n     \n       \n  •  [@5:48] - How does Pancake compare to CSV & Parquet?\n     \n       \n  •  [@7:09] - Where did the idea of working on PancakeDB come from?\n     \n       \n  •  [@9:25] - PancakeDB license & monetization\n     \n       \n  •  [@14:00] - What makes PancakeDB so highly performant\n     \n       \n  •  [@18:21] - How Martin got into Big Data\n     \n       \n  •  [@21:22] - How PancakeDB addresses the data ingestion problem\n     \n       \n  •  [@26:28] - Where did the name Pancake DB come from?\n     \n       \n  •  [@27:42] - Recommended ways to implement data ingestion\n     \n       \n  •  [@30:37] - Rust vs other languages when it comes to data processing\n     \n       \n  •  [@34:05] - What brought Martin to Rust\n     \n       \n  •  [@37:23] - How can Rust improve & Martin’s parting thoughts\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Martin’s Github (https://github.com/mwlon) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "39 mins",
        remaining_duration: "39 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDUGbWc_SkhnQ",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/UGbWc_SkhnQ/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3mgmnyEv5anLfuE74jj-KqMGGQ6eA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/UGbWc_SkhnQ/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3kamB-PQAzKzq-dqR2Q4JAD-fcrWQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's New in Rust 1.58 and 1.59",
        description: "Jon and Ben discuss the highlights of the 1.58 and 1.59 releases of Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n[@01:10] - Rust 1.58 (https://blog.rust-lang.org/2022/01/13/Rust-1.58.0.html) \n\n\n     \n       \n  •  [@01:18] - Captured identifiers in format strings (https://blog.rust-lang.org/2022/01/13/Rust-1.58.0.html#captured-identifiers-in-format-strings) \n     \n       \n  •  [@07:40] - Reduced Windows Command search path (https://blog.rust-lang.org/2022/01/13/Rust-1.58.0.html#reduced-windows-command-search-path) \n         \n          \n                \n       •  ripgrep CVE (https://www.cve.org/CVERecord?id=CVE-2021-3013) \n          \n                \n       •  ripgrep fix commit (https://github.com/BurntSushi/ripgrep/commit/229d1a8d41b0023420e7815578fa0b39c0d5c2e4) \n          \n              \n       \n     \n       \n  •  [@11:05] - More #[must_use] in the standard library (https://blog.rust-lang.org/2022/01/13/Rust-1.58.0.html#more-must_use-in-the-standard-library) \n         \n          \n                \n       •  Tracking issue for #[must_use] PRs (https://github.com/rust-lang/rust/issues/89692/) \n          \n                \n       •  When to use #[must_use] (https://std-dev-guide.rust-lang.org/code-considerations/design/must-use.html) \n          \n              \n       \n     \n       \n  •  [@17:16] - Stabilized APIs (https://blog.rust-lang.org/2022/01/13/Rust-1.58.0.html#stabilized-apis) \n         \n          \n                \n       •  std::fs::OpenOptions (https://doc.rust-lang.org/stable/std/fs/struct.OpenOptions.html) \n          \n                \n       •  Tracking issue for *::unwrap_unchecked (https://github.com/rust-lang/rust/issues/81383) \n          \n              \n       \n     \n       \n  •  [@22:50] - Rust 1.58.1 (https://blog.rust-lang.org/2022/01/20/Rust-1.58.1.html) \n         \n          \n                \n       •  Security Advisory (https://blog.rust-lang.org/2022/01/20/cve-2022-21658.html) \n          \n                \n       •  C++ is probably also vulnerable (https://www.reddit.com/r/rust/comments/s8h1kr/comment/hth7go5/?utm_source=share&utm_medium=web2x&context=3) \n          \n              \n       \n     \n     \n\n[@27:15] - Rust 1.59 (https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html) \n\n\n\n     \n       \n  •  [@28:00] - Inline assembly (https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html#inline-assembly) \n         \n          \n                \n       •  std::intrinsics (https://doc.rust-lang.org/std/intrinsics/index.html) \n          \n                \n       •  Inline assembly by example (https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html) \n          \n              \n       \n     \n       \n  •  [@39:06] - Destructuring assignments (https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html#destructuring-assignments) \n     \n       \n  •  [@44:00] - Const generics defaults and interleaving (https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html#const-generics-defaults-and-interleaving) \n     \n       \n  •  [@46:11] - Future incompatibility warnings (https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html#future-incompatibility-warnings) \n     \n       \n  •  [@51:28] - Creating stripped binaries (https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html#creating-stripped-binaries) \n     \n       \n  •  [@53:54] - Incremental compilation off by default (https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html#incremental-compilation-off-by-default) \n         \n          \n                \n       •  Incremental disabled back in Rust 1.52.1 (https://blog.rust-lang.org/2021/05/10/Rust-1.52.1.html) \n          \n                \n       •  The identified issue (https://github.com/rust-lang/rust/issues/94124) \n          \n              \n       \n     \n       \n  •  [@58:50] - Stabilized APIs (https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html#stabilized-apis) \n         \n          \n                \n       •  available_parallelism (https://doc.rust-lang.org/stable/std/thread/fn.available_parallelism.html) \n          \n                \n       •  num_cpus crate (https://docs.rs/num_cpus/) \n          \n              \n       \n     \n       \n  •  [@1:03:04] - Changelog deep-dive\n         \n          \n                \n       •  cargo r -r (https://github.com/rust-lang/cargo/pull/10133) \n          \n                \n       •  Tracking issue for v0 symbol mangling (https://github.com/rust-lang/rust/issues/60705) \n          \n                \n       •  Switching to v0 by default (https://gi...",
        total_duration: "1 hr 13 mins",
        remaining_duration: "1 hr 13 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDtT5ghFUdEcU",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/tT5ghFUdEcU/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3lUFSx7irRtIvaTY-uD_T_XMXJdGA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/tT5ghFUdEcU/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3lgABEozhjrzwANbBjpEMA9d53vzA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Tor with Nick Mathewson",
        description: "Allen Wyma talks with Nick Mathewson (http://www.wangafu.net/~nickm/) , one of the creators of Tor Project (https://www.torproject.org/) . Tor is free and open-source software for enabling anonymous communication.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@0:39] - Nick’s Bio & Tor Project Introduction\n     \n       \n  •  [@2:33] - Deeper dive into Tor\n     \n       \n  •  [@8:07] - Advantage of Rust over C when trying to bring stronger privacy to internet.\n     \n       \n  •  [@21:44] - The History of Tor\n     \n       \n  •  [@26:02] - How does Tor stay in business despite being a free service?\n     \n       \n  •  [@28:11] - What is Onion Routing and how does it work at a high level?\n     \n       \n  •  [@38:54] - The Tor Browser\n     \n       \n  •  [@42:14] - Advise on how to maintain anonymity online\n     \n       \n  •  [@55:17] - Rust vs other languages\n     \n       \n  •  [@1:03:54] - Tips & tricks for people who are starting off in Rust\n     \n       \n  •  [@1:06:00] - Parting thoughts\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Tor’s Github (https://github.com/TheTorProject) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 7 mins",
        remaining_duration: "1 hr 7 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDeFyHHgCIUw4",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/eFyHHgCIUw4/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3nStUKanSJuAy6yEznTTc8bRXvi3A",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/eFyHHgCIUw4/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3li3cS6Vmy0AzcoCknYlojY9_bQ_A",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "zbus with Zeeshan Ali",
        description: "Allen Wyma talks with Zeeshan Ali (https://twitter.com/zeenix) , creator of zbus (https://gitlab.freedesktop.org/dbus/zbus/) . zbus is a Rust library used for interprocess communication using D-Bus (https://dbus.freedesktop.org/doc/dbus-specification.html) .\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@0:51] - Zeeshan’s Bio and zbus (https://lib.rs/crates/zbus) \n     \n       \n  •  [@7:16] - D-Bus at the high level\n     \n       \n  •  [@14:43] - Knowing when to use D-Bus or message queue\n     \n       \n  •  [@19:28] - Authentication methods when going non-local\n     \n       \n  •  [@20:16] - Is it possible to use D-Bus on Kubernetes (https://kubernetes.io/) ?\n     \n       \n  •  [@22:00] - zbus is able to support multiple async runtimes\n     \n       \n  •  [@28:18] - Difference between Tokio (https://tokio.rs/)  and async-std (https://async.rs/) \n     \n       \n  •  [@32:30] - Async Foundations working group\n     \n       \n  •  [@40:06] - Is it expensive to run async runtime?\n     \n       \n  •  [@41:37] - zbus macros and their Matrix channel (https://matrix.to/#/#zbus:matrix.org) \n     \n       \n  •  [@44:00] - IPC (Inter-Process Communication)\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Zeeshan’s Github (https://github.com/zeenix) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "50 mins",
        remaining_duration: "50 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDkHn_xhOTCq0",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/kHn_xhOTCq0/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3lCcMhU52ZbC0oNRLZuzpVMt0jKBQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/kHn_xhOTCq0/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3kk8EqtHVNrwJGOWdBU4JdbRnkGRQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Gitoxide with Sebastian Thiel",
        description: "Allen Wyma talks with Sebastian Thiel (https://twitter.com/theelbasian) , creator of Gitoxide (https://github.com/Byron/gitoxide) .\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@0:31] - Gitoxide\n     \n       \n  •  [@6:29] - Reasons why Sebastian chose Rust\n     \n       \n  •  [@9:45] - Story of Gitoxide\n     \n       \n  •  [@13:29] - Status of Gitoxide\n     \n       \n  •  [@15:41] - git2 (https://docs.rs/git2/latest/git2/) \n     \n       \n  •  [@23:24] - “Gix” is now “Ein” (https://www.reddit.com/r/rust/comments/rm5e9f/gitoxide_november_update_new_cargo_features/) \n     \n       \n  •  [@28:14] - JGit\n     \n       \n  •  [@32:02] - Reference for the implementation of Gitoxide\n     \n       \n  •  [@38:31] - Getting sponsored for Gitoxide\n     \n       \n  •  [@41:56] - Accounting timesheet (https://github.com/Byron/byron/blob/main/timesheets/2021.csv)  and the vision for Gitoxide\n     \n       \n  •  [@48:38] - Ways to help Gitoxide\n     \n       \n  •  [@50:00] - Tips for beginners in Rust\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Sebastian’s Github (https://github.com/Byron) \n     \n       \n  •  Learn Rust with Gitoxide - Youtube (https://www.youtube.com/playlist?list=PLMHbQxe1e9Mk5kOHrm9v20-umkE2ck_gE) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "55 mins",
        remaining_duration: "55 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDlvS9he8cmgk",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/lvS9he8cmgk/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3mvDSsgMTIE6oeZbS723ggNI02T6g",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/lvS9he8cmgk/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3lkT9jQ7ZisAedierGPoHGTPfMPCw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Lumen with Paul Schoenfelder",
        description: "Allen Wyma talks with Paul Schoenfelder (https://twitter.com/gotbones) , contributor to Lumen (https://getlumen.org/) .\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@0:27] - Paul’s Bio and Lumen\n     \n       \n  •  [@4:30] - Lumen can only compile Erlang (https://www.erlang.org/) \n     \n       \n  •  [@9:26] - SSA (Static Single Assignment)\n     \n       \n  •  [@12:02] - BEAM\n     \n       \n  •  [@22:03] - Web Assembly (https://webassembly.org/) \n     \n       \n  •  [@25:02] - Rust makes low level stuff easy to implement\n     \n       \n  •  [@34:44] - WASM Browser limitations\n     \n       \n  •  [@37:01] - Erlang’s Observer (https://www.erlang.org/doc/apps/observer/observer_ug.html)  and Distribution Protocol (https://www.erlang.org/doc/apps/erts/erl_dist_protocol.html) \n     \n       \n  •  [@41:10] - What is WASM (Web Assembly)?\n     \n       \n  •  [@49:01] - WASI (https://wasi.dev/)  (WebAssembly System Interface)\n     \n       \n  •  [@55:31] - Why should I learn another language when I can stick with Javascript?\n     \n       \n  •  [@1:01:30] - The WASM working group vs The community group\n     \n       \n  •  [@1:08:39] - How to participate in Lumen?\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Lumen’s Github (https://github.com/lumen/lumen) \n     \n       \n  •  Paul’s Github (https://github.com/bitwalker) \n     \n       \n  •  Paul’s Website (http://bitwalker.org/) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 13 mins",
        remaining_duration: "1 hr 13 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDYVXzDiZWW7Y",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/YVXzDiZWW7Y/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3nybvf_-jPpx-kqyjCAu1AhoEyr5g",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/YVXzDiZWW7Y/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3nvsPTDzi4Mxmhqe7HWOPMEWgdK2Q",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Yew with Julius Lungys",
        description: "Allen Wyma talks with Julius Lungys (https://twitter.com/voidpumpkin) , contributor to Yew (https://yew.rs/) .\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@1:29] - Core values and benefits of Yew\n     \n       \n  •  [@3:32] - The performance of Yew\n     \n       \n  •  [@6:57] - Cargo workspaces (https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html#cargo-workspaces) \n     \n       \n  •  [@8:05] -  Trunk (https://trunkrs.dev/)  & Wasm-pack (https://rustwasm.github.io/docs/wasm-pack/) \n     \n       \n  •  [@10:07] - Virtual DOM & Debugging\n     \n       \n  •  [@11:24] - Source Maps in Yew\n     \n       \n  •  [@12:21] - Krustlet (https://github.com/krustlet) \n     \n       \n  •  [@13:34] - Reasons to choose Wasm (https://webassembly.org/)  over JavaScript\n     \n       \n  •  [@15:26] - Ecosystem of Yew\n     \n       \n  •  [@16:32] - Glue package (https://crates.io/crates/wasm-glue) \n     \n       \n  •  [@21:32] - How Yew relates to Elm (https://elm-lang.org/) \n     \n       \n  •  [@22:32] - Functional Components (https://yew.rs/docs/next/concepts/function-components/introduction) \n     \n       \n  •  [@25:05] - Server Side Rendering (SSR)\n     \n       \n  •  [@26:52] - When should you consider Yew\n     \n       \n  •  [@34:24] - TypeScript (https://www.typescriptlang.org/) \n     \n       \n  •  [@38:46] - Is Yew limited to the browser?\n     \n       \n  •  [@39:56] - Electron (https://www.electronjs.org/) \n     \n       \n  •  [@41:03] - Yew’s browser support\n     \n       \n  •  [@44:14] - Tips for beginners from Julius\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Julius’s Github (https://github.com/voidpumpkin) \n     \n       \n  •  The Company (Nikulipe) (https://www.nikulipe.com/) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "47 mins",
        remaining_duration: "47 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDHBpO4P4Rizg",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/HBpO4P4Rizg/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3nQDY_jmhF-fBpydj37806Dtai2xA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/HBpO4P4Rizg/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nGGhEV1vKwqIXDYeHdoVmCPZBR_Q",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "LibertyOS with Daniel Teberian",
        description: "Allen Wyma talks with Daniel Teberian (https://twitter.com/zippydpt) , the creator of LibertyOS (https://github.com/LibertyOS-Development/kernel) .\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@0:41] - Daniel’s Bio\n     \n       \n  •  [@3:14] - Recent work on LibertyOS (https://github.com/LibertyOS-Development) \n     \n       \n  •  [@4:36] - Getting help from some crates or totally starting from scratch?\n     \n       \n  •  [@8:08] - The team behind LibertyOS\n     \n       \n  •  [@10:04] - Every processor is different so you can’t write Rust for everything\n     \n       \n  •  [@17:27] - What can LibertyOS do at the moment?\n     \n       \n  •  [@20:19] - How to support writing Rust programs on a Rust-based OS?\n     \n       \n  •  [@27:38] - How are decisions made for LibertyOS?\n     \n       \n  •  [@34:07] - Cargo check (https://doc.rust-lang.org/cargo/commands/cargo-check.html) \n     \n       \n  •  [@37:12] - More on the LibertyOS members\n     \n       \n  •  [@42:34] - Why LibertyOS may change their name\n     \n       \n  •  [@44:46] - Final words and ways to contribute to the project\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Daniel’s Github (https://github.com/danielteberian) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "47 mins",
        remaining_duration: "47 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED-GL9vR_5moA",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/-GL9vR_5moA/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kuBaCmatX2Xv-TUxh_c2gE8gqVrg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/-GL9vR_5moA/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nIqFx0AddYBgOimWJxIb_9XSDZMQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Code Like a Pro in Rust with Brenden Matthews",
        description: "Allen Wyma talks with Brenden Matthews (https://twitter.com/brndnmtthws) , the author of the book Code Like a Pro in Rust (https://www.manning.com/books/code-like-a-pro-in-rust) .\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:41] - Brenden’s Bio\n     \n       \n  •  [@1:30] - Where the idea to write the book (https://www.manning.com/books/code-like-a-pro-in-rust?utm_source=brendenm&utm_medium=affiliate&utm_campaign=book_matthews_code_9_22_21&a_aid=brendenm&a_bid=3eb61509)  came from\n     \n       \n  •  [@4:32] - Pythonic, Rustacious/Idiomatic Rust and other coding style terms\n     \n       \n  •  [@6:25] - Writing idiomatic code\n     \n       \n  •  [@10:19] - Helper methods\n     \n       \n  •  [@12:34] - From (https://doc.rust-lang.org/std/convert/trait.From.html)  trait\n     \n       \n  •  [@15:20] - Into (https://doc.rust-lang.org/std/convert/trait.Into.html)  trait\n     \n       \n  •  [@17:00] - Errors in Rust\n     \n       \n  •  [@26:59] - Other languages borrowing Rust’s ideas for memory safety and no null type\n     \n       \n  •  [@29:21] - Kotlin (https://kotlinlang.org/) , Dart (https://dart.dev/) , Swift (https://developer.apple.com/swift/)  & Zig (https://ziglang.org/) \n     \n       \n  •  [@30:58] - LLVM (https://www.llvm.org/) , Swift & Rust and evolution of languages\n     \n       \n  •  [@35:32] - Backwards compatibility in Rust\n     \n       \n  •  [@39:00] - Experiences and the improvements in Rust\n     \n       \n  •  [@42:44] - Components are added manually, but should they be installed by default?\n     \n       \n  •  [@48:16] - Knowing when to use libc and adding a C runtime\n     \n       \n  •  [@59:58] - Who Code Like a Pro in Rust is written for\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Brenden’s Blog (https://brndn.io/) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 2 mins",
        remaining_duration: "1 hr 2 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDPVuk6z5L_xc",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/PVuk6z5L_xc/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3meBr2NGB3IB831QpJMnVhZYccTDQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/PVuk6z5L_xc/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3m0IU9dAULVCVExPfnZmoXTP1s-aw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's New in Rust 1.56 and 1.57",
        description: "Jon and Ben discuss the highlights of the 1.56 and 1.57 releases of Rust.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n[@01:14] - Rust 2021 edition (https://doc.rust-lang.org/stable/edition-guide/rust-2021/index.html) \n\n\n\n     \n       \n  •  [@01:16] - What is an edition? (https://rust-lang.github.io/rfcs/3085-edition-2021.html) \n     \n       \n  •  [@05:03] - Disjoint captures in closures (https://doc.rust-lang.org/stable/edition-guide/rust-2021/disjoint-capture-in-closures.html) \n         \n          \n                \n       •  Niko’s “view types” proposal (https://smallcultfollowing.com/babysteps//blog/2021/11/05/view-types/) \n          \n              \n       \n     \n       \n  •  [@09:00] - IntoIterator for arrays (https://doc.rust-lang.org/stable/edition-guide/rust-2021/IntoIterator-for-arrays.html) \n     \n       \n  •  [@11:12] - Or patterns in macro_rules (https://doc.rust-lang.org/stable/edition-guide/rust-2021/or-patterns-macro-rules.html) \n     \n       \n  •  [@13:31] - New default Cargo feature resolver (https://doc.rust-lang.org/stable/edition-guide/rust-2021/default-cargo-resolver.html) \n         \n          \n                \n       •  Details on the new resolver (https://doc.rust-lang.org/stable/cargo/reference/resolver.html#feature-resolver-version-2) \n          \n              \n       \n     \n       \n  •  [@15:16] - Additions to the prelude (https://doc.rust-lang.org/stable/edition-guide/rust-2021/prelude.html) \n         \n          \n                \n       •  std::prelude (https://doc.rust-lang.org/stable/std/prelude/index.html) \n          \n                \n       •  FromIterator (https://doc.rust-lang.org/stable/std/iter/trait.FromIterator.html) \n          \n              \n       \n     \n       \n  •  [@19:38] - Panic macro consistency (https://doc.rust-lang.org/stable/edition-guide/rust-2021/panic-macro-consistency.html)  and new reserved syntax (https://doc.rust-lang.org/stable/edition-guide/rust-2021/reserving-syntax.html) \n         \n          \n                \n       •  [@20:33] - Implicit formatting captures (https://rust-lang.github.io/rfcs/2795-format-args-implicit-identifiers.html)  (more on Reddit (https://www.reddit.com/r/rust/comments/qu3cli/pr_to_stabilize_implicit_captures_in_string/) )\n          \n                \n       •  [@25:00] - Reserved syntax for “f-strings”\n          \n                \n       •  [@27:54] - Why panic! had to change\n          \n                \n       •  [@28:55] - Other uses for reserved syntax\n          \n              \n       \n     \n       \n  •  [@30:15] - Warnings promoted to errors (https://doc.rust-lang.org/stable/edition-guide/rust-2021/warnings-promoted-to-error.html) \n         \n          \n                \n       •  Future incompatibility warnings (https://rust-lang.github.io/rfcs/2834-cargo-report-future-incompat.html) \n          \n              \n       \n     \n       \n  •  [@35:23] - cargo fix (https://doc.rust-lang.org/stable/edition-guide/editions/transitioning-an-existing-project-to-a-new-edition.html) \n     \n     \n\n[@36:20] - Rust 1.56 (https://blog.rust-lang.org/2021/10/21/Rust-1.56.0.html) \n\n\n\n     \n       \n  •  [@36:30] - Cargo.toml rust-version (https://blog.rust-lang.org/2021/10/21/Rust-1.56.0.html#cargo-rust-version) \n         \n          \n                \n       •  Cargo book entry (https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field) \n          \n              \n       \n     \n       \n  •  [@42:54] - New bindings in binding @ pattern (https://blog.rust-lang.org/2021/10/21/Rust-1.56.0.html#new-bindings-in-binding--pattern) \n     \n       \n  •  [@44:27] - Stabilized APIs (https://blog.rust-lang.org/2021/10/21/Rust-1.56.0.html#stabilized-apis) \n     \n       \n  •  [@49:27] - Changelog deep-dive\n         \n          \n                \n       •  [@49:27] - impl From＜[(K, V), N]＞ for collections (https://github.com/rust-lang/rust/pull/84111) \n                  \n               \n                         \n            •  RFC for adding collection literal macros (https://github.com/rust-lang/rfcs/issues/542) \n               \n                       \n                \n          \n                \n       •  [@53:07] - Remove P: Unpin bound on impl Future for Pin (https://github.com/rust-lang/rust/pull/81363) \n          \n                \n       •  [@55:16] - Instant backsliding protection optimization (https://github.com/rust-lang/rust/pull/83093) \n                  \n               \n                         \n    ...",
        total_duration: "1 hr 27 mins",
        remaining_duration: "1 hr 27 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDr5W17Rl0oUw",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/r5W17Rl0oUw/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3lM5yoC665Oa7STGOOO7nHCkM4-_w",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/r5W17Rl0oUw/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3lDMLGjortym1nvLhJxAYGOK5s2pg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Refactoring to Rust with Lily Mara",
        description: "Allen Wyma talks with Lily Mara (https://twitter.com/TheLily_Mara) , the author of the book Refactoring to Rust (https://www.manning.com/books/refactoring-to-rust) .\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@1:26] - Lily’s Bio\n     \n       \n  •  [@3:33] - Her blogs (https://onesignal.com/blog/author/lily/)  helped her improve her writing\n     \n       \n  •  [@5:09] - How the book (https://www.manning.com/books/refactoring-to-rust)  came to be\n     \n       \n  •  [@9:34] - Knowing when to add a new language to an existing project\n     \n       \n  •  [@12:07] - Tools for measuring memory usage\n     \n       \n  •  [@15:04] - Garbage collection\n     \n       \n  •  [@18:30] - Strongly and weakly typed languages & dynamic vs static dispatch\n     \n       \n  •  [@21:13] - About the book\n     \n       \n  •  [@25:40] - Go being treated like a C library\n     \n       \n  •  [@27:02] - Memory allocators\n     \n       \n  •  [@35:51] - When did Lily started working on the book?\n     \n       \n  •  [@37:44] - Writing examples (it’s hard!)\n     \n       \n  •  [@46:36] - How technical are the editors?\n     \n       \n  •  [@49:00] - The Rust community is very welcoming\n     \n       \n  •  [@50:14] - Publishers that are publishing Rust books\n     \n       \n  •  [@52:17] - Lily’s Twitch stream for Manning\n     \n       \n  •  [@53:07] - Lily’s advice for aspiring Rust developers\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  PyO3 (https://github.com/PyO3/pyo3) \n     \n       \n  •  Flutter Rust Bridge (https://github.com/fzyzcjy/flutter_rust_bridge) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "57 mins",
        remaining_duration: "57 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDdhxIjZW5XJ0",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/dhxIjZW5XJ0/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3kA_feW-ZU22kCkTsVhXK2x0pRFkQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/dhxIjZW5XJ0/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3nW-WlGuZGKyT9u2DkrOaFGc2GU5Q",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Game Development with Herbert Wolverson",
        description: "Allen Wyma talks with Herbert Wolverson (https://twitter.com/herberticus) , the author of the book Hands-on Rust (https://pragprog.com/titles/hwrust/hands-on-rust/) .\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@0:57] - About Herbert and his book (https://pragprog.com/titles/hwrust/hands-on-rust/) \n     \n       \n  •  [@3:01] - Explaining Rust’s traits (https://doc.rust-lang.org/book/ch10-02-traits.html) \n     \n       \n  •  [@4:27] - The book is for intermediate programming\n     \n       \n  •  [@5:32] - Most beneficial part about using Rust over other languages\n     \n       \n  •  [@7:42] - Unreal Engine (https://www.unrealengine.com/) \n     \n       \n  •  [@11:13] - Unreal, Unity (https://unity.com/)  & Godot (https://godotengine.org/) \n     \n       \n  •  [@13:44] - Bevy (https://bevyengine.org/)  Engine & Amethyst (https://amethyst.rs/)  Engine\n     \n       \n  •  [@18:31] - Zig (https://ziglang.org/) \n     \n       \n  •  [@20:38] - Herbert’s Bracket-Lib (https://bracketproductions.com/)  engine\n     \n       \n  •  [@24:18] - Creating a game engine from scratch\n     \n       \n  •  [@34:03] - ECS (Entity Component System) & OPP (Object-Oriented Programming)\n     \n       \n  •  [@42:02] - Other game engines mentioned in the book\n     \n       \n  •  [@43:12] - Macroquad & Miniquad\n     \n       \n  •  [@45:39] - Amethyst\n     \n       \n  •  [@49:51] - RG3D (https://rg3d.rs/) \n     \n       \n  •  [@51:58] - Book Status & Rust Brain Teasers (https://pragprog.com/titles/hwrustbrain/rust-brain-teasers/) \n     \n       \n  •  [@57:44] - Pragprog (https://pragprog.com/)  Publishing\n     \n       \n  •  [@01:02:30] - How to contact Herbert\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Hands-on Rust (https://hands-on-rust.com/) \n     \n       \n  •  Roguelike Tutorial (https://github.com/amethyst/rustrogueliketutorial) \n     \n       \n  •  The Bracket (https://github.com/thebracket/) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 5 mins",
        remaining_duration: "1 hr 5 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDSg-wUskavVM",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/Sg-wUskavVM/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kbdPimXwlyy0KoDkGGrnstlTxBpQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/Sg-wUskavVM/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kcsPSU1LMDVyFgT3KqibqEmQMA4w",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Error Handling in Rust with Jane Lusby",
        description: "Allen Wyma talks with Jane Lusby (https://github.com/yaahc) , the Error Handling Project Group Lead, and also the Project Director of Collaboration at Rust Foundation (https://foundation.rust-lang.org/) .\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@00:57] - Jane’s bio\n     \n       \n  •  [@04:10] - Jane’s contributions to Clippy (https://github.com/rust-lang/rust-clippy) \n     \n       \n  •  [@08:54] - Eyre (https://github.com/yaahc/eyre) \n     \n       \n  •  [@15:49] - Failure (https://docs.rs/failure/)  & Anyhow (https://docs.rs/anyhow/) \n     \n       \n  •  [@17:13] - Choosing between anyhow & eyre\n     \n       \n  •  [@20:05] - AnyError (https://docs.rs/err-context/0.1/err_context/type.AnyError.html)  and ThisError (https://docs.rs/thiserror/) \n     \n       \n  •  [@23:31] - Color-eyre (https://github.com/yaahc/color-eyre) \n     \n       \n  •  [@26:08] - Other crates that are also in eyre\n     \n       \n  •  [@28:59] - Error Handling Group (https://github.com/rust-lang/project-error-handling) \n     \n       \n  •  [@38:12] - Collaboration with other groups\n     \n       \n  •  [@46:05] - Rust 2021 & 2018 Editions\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "52 mins",
        remaining_duration: "52 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDW0jnoTihULw",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/W0jnoTihULw/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3lur1xjQYe_GDLeyNU0I8x9VhEyKA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/W0jnoTihULw/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3mKcjup9C6y1jhJn3FVExAuopV8dw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Tokio Ecosystem with Alice Ryhl",
        description: "Allen Wyma talks with Alice Ryhl (https://ryhl.io/) , one of the maintainers of the open source project Tokio (https://tokio.rs/) .\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@00:40] - Alice’s Bio\n     \n       \n  •  [@01:08] - Managing pull requests on GitHub\n     \n       \n  •  [@05:00] - Alice’s involvement in Tokio\n     \n       \n  •  [@08:23] - Tokio’s topics page\n     \n       \n  •  [@11:06] - Alice’s favorite part of contributing\n     \n       \n  •  [@12:55] - Changes in Tokio since Alice joined\n     \n       \n  •  [@16:52] - Measuring metrics\n     \n       \n  •  [@19:38] - Cooperative & preemptive scheduling\n     \n       \n  •  [@24:30] - Diesel (https://diesel.rs/) \n     \n       \n  •  [@25:45] - Definition of [blocking]((https://ryhl.io/blog/async-what-is-blocking/)\n     \n       \n  •  [@27:37] - I/O threads\n     \n       \n  •  [@31:21] - What are sleeping threads?\n     \n       \n  •  [@33:41] - Tokio Console (https://tokio.rs/blog/2021-09-console-dev-diary-1) \n     \n       \n  •  [@41:14] - Pros and cons of using actors\n     \n       \n  •  [@47:05] - Alice’s academic background\n     \n       \n  •  [@49:22] - Tokio’s upcoming roadmap\n     \n       \n  •  [@57:33] - Replacing epoll with io_uring\n     \n       \n  •  [@58:56] - Axum (https://github.com/tokio-rs/axum) , Tower (https://github.com/tower-rs/tower) , and Loom (https://github.com/tokio-rs/loom) \n     \n       \n  •  [@01:01:45] - Web frameworks for Rust\n     \n       \n  •  [@01:05:57] - How to contact Alice\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Rust in Android Platform (https://security.googleblog.com/2021/04/rust-in-android-platform.html) \n     \n       \n  •  Tokio’s Discord (https://discord.com/invite/tokio) \n     \n       \n  •  Tokio’s Topics Pages (https://tokio.rs/tokio/topics) \n     \n       \n  •  Cooperative Scheduling (https://tokio.rs/blog/2020-04-preemption) \n     \n       \n  •  Tokio Metrics (https://github.com/tokio-rs/tokio/issues/4073) \n     \n       \n  •  Actors in Tokio (https://ryhl.io/blog/actors-with-tokio/) \n     \n       \n  •  io_uring with Tokio (https://github.com/tokio-rs/tokio-uring/) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 8 mins",
        remaining_duration: "1 hr 8 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDy3x8SbDbzJo",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/y3x8SbDbzJo/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3kMQecl36CvQszW7WpKwi4rNXClhg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/y3x8SbDbzJo/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3l_MFOhWp5GLq4klsQdxS3khwnjFQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Hyper with Sean McArthur",
        description: "Allen Wyma talks with Sean McArthur (https://twitter.com/seanmonstar) , the creator of Hyper (https://github.com/hyperium/hyper) , an HTTP library for Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@01:37] - The history of Hyper\n     \n       \n  •  [@07:41] - Is Hyper a client or a server side component?\n     \n       \n  •  [@11:09] - Async/await\n     \n       \n  •  [@13:24] - Benefits to using async over blocking?\n     \n       \n  •  [@14:35] - Relationship between Tokio (https://github.com/tokio-rs/tokio)  and Hyper\n     \n       \n  •  [@16:11] - Mio – Metal IO (https://github.com/tokio-rs/mio) \n     \n       \n  •  [@16:48] - Can Hyper run on other async runtimes?\n     \n       \n  •  [@18:27] - Fuchsia OS (https://fuchsia.dev/) \n     \n       \n  •  [@22:39] - Governance of the Hyper Project\n     \n       \n  •  [@25:25] - Why did Hyper choose Tokio?\n     \n       \n  •  [@34:35] - Reqwest (https://github.com/seanmonstar/reqwest) \n     \n       \n  •  [@36:07] - cURL (https://curl.se/) \n     \n       \n  •  [@38:29] - What is a C application binary interface (ABI)?\n     \n       \n  •  [@50:29] - HTTP/3 support in future\n     \n       \n  •  [@50:54] - Differences between HTTP/2 (https://http2.github.io/)  and HTTP/3 (https://blog.cloudflare.com/http3-the-past-present-and-future/) \n     \n       \n  •  [@53:26] - Rust library for C\n     \n       \n  •  [@57:26] - Upcoming plan for Hyper\n     \n       \n  •  [@01:00:36] - Advice for newcomers to Rust?\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 5 mins",
        remaining_duration: "1 hr 5 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDz3ZNFFZlnms",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/z3ZNFFZlnms/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3lGnKH54sb6aVA20QBTYTyu9DpPkw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/z3ZNFFZlnms/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3mAs_jGkInHcJzRlkULIc7oriij1Q",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Warp with Zach Lloyd",
        description: "Allen Wyma talks with Zach Lloyd (https://twitter.com/zachlloydtweets) , the founder of Warp (https://www.warp.dev) . Warp is a blazingly fast, Rust-based terminal that makes you and your team more productive.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@00:58] - Is Warp a GUI app?\n     \n       \n  •  [@04:08] - The history of Warp\n     \n       \n  •  [@06:27] - Difference between Warp and other Unix shells like Csh (http://cshell.net/) \n     \n       \n  •  [@10:22] - Warp’s open API\n     \n       \n  •  [@13:50] - Terminal improvements over the last 10 years\n     \n       \n  •  [@17:06] - Sharing blocks & live collaboration\n     \n       \n  •  [@19:08] - Will Warp run on multiple platforms?\n     \n       \n  •  [@21:45] - Zach’s background\n     \n       \n  •  [@25:38] - Why Rust over Go (https://golang.org/) ?\n     \n       \n  •  [@29:51] - Warp’s dependencies\n     \n       \n  •  [@36:36] - Objective-C vs. Rust\n     \n       \n  •  [@41:49] - Zach’s build pipeline\n     \n       \n  •  [@43:21] - cargo-bundle (https://github.com/burtonageo/cargo-bundle) \n     \n       \n  •  [@44:52] - Warp’s business model\n     \n       \n  •  [@46:28] - Postman (https://www.postman.com/) \n     \n       \n  •  [@49:50] - Funding & business pitch of Warp\n     \n       \n  •  [@54:30] - Zach’s Rust setup\n     \n       \n  •  [@57:46] - Tips for newcomers to Rust\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Warp’s Twitter (https://twitter.com/warpdotdev) \n     \n       \n  •  Warp’s GitHub (https://github.com/warpdotdev/warp) \n     \n       \n  •  Zach’s engineering handbook (https://thezbook.com/) \n         Credits\n     \n         \n     \n     Intro Theme: Aerocity (https://twitter.com/AerocityMusic) \n     \n       \n     \n     \n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 2 mins",
        remaining_duration: "1 hr 2 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED4WVZNfpG6vQ",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/4WVZNfpG6vQ/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3m-L0IPJcj7-qOnODrUmmJ0Ft3Idw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/4WVZNfpG6vQ/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3lZpkBDuDE06naNFrU3TjCehT88Zg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rust Web Development with Bastian Gruber",
        description: "Allen Wyma talks with Bastian Gruber (https://github.com/gruberb) , author of “Rust Web Development” (https://www.rustwebdevelopment.com/) , about his book.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@01:22] - Bastian’s Bio (https://twitter.com/recvonline) \n     \n       \n  •  [@02:53] - “Rust Web Development” on Manning (https://www.manning.com/books/rust-web-development) \n     \n       \n  •  [@04:06] - Using Rust for web development\n     \n       \n  •  [@04:52] - Hyper.rs (https://hyper.rs/) \n     \n       \n  •  [@05:13] - Choices of frameworks for Rust web development\n     \n       \n  •  [@07:49] - Rocket (https://rocket.rs/)  in production\n     \n       \n  •  [@08:35] - Tools for Rust web services\n     \n       \n  •  [@10:39] - Choosing SQLx (https://github.com/launchbadge/sqlx)  over Diesel (https://diesel.rs/) ?\n     \n       \n  •  [@13:58] - Why Bastian switched from Node.js (https://nodejs.org/en/)  to Rust\n     \n       \n  •  [@17:36] - Bastian’s role at Twilio\n     \n       \n  •  [@19:57] - Popularity of Rust in Berlin\n     \n       \n  •  [@25:57] - Warp (https://github.com/seanmonstar/warp) \n     \n       \n  •  [@29:14] - Zero to Production in Rust (https://www.zero2prod.com/index.html) \n     \n       \n  •  [@31:03] - How does Bastian write?\n     \n       \n  •  [@37:48] - Rust vs other languages\n     \n       \n  •  [@42:40] - Tips to help you stand out as a Rust developer\n     \n       \n  •  [@46:21] - Tips for beginners\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "52 mins",
        remaining_duration: "52 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDPX6fFn75fHA",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/PX6fFn75fHA/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kbyAUk5PdrwgISeqIcOeblcwDGxg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/PX6fFn75fHA/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3lZv-bqPajK-e97lE7bLyRZ2G2QSw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's New in Rust 1.54 and 1.55",
        description: "Jon and Ben discuss the highlights of the 1.54 and 1.55 releases of Rust.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n[@00:37] - Rust 1.54 (https://blog.rust-lang.org/2021/07/29/Rust-1.54.0.html) \n\n\n\n     \n       \n  •  [@00:55] - Attributes can invoke function-like macros (https://blog.rust-lang.org/2021/07/29/Rust-1.54.0.html#attributes-can-invoke-function-like-macros) \n         \n          \n                \n       •  The doc attribute (https://doc.rust-lang.org/rustdoc/the-doc-attribute.html) \n          \n              \n       \n     \n       \n  •  [@04:04] - wasm32 intrinsics stabilized (https://blog.rust-lang.org/2021/07/29/Rust-1.54.0.html#wasm32-intrinsics-stabilized) \n         \n          \n                \n       •  std::intrinsics (https://doc.rust-lang.org/std/intrinsics/index.html) \n          \n                \n       •  Target families (https://doc.rust-lang.org/reference/conditional-compilation.html#target_family) \n          \n              \n       \n     \n       \n  •  [@06:59] - Incremental compilation is re-enabled by default (https://blog.rust-lang.org/2021/07/29/Rust-1.54.0.html#incremental-compilation-is-re-enabled-by-default) \n         \n          \n                \n       •  Rust 1.52.1 disables incremental compilation (https://blog.rust-lang.org/2021/05/10/Rust-1.52.1.html) \n          \n                \n       •  Incremental compilation issues tracking issue (https://github.com/rust-lang/rust/issues/84970) \n          \n              \n       \n     \n       \n  •  [@08:55] - Stabilized APIs (https://blog.rust-lang.org/2021/07/29/Rust-1.54.0.html#stabilized-apis) \n     \n       \n  •  [@11:00] - Changelog deep-div\n         \n          \n                \n       •  [@11:04] - cargo report and future incompatibility lints (https://github.com/rust-lang/cargo/pull/9438) \n          \n                \n       •  [@14:12] - LLVM mutable noalias is on again (https://github.com/rust-lang/rust/pull/82834) \n          \n                \n       •  [@16:24] - CARGO_TARGET_TMPDIR (https://github.com/rust-lang/cargo/pull/9375) \n          \n                \n       •  [@17:24] - Use semver 1.0 (https://github.com/rust-lang/cargo/pull/9508) \n                  \n               \n                         \n            •  Checking semver 1.0 against crates.io (https://github.com/dtolnay/semver/issues/237) \n               \n                       \n                \n          \n              \n       \n     \n     \n\n[@19:18] - Rust 1.55 (https://blog.rust-lang.org/2021/09/09/Rust-1.55.0.html) \n\n\n\n     \n       \n  •  [@19:26] - Cargo deduplicates compiler errors (https://blog.rust-lang.org/2021/09/09/Rust-1.55.0.html#cargo-deduplicates-compiler-errors) \n     \n       \n  •  [@20:24] - Faster, more correct float parsing (https://blog.rust-lang.org/2021/09/09/Rust-1.55.0.html#faster-more-correct-float-parsing) \n         \n          \n                \n       •  The PR (https://github.com/rust-lang/rust/pull/86761) \n          \n                \n       •  Reddit post with details (https://www.reddit.com/r/rust/comments/omelz4/making_rust_float_parsing_fast_libcore_edition/) \n          \n              \n       \n     \n       \n  •  [@22:20] - io::ErrorKind variants updates (https://blog.rust-lang.org/2021/09/09/Rust-1.55.0.html#stdioerrorkind-variants-updated) \n     \n       \n  •  [@28:08] - Open range patterns added (https://blog.rust-lang.org/2021/09/09/Rust-1.55.0.html#open-range-patterns-added) \n     \n       \n  •  [@29:44] - Stabilized APIs (https://blog.rust-lang.org/2021/09/09/Rust-1.55.0.html#stabilized-apis) \n         \n          \n                \n       •  [@29:44] - MaybeUninit (https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html) \n          \n                \n       •  [@32:44] - ops::ControlFlow (https://doc.rust-lang.org/stable/std/ops/enum.ControlFlow.html) \n                  \n               \n                         \n            •  Try trait (v2) RFC (https://rust-lang.github.io/rfcs/3058-try-trait-v2.html) \n               \n                       \n                \n          \n                \n       •  [@35:59] - string::Drain::as_str (https://doc.rust-lang.org/stable/std/string/struct.Drain.html#method.as_str) \n          \n              \n       \n     \n       \n  •  [@37:52] - Changelog deep-dive\n         \n          \n                \n       •  [@38:08] - Build scripts informed about rustc configuration (https://doc.rust-lang.org/nightly/cargo/reference/environment-variables.html#environment-variables-carg...",
        total_duration: "44 mins",
        remaining_duration: "44 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED779sRWxuV4o",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/779sRWxuV4o/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3lrA6KQ8NW9lCuV6BYM3Ds1Ejgidg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/779sRWxuV4o/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3lIAbMsnueogwu1e_BdvsuHVYHdkg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "History of Rust with Ben Striegel",
        description: "Allen Wyma talks with Ben Striegel (https://github.com/bstrie) , a member of Rust’s official community outreach team, about the history of Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@1:56] - What got Ben first interested in Rust?\n     \n       \n  •  [@3:03] - How Ben got involved\n     \n       \n  •  [@9:36] - Rust 1.0\n     \n       \n  •  [@16:21] - What does move (https://doc.rust-lang.org/std/keyword.move.html)  mean?\n     \n       \n  •  [@17:36] - The Borrow Checker (https://rustc-dev-guide.rust-lang.org/borrow_check.html) \n     \n       \n  •  [@20:04] - What language was the Rust compiler first written in?\n     \n       \n  •  [@25:04] - Choosing LLVM (https://llvm.org/)  over GCC (https://gcc.gnu.org/) \n     \n       \n  •  [@33:28] - 2 ways to target Windows\n     \n       \n  •  [@34:39] - libc (https://crates.io/crates/libc)  and musl (https://www.musl-libc.org/) \n     \n       \n  •  [@36:22] - Rust Editions\n     \n       \n  •  [@46:46] - Does Rust have a small standard library?\n     \n       \n  •  [@54:18] - Why TOML (https://toml.io/en/) ? TOML vs YAML (https://yaml.org/) \n     \n       \n  •  [@58:53] - “Tree shaking” (https://webpack.js.org/guides/tree-shaking/)  in Rust?\n     \n       \n  •  [@01:00:48] - Who created Cargo?\n     \n       \n  •  [@01:02:26] - Rust’s milestones\n     \n       \n  •  [@01:07:42] - Mozilla 2020 layoffs (https://blog.mozilla.org/blog/2020/08/11/changing-world-changing-mozilla/) \n         \n          \n                \n       •  Discussion on /r/rust (https://www.reddit.com/r/rust/comments/i7stjy/how_do_mozilla_layoffs_affect_rust/) \n          \n              \n       \n     \n       \n  •  [@01:12:33] - Will Rust stay open-source?\n     \n       \n  •  [01:18:10] - Future of Rust\n     \n       \n  •  [01:24:48] - Who decides what changes make it into Rust?\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 32 mins",
        remaining_duration: "1 hr 32 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED6FEPDrOAEJc",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/6FEPDrOAEJc/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3nSGRYurSL1wElG6YKYVvhoVjTl1Q",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/6FEPDrOAEJc/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kmC8Vp0XReIgdZfEmW8fAEferTaQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Tokio with Carl Lerche",
        description: "Allen Wyma talks with Carl Lerche, a principal engineer at AWS (https://aws.amazon.com/) , also one of the founders of  Tokio (https://tokio.rs/) .\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:35] - Carl’s Bio (https://twitter.com/carllerche/) \n     \n       \n  •  [@02:30] - Apache Cassandra (https://cassandra.apache.org/_/index.html) \n     \n       \n  •  [@07:45] - Epoll  (https://man7.org/linux/man-pages/man7/epoll.7.html) \n     \n       \n  •  [@07:51] - Kqueue (https://www.freebsd.org/cgi/man.cgi?kqueue) \n     \n       \n  •  [@07:55] - I/O Completion Ports (https://docs.microsoft.com/en-us/windows/win32/fileio/i-o-completion-ports) \n     \n       \n  •  [@14:07] - Eventual (https://github.com/carllerche/eventual) \n     \n       \n  •  [@18:55] - Module pin (https://doc.rust-lang.org/std/pin/index.html) \n     \n       \n  •  [@28:35] - What do macros expand to?\n     \n       \n  •  [@30:41] - Cargo-expand (https://github.com/dtolnay/cargo-expand) \n     \n       \n  •  [@42:44] - What’s new since Tokio 1.0\n     \n       \n  •  [@45:02] - Tokio-console (https://github.com/tokio-rs/console) \n     \n       \n  •  [@01:05:15] - Tokio ecosystem\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Carl’s Github (https://github.com/carllerche/) \n     \n       \n  •  Carl’s personal blog (https://carllerche.com/) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 16 mins",
        remaining_duration: "1 hr 16 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDi9oeOqj9NLo",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/i9oeOqj9NLo/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3ndVg59-B5Z5RtF9P2VdIA2NeFESw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/i9oeOqj9NLo/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nMMX8egX3pazKPGTzRqEIfOj153w",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Gleam with Louis Pilfold",
        description: "Allen Wyma talks with Louis Pilfold, the creator and lead designer of Gleam (https://gleam.run/) .\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:55] - Louis’s Bio (https://twitter.com/louispilfold) \n     \n       \n  •  [@02:15] - Erlang (https://www.erlang.org/) \n     \n       \n  •  [@09:03] - Rust Project Manager, Cargo (https://doc.rust-lang.org/book/ch01-03-hello-cargo.html) \n     \n       \n  •  [@12:15] - Reason of using Rust to implement the compiler\n     \n       \n  •  [@19:01] - Why Erlang?\n     \n       \n  •  [@23:07] - Erlang programming model\n     \n       \n  •  [@27:45] - How does Gleam work?\n     \n       \n  •  [@31:07] - Problems with TypeScript (https://www.typescriptlang.org/) \n     \n       \n  •  [@33:38] - What is Erlang Dialyzer (https://erlang.org/doc/man/dialyzer.html) ?\n     \n       \n  •  [@38:06] - Changes to Gleam compiler\n     \n       \n  •  [@44:47] - Gleam v0.17 (https://gleam.run/news/gleam-v0.17-released/) \n     \n       \n  •  [@49:45] - Pros and Cons of using Rust as a compiler\n     \n       \n  •  [@52:30] - Tips and Tricks for beginners\n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr",
        remaining_duration: "1 hr",
        date: "7 Feb",
        video_id: VideoID(
            "MPED9PBRYHLlW78",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/9PBRYHLlW78/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3lj-94Vzud37TNGKx0x2LchopNJmQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/9PBRYHLlW78/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3m1_M504UOS1MKDfGih7BKLQg8-2Q",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rust for Rustaceans by Jon Gjengset",
        description: "Allen Wyma talks with Jon Gjengset, a software engineer at AWS (https://aws.amazon.com/) , about his book Rust for Rustaceans (https://nostarch.com/rust-rustaceans) .\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@11:24] - Noria (https://github.com/mit-pdos/noria) \n     \n       \n  •  [@13:00] - Jon’s Youtube Channel (https://www.youtube.com/c/JonGjengset) \n     \n       \n  •  [@21:53] - Crust of Rust (https://www.youtube.com/watch?v=rAl-9HwD858&list=PLqbS7AVVErFiWDOAVrPt7aYmnuuOLYvOa) \n     \n       \n  •  [@25:13] - What does it mean to be a Rustacean?\n         \n          \n                \n       •  Niko Matsakis’ Rustacean Principles (https://github.com/nikomatsakis/rustacean-principles) \n          \n              \n       \n     \n       \n  •  [@27:23] - What does intermediate content mean?\n     \n       \n  •  [@30:03] - Chapter on memory in Rust (https://nostarch.com/download/samples/RustforRustaceans_Ch2new.pdf) \n     \n       \n  •  [@41:21] - Does Rust prevent bugs?\n     \n       \n  •  [@58:20] - The Linux kernel and memory allocation failures\n     \n       \n  •  [@1:05:43] - Feature flag discoverability\n     \n       \n  •  [@1:10:14] - Tips for beginners\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Jon’s Fosstodon (https://fosstodon.org/@jonhoo) \n     \n     \n\nCredits\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 21 mins",
        remaining_duration: "1 hr 21 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED-9F_TwodAMU",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/-9F_TwodAMU/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3lFPDDx6RF9swPVoniCpQa7TSEp6Q",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/-9F_TwodAMU/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3nRQH4N9rgFyf9ltH6fBjHIaeUlcA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rust Code Coverage with Daniel McKenna",
        description: "Allen Wyma talks with Daniel McKenna, a software enginner, about his code coverage tool for Rust projects, Tarpaulin (https://github.com/xd009642/tarpaulin) .\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@01:35] - LLVM (https://llvm.org/) \n     \n       \n  •  [@05:50] - Vectorcast (https://www.vector.com/int/en/products/products-a-z/software/vectorcast/) \n     \n       \n  •  [@07:00] - Cargo-kcov (https://github.com/kennytm/cargo-kcov) \n     \n       \n  •  [@07:38] - Gdb (https://www.gnu.org/software/gdb/) \n     \n       \n  •  [@07:47] - ptrace.2 (https://man7.org/linux/man-pages/man2/ptrace.2.html) \n     \n       \n  •  [@14:40] - Arduino (https://www.arduino.cc/) \n     \n       \n  •  [@15:47] - Probe-rs (https://github.com/probe-rs/probe-rs) \n     \n       \n  •  [@22:42] - Tarpaulin Crater (tater) (https://github.com/xd009642/tater) \n     \n       \n  •  [@23:34] - Tarpaulin-viewer (https://github.com/xd009642/tarpaulin-viewer) \n     \n       \n  •  [@27:51] - ImGui (https://github.com/imgui-rs/imgui-rs) \n     \n       \n  •  [@31:00] - Ndarray (https://github.com/rust-ndarray/ndarray) \n     \n       \n  •  [@32:09] - Is rust a competitor of Julia and Python in terms of machine learning?\n     \n       \n  •  [@36:10] - When did Daniel get into programming?\n     \n       \n  •  [@49:20] - Tips for beginners\n     \n       \n  •  [@53:53] - FiraCode (https://github.com/tonsky/FiraCode) \n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Writing a Debugger (http://system.joekain.com/debugger/) \n     \n       \n  •  Writing a Linux Debugger Setup (https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/) \n     \n       \n  •  Awesome Rust Mentors (https://rustbeginners.github.io/awesome-rust-mentors/) \n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "55 mins",
        remaining_duration: "55 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDBb1VhddMMvY",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/Bb1VhddMMvY/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kXUQLUXAwoSWzp7dOd2GJ_fkdklw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/Bb1VhddMMvY/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kgssOhepXNUg0VKCRblCjqwMJD8g",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "From Zero to Production with Luca Palmieri",
        description: "Allen Wyma talks with Luca Palmieri (https://twitter.com/algo_luca) , a principal engineer at TrueLayer (https://truelayer.com/) , about his book called “Zero To Production in Rust” (https://www.zero2prod.com/) .\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@02:30] - Book ideas\n     \n       \n  •  [@13:20] - Reasons for using Rust in production\n     \n       \n  •  [@10:34] - Asynchronous Programming in Rust (https://rust-lang.github.io/async-book/08_ecosystem/00_chapter.html) \n     \n       \n  •  [@16:45] - Actix Web (https://github.com/actix/actix-web) \n     \n       \n  •  [@32:21] - Challenges in using Rust as backend language\n     \n       \n  •  [@36:30] - What is krustlet (https://krustlet.dev/) ?\n     \n       \n  •  [@46:35] - How is the process of writing the book\n     \n       \n  •  [@54:50] - Rust edition 2021 (https://doc.rust-lang.org/edition-guide/rust-2021/index.html) \n     \n       \n  •  [@57:40] - Rust’s community\n     \n       \n  •  [@59:37] - Rust for Rustaceans (https://nostarch.com/rust-rustaceans) \n     \n       \n  •  [@1:00:26] - Rust in Action (https://www.manning.com/books/rust-in-action) \n     \n       \n  •  [@1:01:34] - Tips for beginners\n     \n     \n\nOther Resources\n\n\n     \n       \n  •  Luca’s blog (https://lpalmieri.com) \n     \n       \n  •  Hexagonal Architecture (https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)) \n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "1 hr 7 mins",
        remaining_duration: "1 hr 7 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED19zJ6uePEdc",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/19zJ6uePEdc/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3mnovYm69z0kIIzeRZj02biIj8Dgg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/19zJ6uePEdc/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3k8v-F4vrNvtS5MFSQo9Nhqownuog",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rust in cURL",
        description: "First time guest host, Allen Wyma talks with Daniel, the original author of cURL, about using Rust in cURL.\n\n\n\n     \n       \n  •  cURL (https://curl.se/)  is a command line tool and library for transferring data with URLs.\n     \n       \n  •  cURL, and its data transfer core, libcurl are both written in C, which is known to be not memory safe.\n     \n       \n  •  While it is almost impossibe to rewrite it into another language, offering a third-party library written in Rust could take a further step forward.\n     \n     \n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nHighlights\n\n\n\n     \n       \n  •  Architecture of cURL & libcurl\n     \n       \n  •  What brought Daniel to Rust? How long has he been using Rust?\n     \n       \n  •  What language was Daniel working in before that?\n     \n       \n  •  Third party libraries written in Rust?\n     \n       \n  •  What benefits does Rust bring to cURL?\n     \n     \n\nResources\n\n\n     \n       \n  •  Curl (https://curl.se/) \n     \n       \n  •  Daniel’s Blog (https://daniel.haxx.se/blog/2021/08/09/nocais-apology/) \n     \n       \n  •  Project Gemini (https://gemini.circumlunar.space/) \n     \n     \n\nTimestamps\n\n\n     \n       \n  •  [@05:10] - cURL 7.78.0 (https://curl.se/download.html) \n     \n       \n  •  [@07:44] - Implementing Protocol\n     \n       \n  •  [@09:25] - HTTP/3\n     \n       \n  •  [@13:30] - Architecture of cURL & libcurl\n     \n       \n  •  [@17:40] - cURL as a hybrid library\n     \n       \n  •  [@19:40] - Replacing C with Rust\n     \n       \n  •  [@34:00] - Experience of using Rust\n     \n       \n  •  [@35:40] - async/.await in rust\n     \n       \n  •  [@40:45] - Anything dislike about Rust?\n     \n       \n  •  [@42:35] - Challenge of integrating with Rust\n     \n       \n  •  [@48:00] - Can Rust help curl survive?\n     \n       \n  •  [@49:10] - Tips for beginners?\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Plangora (https://twitter.com/plangora) \n\n\n\n\nHosts: Allen Wyma (https://twitter.com/allenwyma)",
        total_duration: "55 mins",
        remaining_duration: "55 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDz8FpGOghKY4",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/z8FpGOghKY4/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3laaeMEwwwIZIPirRZ3e9rQ9L8-lA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/z8FpGOghKY4/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kcBtU7JBHesnxpd4h0ZG0OiMJKjw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's New in Rust 1.52 and 1.53",
        description: "Jon and Ben discuss the highlights of the 1.52 and 1.53 releases of Rust.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n[@01:31] - Rust 1.52 (https://blog.rust-lang.org/2021/05/06/Rust-1.52.0.html) \n\n\n\n     \n       \n  •  [@01:31] - Stabilized APIs (https://blog.rust-lang.org/2021/05/06/Rust-1.52.0.html#stabilized-apis) \n     \n       \n  •  [@04:28] - All integer division and remainder APIs made const (https://github.com/rust-lang/rust/pull/80962) \n     \n       \n  •  [@07:45] - Rust 1.52.1 and incremental compilation (https://blog.rust-lang.org/2021/05/10/Rust-1.52.1.html) \n     \n       \n  •  [@11:30] - LLVM 12 (https://github.com/rust-lang/rust/pull/81451) \n         \n          \n                \n       •  Disable “mutable noalias” (https://github.com/rust-lang/rust/issues/84958) \n          \n                \n       •  Bringing Stack Clash Protection to Clang/x86, the Open Source Way (https://blog.llvm.org/posts/2021-01-05-stack-clash-protection/) \n          \n              \n       \n     \n       \n  •  [@16:15] - unsafe_op_in_unsafe_fn lint (https://github.com/rust-lang/rust/pull/79208) \n     \n     \n\n[@23:03] - Rust 1.53 (https://blog.rust-lang.org/2021/06/17/Rust-1.53.0.html) \n\n\n\n     \n       \n  •  [@23:03] - IntoIterator for arrays (https://blog.rust-lang.org/2021/06/17/Rust-1.53.0.html#intoiterator-for-arrays) \n     \n       \n  •  [@26:45] - Unicode identifiers (https://blog.rust-lang.org/2021/06/17/Rust-1.53.0.html#unicode-identifiers) \n     \n       \n  •  [@29:37] - Or patterns (https://blog.rust-lang.org/2021/06/17/Rust-1.53.0.html#or-patterns) \n     \n       \n  •  [@31:05] - Stabilized APIs (https://blog.rust-lang.org/2021/06/17/Rust-1.53.0.html#stabilized-apis) \n         \n          \n                \n       •  BITS associated const on numeric primitives (https://github.com/rust-lang/rust/issues/81654) \n          \n              \n       \n     \n       \n  •  [@36:36] - {f32, f64}::from_str now parse and print special values (NaN, -0) according to IEEE RFC 754. (https://github.com/rust-lang/rust/pull/78618) \n     \n       \n  •  [@38:05] - {f32, f64}::is_subnormal (https://doc.rust-lang.org/stable/std/primitive.f32.html#method.is_subnormal) \n     \n       \n  •  [@41:11] - Cargo changes\n         \n          \n                \n       •  RFC: Make the authors field optional (https://rust-lang.github.io/rfcs/3052-optional-authors-field.html) \n          \n              \n       \n     \n     \n\n[@43:52] - Rust 2021 Edition Preview (https://blog.rust-lang.org/2021/05/11/edition-2021.html) \n\n\n\n     \n       \n  •  [@43:52] - What is an edition?\n     \n       \n  •  [@47:33] - Additions to the prelude (https://blog.rust-lang.org/2021/05/11/edition-2021.html#additions-to-the-prelude) \n     \n       \n  •  [@50:54] - Default Cargo feature resolver (https://blog.rust-lang.org/2021/05/11/edition-2021.html#default-cargo-feature-resolver) \n     \n       \n  •  [@51:49] - IntoIterator for arrays (https://blog.rust-lang.org/2021/05/11/edition-2021.html#intoiterator-for-arrays) \n     \n       \n  •  [@53:09] - Disjoint capture in closures (https://blog.rust-lang.org/2021/05/11/edition-2021.html#disjoint-capture-in-closures) \n     \n       \n  •  [@54:35] - Panic macro consistency (https://blog.rust-lang.org/2021/05/11/edition-2021.html#panic-macro-consistency) \n     \n       \n  •  [@56:00] - Reserving syntax (https://blog.rust-lang.org/2021/05/11/edition-2021.html#reserving-syntax) \n     \n       \n  •  [@1:01:38] - Or patterns in macro_rules (https://blog.rust-lang.org/2021/05/11/edition-2021.html#or-patterns-in-macro_rules) \n     \n       \n  •  [@1:03:16] - Promoting two warnings to hard errors (https://blog.rust-lang.org/2021/05/11/edition-2021.html#promoting-two-warnings-to-hard-errors) \n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Jeremy Jung (https://www.softwaresessions.com) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Ben Striegel (https://twitter.com/bstrie/) \n\n\n\n\nHosts: Jon Gjengset and Ben Striegel\n\n\n\n\nTranscript: Eric Seppanen (https://github.com/ericseppanen)",
        total_duration: "1 hr 7 mins",
        remaining_duration: "1 hr 7 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDigATkjdfC9M",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/igATkjdfC9M/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3mbWRMkRdeOVpaBEyKXtKl17bwMjw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/igATkjdfC9M/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3mP5Fik6Kuvi5_kMAhe_-8ltKTGOw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's New in Rust 1.50 and 1.51",
        description: "Jon and Ben take a look at the features of the Rust 1.50 and 1.51 releases.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n[@01:47] - Rust 1.50 (https://blog.rust-lang.org/2021/02/11/Rust-1.50.0.html) \n\n\n\n     \n       \n  •  [@03:02] - Const Generic Array Indexing (https://blog.rust-lang.org/2021/02/11/Rust-1.50.0.html#const-generic-array-indexing) \n     \n       \n  •  [@04:30] - Const Value Repetition for Arrays (https://blog.rust-lang.org/2021/02/11/Rust-1.50.0.html#const-value-repetition-for-arrays) \n         \n          \n                \n       •  Accidental Stabilization (https://github.com/rust-lang/rust/issues/49147#issuecomment-726796665) \n          \n              \n       \n     \n       \n  •  [@07:15] - Safe Assignment to ManuallyDrop in Unions (https://blog.rust-lang.org/2021/02/11/Rust-1.50.0.html#safe-assignments-to-manuallydropt-union-fields) \n     \n       \n  •  [@09:40] - Niche for File on UNIX (https://blog.rust-lang.org/2021/02/11/Rust-1.50.0.html#a-niche-for-file-on-unix-platforms) \n         \n          \n                \n       •  Niches for Non-Empty Variants (https://github.com/rust-lang/rust/issues/46213) \n          \n                \n       •  Using Padding for Niches (https://github.com/rust-lang/rust/issues/70230) \n          \n              \n       \n     \n       \n  •  [@14:39] - Library Changes (https://blog.rust-lang.org/2021/02/11/Rust-1.50.0.html#library-changes) \n         \n          \n                \n       •  Mara Bos on the journey to bool::then (https://twitter.com/m_ou_se/status/1359941126925537281) \n          \n                \n       •  bool::then PR (https://github.com/rust-lang/rfcs/pull/2757) \n          \n                \n       •  The Clamp RFC (https://rust-lang.github.io/rfcs/1961-clamp.html) \n          \n              \n       \n     \n       \n  •  [@20:27] - Changelog Deep-Dive\n         \n          \n                \n       •  Rust Changelog (https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1500-2021-02-11) \n          \n                \n       •  Cargo Changelog (https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-150-2021-02-11) \n          \n                \n       •  compare_and_swap deprecation (https://github.com/rust-lang/rust/pull/79261) \n          \n                \n       •  Deterministic .crate files (https://github.com/rust-lang/cargo/pull/8864) \n          \n              \n       \n     \n     \n\n[@25:11] - Rust 1.51 (https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html) \n\n\n\n     \n       \n  •  [@25:24] - Const Generics MVP (https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html#const-generics-mvp) \n         \n          \n                \n       •  What Was and Wasn’t Stabilized (https://blog.rust-lang.org/2021/02/26/const-generics-mvp-beta.html) \n          \n              \n       \n     \n       \n  •  [@30:00] - array::IntoIter stabilization (https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html#arrayintoiter-stabilisation) \n         \n          \n                \n       •  Implementing IntoIterator for [T; N] (https://github.com/rust-lang/rust/pull/65819) \n          \n              \n       \n     \n       \n  •  [@37:53] - Cargo’s New Feature Resolver (https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html#cargos-new-feature-resolver) \n         \n          \n                \n       •  Resolver v2 RFC (https://rust-lang.github.io/rfcs/2957-cargo-features2.html) \n          \n                \n       •  Resolver v2 in Cargo Book (https://doc.rust-lang.org/nightly/cargo/reference/features.html#feature-resolver-version-2) \n          \n                \n       •  Issues Solved by New Resolver (https://github.com/rust-lang/cargo/pull/8997) \n          \n              \n       \n     \n       \n  •  [@45:26] - Splitting Debug Information (https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html#splitting-debug-information) \n         \n          \n                \n       •  Why This Was Complicated (https://github.com/rust-lang/rust/issues/79361) \n          \n                \n       •  split-debuginfo option (https://doc.rust-lang.org/nightly/rustc/codegen-options/index.html#split-debuginfo) \n          \n              \n       \n     \n       \n  •  [@51:34] - Stabilized APIs (https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html#stabilized-apis) \n         \n          \n                \n       •  offset_of! is (was) Unsound (https://github.com/Gilnaa/memoffset/issues/24) \n          \n                \n       •  ptr::addr_of! (https://doc.rust-lang.org/stab...",
        total_duration: "1 hr 18 mins",
        remaining_duration: "1 hr 18 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDC-VAa2b_qhI",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/C-VAa2b_qhI/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kqxBKZxkVDkQC1fZDLI0s9J01wxQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/C-VAa2b_qhI/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nX6jMCERgTNpuSCERs4aq9sfzNeA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's New in Rust 1.48 and 1.49",
        description: "Jon and Ben take a look at the features of the Rust 1.48 and 1.49 releases.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n[@01:10] - Rust 1.48 (https://blog.rust-lang.org/2020/11/19/Rust-1.48.html) \n\n\n\n     \n       \n  •  [@01:10] - Easier linking in Rustdoc (https://blog.rust-lang.org/2020/11/19/Rust-1.48.html#easier-linking-in-rustdoc) \n     \n       \n  •  [@03:57] - Adding search aliases in Rustdoc (https://blog.rust-lang.org/2020/11/19/Rust-1.48.html#adding-search-aliases) \n     \n       \n  •  [@07:03] - Implement TryFrom for fixed-length arrays (https://blog.rust-lang.org/2020/11/19/Rust-1.48.html#library-changes) \n         \n          \n                \n       •  slice::as_chunks (https://doc.rust-lang.org/std/primitive.slice.html#method.as_chunks) \n          \n              \n       \n     \n       \n  •  [@10:51] - future::ready and future::pending (https://doc.rust-lang.org/std/future/index.html#functions) \n     \n       \n  •  [@15:21] - More stdlib APIs made const\n     \n       \n  •  [@18:05] - mem::uninitialized will now panic if any inner types inside a struct or enum disallow zero-initialization (https://github.com/rust-lang/rust/pull/71274/) \n     \n       \n  •  [@20:18] - When trait bounds on associated types or opaque types are ambiguous, the compiler no longer makes an arbitrary choice on which bound to use (https://github.com/rust-lang/rust/issues/54121/) \n     \n     \n\n[@24:20] - Rust 1.49 (https://blog.rust-lang.org/2020/12/31/Rust-1.49.0.html) \n\n\n\n     \n       \n  •  [@24:20] - 64-bit ARM Linux reaches Tier 1 (https://blog.rust-lang.org/2020/12/31/Rust-1.49.0.html#64-bit-arm-linux-reaches-tier-1) \n     \n       \n  •  [@30:20] - Test framework captures output in threads (https://blog.rust-lang.org/2020/12/31/Rust-1.49.0.html#test-framework-captures-output-in-threads) \n     \n       \n  •  [@33:36] - Library changes (https://blog.rust-lang.org/2020/12/31/Rust-1.49.0.html#library-changes) \n         \n          \n                \n       •  poll::is_ready and poll::is_pending made const (https://doc.rust-lang.org/stable/std/task/enum.Poll.html#method.is_ready) \n          \n              \n       \n     \n       \n  •  [@34:36] - You can now bind by reference and by move in patterns (https://github.com/rust-lang/rust/pull/76119) \n     \n       \n  •  [@38:09] - Unions can now implement Drop, and you can now have a field in a union with ManuallyDrop (https://github.com/rust-lang/rust/pull/77547) \n     \n     \n\n[@42:00] - Rust Survey 2020 Results (https://blog.rust-lang.org/2020/12/16/rust-survey-2020.html) \n\n\n\n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: T.J. Telan (https://tjtelan.com) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Ben Striegel (https://twitter.com/bstrie) \n\n\n\n\nHosts: Jon Gjengset and Ben Striegel",
        total_duration: "44 mins",
        remaining_duration: "44 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDFXYC3LLTc28",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/FXYC3LLTc28/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3nge0qyZ4aIzE0i0nvkRyk20j0Lkw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/FXYC3LLTc28/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3nSd1Guho-gu4QjHjTOog_q9wVamw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's New in Rust 1.46 and 1.47",
        description: "Jon and Ben take a look at the features of Rust 1.46 and 1.47.\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n[@01:55] - Rust 1.46 (https://blog.rust-lang.org/2020/08/27/Rust-1.46.0.html) \n\n\n\n     \n       \n  •  [@01:55] - const fn improvements (https://blog.rust-lang.org/2020/08/27/Rust-1.46.0.html#const-fn-improvements) \n     \n       \n  •  [@08:38] - The track_caller attribute (https://blog.rust-lang.org/2020/08/27/Rust-1.46.0.html#track_caller) \n     \n       \n  •  [@11:51] - Minor changes (https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1460-2020-08-27) \n         \n          \n                \n       •  1.46 pre-release testing (https://blog.rust-lang.org/inside-rust/2020/08/24/1.46.0-prerelease.html) \n          \n              \n       \n     \n     \n\n[@21:46] - Rust 1.47 (https://blog.rust-lang.org/2020/10/08/Rust-1.47.html) \n\n\n\n     \n       \n  •  [@21:46] - Traits on larger arrays (https://blog.rust-lang.org/2020/10/08/Rust-1.47.html#traits-on-larger-arrays) \n         \n          \n                \n       •  Tracking Issue for min_const_generics (https://github.com/rust-lang/rust/issues/74878) \n          \n              \n       \n     \n       \n  •  [@29:14] - Shorter backtraces (https://blog.rust-lang.org/2020/10/08/Rust-1.47.html#shorter-backtraces) \n     \n       \n  •  [@30:26] - LLVM 11 (https://blog.rust-lang.org/2020/10/08/Rust-1.47.html#llvm-11) \n     \n       \n  •  [@32:07] - Control Flow Guard on Windows (https://blog.rust-lang.org/2020/10/08/Rust-1.47.html#control-flow-guard-on-windows) \n     \n       \n  •  [@34:28] - Library changes (https://blog.rust-lang.org/2020/10/08/Rust-1.47.html#library-changes) \n         \n          \n                \n       •  The Tau Manifesto (https://tauday.com/tau-manifesto) \n          \n              \n       \n     \n       \n  •  [@40:04] - Minor changes (https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1470-2020-10-08) \n         \n          \n                \n       •  SemVer Compatibility Guide (https://doc.rust-lang.org/cargo/reference/semver.html) \n          \n                \n       •  Announcing the Error Handling Project Group (https://blog.rust-lang.org/inside-rust/2020/09/18/error-handling-wg-announcement.html) \n          \n                \n       •  Announcing the Portable SIMD Project Group (https://blog.rust-lang.org/inside-rust/2020/09/29/Portable-SIMD-PG.html) \n          \n              \n       \n     \n     \n\n\n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Cole (https://twitch.tv/refactorordie) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Ben Striegel (https://twitter.com/bstrie) \n\n\n\n\nHosts: Jon Gjengset (https://twitter.com/jonhoo/)  and Ben Striegel (https://twitter.com/bstrie)",
        total_duration: "49 mins",
        remaining_duration: "49 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDUOPI2ZgSE5c",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/UOPI2ZgSE5c/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3kVdV90gslgHRWe6RY10wMteWVxfg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/UOPI2ZgSE5c/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3kzFX9lQYO5u7C-aLbVzmFQQ3zJnQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "WebAssembly on the Server with Krustlet",
        description: "Taylor Thomas (https://twitter.com/_oftaylor)  explains how Krustlet (https://github.com/deislabs/krustlet)  runs WebAssembly modules in Kubernetes and why it’s a promising option for the future of server side applications.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help create the podcast itself!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:55] - Kubernetes\n     \n       \n  •  [@07:37] - WebAssembly\n     \n       \n  •  [@12:06] - WebAssembly Runtimes and WASI Specification\n     \n       \n  •  [@15:42] - WebAssembly vs Containers vs Native Binaries\n     \n       \n  •  [@25:11] - Krustlet and the case for writing it in Rust\n     \n       \n  •  [@30:52] - Missing APIs in WASI\n     \n       \n  •  [@33:38] - Wascc vs Wasmtime runtimes\n     \n       \n  •  [@38:15] - Rust ecosystem for Kubernetes and WebAssembly\n     \n       \n  •  [@40:23] - Comparing other languages to Rust\n     \n       \n  •  [@45:09] - Rust learning curve, experiences as a beginner\n     \n       \n  •  [@53:16] - Next steps for Krustlet and WebAssembly\n     \n     \n\nReferenced Resources\n\n\n\n     \n       \n  •  Krustlet (https://github.com/deislabs/krustlet) \n     \n       \n  •  Kubernetes (https://kubernetes.io/) \n     \n       \n  •  Open Container Initiative (https://opencontainers.org/) \n     \n       \n  •  WebAssembly (https://webassembly.org/) \n     \n       \n  •  WASI (https://wasi.dev/) \n     \n       \n  •  Wasmtime (https://wasmtime.dev/) \n     \n       \n  •  waSCC (https://wascc.dev/) \n     \n       \n  •  WebAssembly meets Kubernetes with Krustlet (https://cloudblogs.microsoft.com/opensource/2020/04/07/announcing-krustlet-kubernetes-rust-kubelet-webassembly-wasm/) \n     \n       \n  •  Introducing Krustlet, the WebAssembly Kubelet (https://deislabs.io/posts/introducing-krustlet/) \n     \n       \n  •  Kubernetes: A Rusty Friendship (https://deislabs.io/posts/kubernetes-a-rusty-friendship/) \n     \n       \n  •  The Safety Boat: Kubernetes and Rust (https://msrc-blog.microsoft.com/2020/04/29/the-safety-boat-kubernetes-and-rust/) \n     \n       \n  •  A Heaping Helping of Stacks (https://deislabs.io/posts/a-heaping-helping-of-stacks/) \n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Jeremy Jung (https://www.softwaresessions.com) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Jeremy Jung\n\n\n\n\nHosts: Jeremy Jung\n\n\n\n\nGuests: Taylor Thomas (https://twitter.com/_oftaylor)",
        total_duration: "1 hr 3 mins",
        remaining_duration: "1 hr 3 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED_TcJNDvQNvs",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/_TcJNDvQNvs/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3kKykQsogyTWiqO-lYnae395cFYLA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/_TcJNDvQNvs/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3mosx7FXvHwolEXIZFA08PLdmfdtA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "RedisJSON",
        description: "Jeremy talks with Christoph Zimmermann about Redislabs’ new JSON module, which is written in Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help create the podcast itself!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@15:12] - Why Rust\n     \n       \n  •  [@18:57] - Mentioning Microsoft Presentation On Rust\n     \n       \n  •  [@19:25] - Jeremy - Clarifying The Benefits Of Rust On Developer Productivity Compared To C++\n     \n       \n  •  [@20:23] - Response To Productivity 00:21:12: Checking At Compile Time Helps\n     \n       \n  •  [@23:29] - How have you found Rust as a Language For Interacting With Other Languages?\n     \n       \n  •  [@24:28] - Were Most Bugs Around Unsafe Blocks?\n     \n       \n  •  [@25:42] - Do You Think Rust Had Future With Redis Server?\n     \n       \n  •  [@26:45] - Redis Labs Is Looking To Implement Further Modules In Rust Because Of Redis SDK\n     \n       \n  •  [@27:39] - Overcoming Rust Learning Curve\n     \n       \n  •  [@28:25] - Coming From 20 Years Of C To Rust\n     \n       \n  •  [@28:52] - Jeremy - Rust As First Language\n     \n       \n  •  [@31:30] - Comparing Languages\n     \n       \n  •  [@32:24] - What Might An Application Look Like That Uses Redis-Json?\n     \n       \n  •  [@33:45] - Performance Differences With Redis JSON 2\n     \n       \n  •  [@35:14] - How Would You Overcome Rust’s Overhead Compared To C?\n     \n       \n  •  [@36:32] - Do You Think (Concurrency Will Present Itself More Often In Future Redis Modules)?\n     \n       \n  •  [@37:54] - Could Redis Move Towards A More Concurrent Multi-threaded Database?\n     \n       \n  •  [@40:05] - What The Redis Community Does Do With Multicore To Increase Throughput\n     \n       \n  •  [@43:27] - How Did Redis-JSON 2 Leverage Rust’s Type System?\n     \n       \n  •  [@44:53] - Time Check\n     \n       \n  •  [@45:10] - End Question: Distro & Editors Of Choice\n     \n       \n  •  [@46:40] - ARM & Apple Chips\n     \n       \n  •  [@48:17] - More Redis Resources And Community\n     \n     \n\nReferenced Resources\n\n\n\n     \n       \n  •  Christoph’s Podcast (https://linuxinlaws.eu/) \n     \n       \n  •  Christoph’s FOSDEM Talk (https://ftp.osuosl.org/pub/fosdem/2020/K.3.401/rust_redisjson.webm) \n     \n       \n  •  RedisJSON on GitHub (https://github.com/RedisJSON/RedisJSON2) \n     \n       \n  •  Redislabs (https://university.redislabs.com/) \n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Cole (https://twitch.tv/refactorordie) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Cole and Jeremy Webb\n\n\n\n\nHosts: Jeremy Webb\n\n\n\n\nGuests: Chrisoph Zimmermann (https://twitter.com/7immermann/)",
        total_duration: "49 mins",
        remaining_duration: "49 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDBuLs4HyeP0U",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/BuLs4HyeP0U/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3l-AJXyY43-NIHpDYx1chjhPfALiQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/BuLs4HyeP0U/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nOK_bAFXXszB6uFI2-T4rgaC3CpQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's New in Rust 1.44 and 1.45",
        description: "Jon and Ben examine the features of Rust 1.44 and Rust 1.45.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n[@01:21] - Rust 1.44 (https://blog.rust-lang.org/2020/06/04/Rust-1.44.0.html)  (Detailed Release Notes (https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1440-2020-06-04) )\n\n\n\n     \n       \n  •  [@01:50] - cargo tree subcommand (https://github.com/rust-lang/cargo/pull/8062/) \n     \n       \n  •  [@04:52] - async/await in #[no_std] contexts (https://github.com/rust-lang/rust/pull/69033/) \n     \n       \n  •  [@12:16] - Unicode 13 is now supported (https://github.com/rust-lang/rust/pull/69929/) \n     \n       \n  •  [@17:16] - rustc now respects the -C codegen-units flag in incremental mode (https://github.com/rust-lang/rust/pull/70156/) \n     \n       \n  •  [@18:47] - Special cased vec![] to map directly to Vec::new() (https://github.com/rust-lang/rust/pull/70632/) \n     \n     \n\n[@28:51] - Rust 1.45 (https://blog.rust-lang.org/2020/07/16/Rust-1.45.0.html) \n\n\n\n     \n       \n  •  [@29:14] - Fixing an unsoundness in float to integer casts (https://blog.rust-lang.org/2020/07/16/Rust-1.45.0.html#fixing-unsoundness-in-casts) \n     \n       \n  •  [@39:16] - Stabilizing function-like procedural macros in expressions, patterns, and statements (https://blog.rust-lang.org/2020/07/16/Rust-1.45.0.html#stabilizing-function-like-procedural-macros-in-expressions-patterns-and-statements) \n     \n       \n  •  \n         \n     \n     [@43:29] - str::strip_prefix (https://doc.rust-lang.org/std/primitive.str.html#method.strip_prefix)  and str::strip_suffix (https://doc.rust-lang.org/std/primitive.str.html#method.strip_suffix) \n     \n       \n     \n       \n  •  Bonus: Opening up the Rust Core Team agenda (https://blog.rust-lang.org/inside-rust/2020/07/27/opening-up-the-core-team-agenda.html) \n         \n          \n                \n       •  See also: The Inside Rust Blog (https://blog.rust-lang.org/inside-rust/index.html) \n          \n              \n       \n     \n     \n\n\n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Jeremy Jung (https://www.softwaresessions.com/) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Ben Striegel (https://twitter.com/bstrie) \n\n\n\n\nHosts: Jon Gjengset and Ben Striegel",
        total_duration: "46 mins",
        remaining_duration: "46 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDuWBAR6P9fm4",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/uWBAR6P9fm4/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3n_1rqPVZZb8Dv-vu4XRN8rN1VlZA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/uWBAR6P9fm4/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3lrFd1mSeQkkv9Lg8f11MSGh5lMsA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 352",
        description: "Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 352, published on August 18, 2020, as well as short interviews with upcoming RustConf speakers Harrison Bachrach, Esteban Kuber, and Jam.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nReferenced resources\n\n\n\n     \n       \n  •  Laying the foundation for Rust’s future (https://blog.rust-lang.org/2020/08/18/laying-the-foundation-for-rusts-future.html) \n     \n       \n  •  Learning Rust: The Compiler is your Friend (https://ferrous-systems.com/blog/the-compiler-is-your-friend/) \n     \n       \n  •  Why Rust is a great fit for embedded software (https://tweedegolf.nl/blog/39/why-rust-is-a-great-fit-for-embedded-software) \n     \n       \n  •  Why Rust’s Unsafe Works (https://jam1.re/blog/why-rusts-unsafe-works) \n     \n       \n  •  I am a Java, C#, C or C++ developer, time to do some Rust (https://fasterthanli.me/articles/i-am-a-java-csharp-c-or-cplusplus-dev-time-to-do-some-rust) \n     \n       \n  •  Async Unicorns love Rust (https://blog.kdubovikov.ml/articles/rust/async-unicorns-love-rust) \n     \n       \n  •  Linux Packages For Rust (2/3) - Building with GitHub Actions using Custom Actions and Docker Container Images (https://ebbflow.io/blog/vending-linux-2) \n     \n       \n  •  Rust RFCs Repo (https://github.com/rust-lang/rfcs) \n     \n       \n  •  RustConf (https://rustconf.com/) \n     \n       \n  •  This Week in Rust GitHub Repo (https://github.com/emberian/this-week-in-rust/) \n     \n     \n\nCredits\n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Nell Shamrell-Harrington (https://twitter.com/nellshamrell) \n\n\n\n\nHosts: Nell Shamrell-Harrington",
        total_duration: "20 mins",
        remaining_duration: "20 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDflDUNoSFMv8",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/flDUNoSFMv8/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3lgXfhYo52r4F04dnbGC27P87CShA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/flDUNoSFMv8/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3lr5pBFgJoHuXO_WEpPmbRIA0XJLw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 351",
        description: "Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 351, published on August 11, 2020, as well as short interviews with upcoming RustConf speakers Micah Tigley, Rebecca Turner, and Samuel Lim.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nReferenced resources\n\n\n\n     \n       \n  •  Announcing Rust 1.45.1 (https://blog.rust-lang.org/2020/07/30/Rust-1.45.1.html) \n     \n       \n  •  Announcing Rust 1.45.2 (https://blog.rust-lang.org/2020/08/03/Rust-1.45.2.html) \n     \n       \n  •  Headcrab: July 2020 progress report (https://headcrab.rs/2020/07/31/july-update.html) \n     \n       \n  •  This Month in Rust OSDev (July 2020) (https://rust-osdev.com/this-month/2020-07/) \n     \n       \n  •  Learning Rust: Mindsets and Expectations (https://ferrous-systems.com/blog/mindsets-and-expectations/) \n     \n       \n  •  Blue Team Rust: What is “Memory Safety”, really? (https://tiemoko.com/blog/blue-team-rust/) \n     \n       \n  •  Creating Linux Packages for Rust Projects (1/2) (https://ebbflow.io/blog/vending-linux-1) \n     \n       \n  •  Reverse Engineering a USB Device with Rust (https://gill.net.in/posts/reverse-engineering-a-usb-device-with-rust/) \n     \n       \n  •  Some Learnings from Implementing a Normalizing Rust Representer (https://seanchen1991.github.io/posts/rust-representer/) \n     \n       \n  •  [video]Learning Rust by Working Through the Rustlings Exercises (https://egghead.io/playlists/learning-rust-by-solving-the-rustlings-exercises-a722) \n     \n       \n  •  Rust Language Cheat Sheet 2019 -＞ 2020 (https://github.com/ralfbiedert/cheats.rs/issues/100) \n     \n       \n  •  [audio]The State of Rust 2 with Alex Chrichton (https://anchor.fm/the-virtual-world/episodes/Ep-7--The-State-of-Rust-2-with-Alex-Crichton-ehjpsq) \n     \n       \n  •  [audio]The State of Rust with Steve Klabnik (https://anchor.fm/the-virtual-world/episodes/Ep-6--The-State-of-Rust-with-Steve-Klabnik-ehf8mk) \n     \n       \n  •  RFC: ‘C unwind’ ABI (https://github.com/rust-lang/rfcs/pull/2945) \n     \n       \n  •  Procedural vtables and wide ptr metadata (https://github.com/rust-lang/rfcs/pull/2967) \n     \n       \n  •  Edition 2021 and beyond (https://github.com/rust-lang/rfcs/pull/2966) \n     \n     \n\nCredits\n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Nell Shamrell-Harrington (https://twitter.com/nellshamrell) \n\n\n\n\nHosts: Nell Shamrell-Harrington",
        total_duration: "19 mins",
        remaining_duration: "19 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDg8rrv50CK18",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/g8rrv50CK18/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3napUsfpCQbWaDg1rsa9tu2wzrIBQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/g8rrv50CK18/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3nL5yqug0LVQ0I1rrQ7K6PIkLTRxw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "RustFest 2019 Interview Series: Burnout in Open Source Software; The Rust Roadmap",
        description: "Two more long-awaited interviews from RustFest 2019: Katharina Fey (https://twitter.com/spacekookie)  on the phenomenon of burnout in software and in open source communities and Florian Gilcher (https://twitter.com/Argorak)  on Rust’s annual roadmaps.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n[@00:50] Part 1: Burnout w/ Katharina Fey\n\n\n\n     \n       \n  •  [@01:54] - How common is burnout in software?\n     \n       \n  •  [@03:24] - How does burnout manifest in volunteer endeavors like open source software?\n     \n       \n  •  [@08:10] - How does rotation of responsibilities alleviate burnout?\n     \n       \n  •  [@13:41] - What communities succeed at combating burnout?\n     \n       \n  •  [@16:44] - Final thoughts on burnout and governance\n     \n     \n\n[@19:50] Part 2: The Rust Roadmap w/ Florian Gilcher\n\n\n\n     \n       \n  •  Rust 2019 roadmap (https://blog.rust-lang.org/2019/04/23/roadmap.html) \n     \n       \n  •  Rust 2020 roadmap (https://github.com/rust-lang/rfcs/blob/master/text/2857-roadmap-2020.md) \n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Eddy Petrisor (https://twitter.com/eddypetrisor) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Ben Striegel (https://twitter.com/bstrie)",
        total_duration: "49 mins",
        remaining_duration: "49 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDcfMtYMLaMwA",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/cfMtYMLaMwA/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3kxtd6Wf62XZ6d-16NX0zKfHCCHrQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/cfMtYMLaMwA/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3nIasA6K_FpToXJQPez_TAdYE0stg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 350",
        description: "Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 350, published on July 28, 2020, as well as short interviews with upcoming RustConf speakers Siân Griffin, Jane Lusby, and Ashley Hauck.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nReferenced resources\n\n\n\n     \n       \n  •  Announcing Rust 1.45.1 (https://blog.rust-lang.org/2020/07/30/Rust-1.45.1.html) \n     \n       \n  •  Announcing Rust 1.45.2 (https://blog.rust-lang.org/2020/08/03/Rust-1.45.2.html) \n     \n       \n  •  Headcrab: July 2020 progress report (https://headcrab.rs/2020/07/31/july-update.html) \n     \n       \n  •  This Month in Rust OSDev (July 2020) (https://rust-osdev.com/this-month/2020-07/) \n     \n       \n  •  Learning Rust: Mindsets and Expectations (https://ferrous-systems.com/blog/mindsets-and-expectations/) \n     \n       \n  •  Blue Team Rust: What is “Memory Safety”, really? (https://tiemoko.com/blog/blue-team-rust/) \n     \n       \n  •  Creating Linux Packages for Rust Projects (1/2) (https://ebbflow.io/blog/vending-linux-1) \n     \n       \n  •  Reverse Engineering a USB Device with Rust (https://gill.net.in/posts/reverse-engineering-a-usb-device-with-rust/) \n     \n       \n  •  Some Learnings from Implementing a Normalizing Rust Representer (https://seanchen1991.github.io/posts/rust-representer/) \n     \n       \n  •  [video]Learning Rust by Working Through the Rustlings Exercises (https://egghead.io/playlists/learning-rust-by-solving-the-rustlings-exercises-a722) \n     \n       \n  •  Rust Language Cheat Sheet 2019 -＞ 2020 (https://github.com/ralfbiedert/cheats.rs/issues/100) \n     \n       \n  •  [audio]The State of Rust 2 with Alex Chrichton (https://anchor.fm/the-virtual-world/episodes/Ep-7--The-State-of-Rust-2-with-Alex-Crichton-ehjpsq) \n     \n       \n  •  [audio]The State of Rust with Steve Klabnik (https://anchor.fm/the-virtual-world/episodes/Ep-6--The-State-of-Rust-with-Steve-Klabnik-ehf8mk) \n     \n       \n  •  RFC: ‘C unwind’ ABI (https://github.com/rust-lang/rfcs/pull/2945) \n     \n       \n  •  Procedural vtables and wide ptr metadata (https://github.com/rust-lang/rfcs/pull/2967) \n     \n       \n  •  Edition 2021 and beyond (https://github.com/rust-lang/rfcs/pull/2966) \n     \n     \n\nCredits\n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Nell Shamrell-Harrington (https://twitter.com/nellshamrell) \n\n\n\n\nHosts: Nell Shamrell-Harrington",
        total_duration: "23 mins",
        remaining_duration: "23 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED9sD6YuBEjU8",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/9sD6YuBEjU8/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3lnEvNi9-1yO0spLER-FLsvrgKiTg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/9sD6YuBEjU8/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3kutLWJKima_EJzLkIEZ2DGJPCTdA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 349",
        description: "Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 349, published on July 28, 2020.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nReferenced resources\n\n\n\n     \n       \n  •  This Week in Rust #349 (https://this-week-in-rust.org/blog/2020/07/28/this-week-in-rust-349/) \n     \n       \n  •  Opening up the Core Team agenda (https://blog.rust-lang.org/inside-rust/2020/07/27/opening-up-the-core-team-agenda.html) \n     \n       \n  •  Rust’s CI is Moving to GitHub Actions (https://blog.rust-lang.org/inside-rust/2020/07/23/rust-ci-is-moving-to-github-actions.html) \n     \n       \n  •  IntelliJ Rust Changelog #127 (https://intellij-rust.github.io/2020/07/27/changelog-127.html) \n     \n       \n  •  Rust Analyzer Changelog #35 (https://rust-analyzer.github.io/thisweek/2020/07/27/changelog-35.html) \n     \n       \n  •  Notes on A Smaller Rust (https://without.boats/blog/notes-on-a-smaller-rust/) \n     \n       \n  •  Rust Explained using Easy English (https://github.com/Dhghomon/easy_rust) \n     \n       \n  •  Tutorial for Tokio and async Rust (https://tokio.rs/tokio/tutorial) \n     \n       \n  •  Cell, RefCell, and Interior Mutability in Rust (https://badboi.dev/rust/2020/07/17/cell-refcell.html) \n     \n       \n  •  Async/Await for AVR with Rust (https://lights0123.com/blog/2020/07/25/async-await-for-avr-with-rust/) \n     \n       \n  •  Making a Game in 48 hours with Rust and WebAssembly (https://ianjk.com/rust-gamejam/) \n     \n       \n  •  Inline assembly (https://github.com/rust-lang/rfcs/pull/2873) \n     \n       \n  •  Add a new #[instruction_set(...)] attribute for supporting per-function instruction set changes (https://github.com/rust-lang/rfcs/pull/2867) \n     \n       \n  •  RFC: ‘C unwind’ ABI (https://github.com/rust-lang/rfcs/pull/2945) \n     \n       \n  •  RFC: Add JSON backend to Rustdoc (https://github.com/rust-lang/rfcs/pull/2963) \n     \n       \n  •  RFC: Named arguments (https://github.com/rust-lang/rfcs/pull/2964) \n     \n       \n  •  Establish a new error handling project group (https://github.com/rust-lang/rfcs/pull/2965) \n     \n     \n\nCredits\n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Nell Shamrell-Harrington (https://twitter.com/nellshamrell) \n\n\n\n\nHosts: Nell Shamrell-Harrington",
        total_duration: "10 mins 23 secs",
        remaining_duration: "10 mins 23 secs",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDnlhsPQHKH4Q",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/nlhsPQHKH4Q/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3k79yOXioSDZdnKh4tN-kfwbAlB_w",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/nlhsPQHKH4Q/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3mnohWDsFN7G3WUbEBfzsUDwTW1Uw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 348",
        description: "Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 348, published on July 21, 2020.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nReferenced resources\n\n\n\n     \n       \n  •  Announcing Rust 1.45.0 (https://blog.rust-lang.org/2020/07/16/Rust-1.45.0.html) \n     \n       \n  •  Learn how to make a Sokoban game in Rust (https://sokoban.iolivia.me/c01-00-intro.html) \n     \n       \n  •  Clear Explanation of Rust’s module system (http://www.sheshbabu.com/posts/rust-module-system/) \n     \n       \n  •  Rewriting FORTRAN Software in Rust (https://mckeogh.tech/post/shallow-water/) \n     \n       \n  •  Writing a kernel driver with Rust (https://not-matthias.github.io/kernel-driver-with-rust/) \n     \n       \n  •  Packaging and Vendoring Production Rust Software - Windows (https://ebbflow.io/blog/vending-win) \n     \n       \n  •  Async Rust, but less intimidating (https://dev.to/dotxlem/async-rust-but-less-intimidating-2c13) \n     \n       \n  •  Rust: What is Ownership and Borrowing (https://www.youtube.com/watch?v=79phqVpE7cU) \n     \n       \n  •  Boiled Down Crate: OnceCell (https://www.youtube.com/watch?v=YBG8QTO8fNI&feature=youtu.be) \n     \n       \n  •  Curso Rust (https://www.twitch.tv/videos/681897847) \n     \n       \n  •  zbus is looking for contributors (https://gitlab.freedesktop.org/zeenix/zbus) \n     \n       \n  •  just: Add extensible recipe and justfile attributes (https://github.com/casey/just/issues/604) \n     \n       \n  •  libnet: Segfault in icmp send (https://github.com/libpnet/libpnet/issues/449) \n     \n       \n  •  rust: fs::remove_dir_all rarely succeeds for large directories on window (https://github.com/rust-lang/rust/issues/29497) \n     \n       \n  •  RFC: C unwind ABI (https://github.com/rust-lang/rfcs/pull/2945) \n     \n       \n  •  Add oneof configuration predicate to support exclusive features (https://github.com/rust-lang/rfcs/pull/2962) \n     \n       \n  •  RFC: Promote aarch64-unknown-linux-gnu to a Tier-1 Rust target (https://github.com/rust-lang/rfcs/pull/2959) \n     \n       \n  •  Add Drop::poll_drop_ready for asynchronous destructors (https://github.com/rust-lang/rfcs/pull/2958) \n     \n       \n  •  Stabilize Cargo’s new feature resolver (https://github.com/rust-lang/rfcs/pull/2957) \n     \n       \n  •  Add the partial-closure-args RFC (https://github.com/rust-lang/rfcs/pull/2956) \n     \n     \n\nCredits\n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Nell Shamrell-Harrington (https://twitter.com/nellshamrell) \n\n\n\n\nHosts: Nell Shamrell-Harrington",
        total_duration: "11 mins 33 secs",
        remaining_duration: "11 mins 33 secs",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDKp1BHGLFwQQ",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/Kp1BHGLFwQQ/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3ljjmhsKyBlM7mOZSaj4cMlxAVHRQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/Kp1BHGLFwQQ/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3muDOqQNjwtjtuxLh1u0LXgF-lDvA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 347",
        description: "Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 347, published on July 14, 2020.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nReferenced resources\n\n\n\n     \n       \n  •  Announcing Rustup 1.22.1 (https://blog.rust-lang.org/2020/07/08/Rustup-1.22.1.html) \n     \n       \n  •  Lang Team Design Meeting: Path to Membership (https://blog.rust-lang.org/inside-rust/2020/07/09/lang-team-path-to-membership.html) \n     \n       \n  •  Perspective on Rust Community Moderation (https://www.reddit.com/r/rust/comments/hnfnti/where_is_the_rust_community_allowed_to_talk_about/fxf65nf/) \n     \n       \n  •  The Soul of a New Debugger (https://nbaksalyar.github.io/2020/07/12/soul-of-a-new-debugger.html) \n     \n       \n  •  Async Interview #8: Stjepan Glavina (https://smallcultfollowing.com/babysteps/blog/2020/07/09/async-interview-8-stjepan-glavina/) \n     \n       \n  •  Using RabbitMQ in Rust (https://www.zupzup.org/rmq-in-rust/) \n     \n       \n  •  Rust Analyzer Changelog #33 (https://rust-analyzer.github.io/thisweek/2020/07/13/changelog-33.html) \n     \n       \n  •  IntelliJ Rust Changelog #126 (https://intellij-rust.github.io/2020/07/13/changelog-126.html) \n     \n       \n  •  This Month in Rust OSDev (https://rust-osdev.com/this-month/2020-06/) \n     \n       \n  •  Rust es orientado a objeto? (https://emanuelpeg.blogspot.com/2020/07/rust-es-orientado-objeto.html#.XwsegbMr_EQ.reddit) \n     \n       \n  •  Fuzzing Rust with Shnatsel (https://medium.com/@social_62682/fuzzing-rust-with-shnatsel-podcast-e1fa0dbc28a) \n     \n       \n  •  Two Sum Problem - Leet Code + Rust (https://www.youtube.com/watch?v=CMlHbAGkXjA&list=PLK_g1a_cAfaZuTXzDoQUAFEHCalKSCv9G&index=2) \n     \n       \n  •  Rust and WebAssembly - EdgeXR @ Netlight (https://www.youtube.com/watch?v=dmbqpg5BuBY) \n     \n       \n  •  Opt-in Stable Trait VTables (https://github.com/rust-lang/rfcs/pull/2955) \n     \n     \n\nCredits\n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Nell Shamrell-Harrington (https://twitter.com/nellshamrell) \n\n\n\n\nHosts: Nell Shamrell-Harrington",
        total_duration: "8 mins 35 secs",
        remaining_duration: "8 mins 35 secs",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDvDMZWiYOT2Q",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/vDMZWiYOT2Q/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3mZr7koKuJIVRNXYh_J4ILx3jgykA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/vDMZWiYOT2Q/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3l2bStnpQbxsqTiyXMadlFedwA0KA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 346",
        description: "Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWiR 346, published on July 6, 2020.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nReferenced resources\n\n\n\n     \n       \n  •  Announcing Rustup 1.22.0 (https://blog.rust-lang.org/2020/07/06/Rustup-1.22.0.html) \n     \n       \n  •  Ownership of the standard library implementation (https://blog.rust-lang.org/inside-rust/2020/07/02/Ownership-Std-Implementation.html) \n     \n       \n  •  Choosing a Rust web framework, 2020 edition (https://www.lpalmieri.com/posts/2020-07-04-choosing-a-rust-web-framework-2020-edition/) \n     \n       \n  •  Simple Rocket Web Framework Tutorial POST Request (https://frogtok.com/simple-rocket-web-framework-tutorial-part-2in/) \n     \n       \n  •  Transpiling a Kernel Module to Rust: The Good, the Bad and the Ugly (https://immunant.com/blog/2020/06/kernel_modules/) \n     \n       \n  •  Ringbahn II: The Central State Machine (https://without.boats/blog/ringbahn-ii/) \n     \n       \n  •  What is a Dangling Pointer? (https://medium.com/swlh/what-is-a-dangling-pointer-2773d49cf86c) \n     \n       \n  •  Super Hero Rust fuzzing (https://blog.firosolutions.com/2020/07/superhero-rust-fuzzing/) \n     \n       \n  •  RFC: IndexGet and IndexSet (https://github.com/rust-lang/rfcs/pull/2953) \n     \n       \n  •  RFC: Add a new #[instruction_set(...)] attribute for supporting per-function instruction set changes (https://github.com/rust-lang/rfcs/pull/2867) \n     \n       \n  •  Inline const expressions and patterns (https://github.com/rust-lang/rfcs/pull/2920) \n     \n       \n  •  Inline Assembly (https://github.com/rust-lang/rfcs/pull/2873) \n     \n       \n  •  This Week in Rust GitHub Repo (https://github.com/emberian/this-week-in-rust/) \n     \n     \n\nCredits\n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Nell Shamrell-Harrington (https://twitter.com/nellshamrell) \n\n\n\n\nHosts: Nell Shamrell-Harrington",
        total_duration: "7 mins 52 secs",
        remaining_duration: "7 mins 52 secs",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDd2cFHOk7tCI",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/d2cFHOk7tCI/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kwvoOzun6BzeEOPVF-GXnRfMgGSg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/d2cFHOk7tCI/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3n3B8g4P2ca1beWi4vcxUn4ZWzHPg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 345",
        description: "Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from TWir 345, published on June 29, 2020.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nReferenced resources\n\n\n\n     \n       \n  •  Faster Rust Development on AWS EC2 with VSCode (https://dev.to/rimutaka/faster-rust-development-on-aws-ec2-with-vscode-4hno) \n     \n       \n  •  Rust Verification Tools (https://alastairreid.github.io/rust-verification-tools/) \n     \n       \n  •  Extremely Simple Rust Rocket Framework Tutorial (https://frogtok.com/extremely-simple-rust-rocket-framework-tutorial/) \n     \n       \n  •  Build a Smart Bookmarking Tool with Rust and Rocket (https://developers.facebook.com/blog/post/2020/06/03/build-smart-bookmarking-tool-rust-rocket/) \n     \n       \n  •  Secure Rust Guidelines (https://anssi-fr.github.io/rust-guide/) \n     \n       \n  •  Examining ARM vs x86 Memory Models with Rust (https://www.nickwilcox.com/blog/arm_vs_x86_memory_model/) \n     \n       \n  •  Rust Stream: Iterators (https://www.youtube.com/watch?v=lQt0adYPdfQ&feature=youtu.be) \n     \n       \n  •  Manipulating ports, virtual ports and pseudo terminals (https://www.youtube.com/watch?v=_cYz03jS7tk&feature=youtu.be) \n     \n       \n  •  Database Project (https://github.com/alex-dukhno/database) \n     \n       \n  •  Gooseberry (https://github.com/out-of-cheese-error/gooseberry) \n     \n       \n  •  Ruma (https://github.com/ruma/ruma) \n     \n       \n  •  Crates.io token scopes (https://github.com/rust-lang/rfcs/pull/2947) \n     \n       \n  •  Linking modifiers for native libraries (https://github.com/rust-lang/rfcs/pull/2951) \n     \n       \n  •  Portable packed SIMD vector types (https://github.com/rust-lang/rfcs/pull/2948) \n     \n       \n  •  Hierarchic anonymous life-time (https://github.com/rust-lang/rfcs/pull/2949) \n     \n       \n  •  Inline const expressions and patterns (https://github.com/rust-lang/rfcs/pull/2920) \n     \n       \n  •  Inline Assembly (https://github.com/rust-lang/rfcs/pull/2873) \n     \n       \n  •  Deduplicate Cargo workspace information (https://github.com/rust-lang/rfcs/pull/2906) \n     \n     \n\nCredits\n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Nell Shamrell-Harrington (https://twitter.com/nellshamrell) \n\n\n\n\nHosts: Nell Shamrell-Harrington",
        total_duration: "9 mins 43 secs",
        remaining_duration: "9 mins 43 secs",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDnIiSUC9vC0g",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/nIiSUC9vC0g/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3mOyjTZdtQ79Nvc_1jfbB1YpPF26Q",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/nIiSUC9vC0g/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3lAEnsDwVpVPWq1ybFdnRLkWbOrkw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Mun",
        description: "First time host, long time editor Jeremy talks with Bas and Remco, creators of the Mun project. Mun is a programming language empowering creation through speedy, hot reloading iteration written in Rust. Why Rust for a project like this? That’s what we explore in this episode.\n\n\nContributing to Rustacean Station\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nReferenced resources\n\n\n\n     \n       \n  •  The Mun Website (https://mun-lang.org/) \n     \n       \n  •  The Mun github repo (https://github.com/mun-lang) \n     \n       \n  •  Pull Requests (https://github.com/mun-lang/mun/issues/220) \n     \n       \n  •  The Mozilla Grant (https://www.mozilla.org/en-US/moss/) \n     \n       \n  •  The Amethyst Project (https://amethyst.rs/) \n     \n       \n  •  The Mun community Discorrd (https://discordapp.com/channels/@me/536489746571198484/724567836097249290) \n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Jeremy Webb (https://twitter.com/alphastrata)  and Jeremy Jung (https://www.softwaresessions.com/)  Huge thanks to him for denoising the guests’ tracks.\n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Jeremy Webb\n\n\n\n\nHosts: Jeremy Webb\n\n\n\n\nGuests: Remco Kuijper (https://www.linkedin.com/in/remco-k-13a669ba/)  and Bas Zalmstra (https://www.linkedin.com/in/baszalmstra/)",
        total_duration: "50 mins",
        remaining_duration: "50 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDAqtaqQI9RVY",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/AqtaqQI9RVY/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3l_U9iCEtSCY3l97k80-UNW3wCJkA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/AqtaqQI9RVY/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kqRZ1VcBrRUvT2tMZkEqaajrTt8g",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 344",
        description: "Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from this week’s issue of TWiR.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nReferenced resources\n\n\n\n     \n       \n  •  Announcing Rust 1.44.1 (https://blog.rust-lang.org/2020/06/18/Rust.1.44.1.html) \n     \n       \n  •  Writing Non-Trivial Macros in Rust (http://adventures.michaelfbryan.com/posts/non-trivial-macros/) \n     \n       \n  •  How to Design For Panic Resilience in Rust (https://towardsdatascience.com/how-to-design-for-panic-resilience-in-rust-55d5fd2478b9) \n     \n       \n  •  Tour of Rust - Chapter 8 - Smart Pointers (https://tourofrust.com/chapter_8_en.html) \n     \n       \n  •  Thread-local Storage - Part 13 of Making our own executable packer (https://fasterthanli.me/blog/2020/thread-local-storage/) \n     \n       \n  •  RISC-V OS using Rust - Chapter 11 (http://osblog.stephenmarz.com/ch11.html) \n     \n       \n  •  Zero To Production #2: Learn By Building An Email Newsletter (https://www.lpalmieri.com/posts/2020-06-21-zero-to-production-2-learn-by-building-an-email-newsletter/) \n     \n       \n  •  [video] Crust of Rust: Smart Pointers and Interior Mutability (https://www.youtube.com/watch?v=8O0Nt9qY_vo) \n     \n       \n  •  [video] CS 196 at Illinois (https://www.youtube.com/channel/UCRA18QWPzB7FYVyg0WFKC6g/videos) \n     \n       \n  •  [video] Rust Stream: The Guard Pattern and Interior Mutability (https://www.youtube.com/watch?v=lmEKIvLh9D4&feature=youtu.be) \n     \n       \n  •  [video] Ask Me Anything with Felix Klock (https://www.youtube.com/watch?v=jGgQmnPH0dQ&feature=youtu.be&t=28792) \n     \n       \n  •  GitUI (https://github.com/extrawurst/gitui) \n     \n       \n  •  Ruma (https://github.com/ruma/ruma) \n     \n       \n  •  RFC: ‘C unwind’ ABI (https://github.com/rust-lang/rfcs/pull/2945) \n     \n       \n  •  impl From for String (https://github.com/rust-lang/rust/pull/73466) \n     \n       \n  •  stabilize leading_trailing_ones (https://github.com/rust-lang/rust/pull/73032) \n     \n       \n  •  Add TryFrom＜{int}＞ for NonZero{int} (https://github.com/rust-lang/rust/pull/72717) \n     \n       \n  •  Stabilize #[track_caller] (https://github.com/rust-lang/rust/pull/72445) \n     \n     \n\nCredits\n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Nell Shamrell-Harrington (https://twitter.com/nellshamrell) \n\n\n\n\nHosts: Nell Shamrell-Harrington",
        total_duration: "12 mins 6 secs",
        remaining_duration: "12 mins 6 secs",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDyxuh5F7rN3U",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/yxuh5F7rN3U/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3nD8ys2hsWp-xqRIaGZuuMlGOqiiA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/yxuh5F7rN3U/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3k4VZvteAFtTTGawDglXNPCPM2xZQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 343",
        description: "Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from this week’s issue of TWiR.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nReferenced resources\n\n\n\n     \n       \n  •  2020 Event Lineup - Update (https://blog.rust-lang.org/2020/06/10/event-lineup-update.html) \n     \n       \n  •  Announcing RustFest Global 2020 🎉 (https://blog.rustfest.eu/announcing-rustfest-2020) \n     \n       \n  •  RustConf 2020 Registration is Open (https://rustconf.com/) \n     \n       \n  •  Understanding the Rust Ecosystem (https://joeprevite.com/rust-lang-ecosystem) \n     \n       \n  •  Errors in Rust: A Deep Dive (https://www.halcyon.hr/posts/error-handling-in-rust/) \n     \n       \n  •  Getting Started With The STM32 Nucleo-F302R8 and Rust (https://blue42.net/code/rust/examples/embedded/nucleo-f30248/getting-started/post/) \n     \n       \n  •  Rustls Security Review & Audit Report (https://github.com/ctz/rustls/blob/master/audit/TLS-01-report.pdf) \n     \n       \n  •  [audio] AreWePodcastYet - Interview with Tim McNamara, author of Rust in Action (https://soundcloud.com/arewepodcastyet/awpy-05-tim-mcnamara-timclicks) \n     \n       \n  •  [video] Rust Notebooks (Jupyter and Evcxr) - Getting Started (https://www.youtube.com/watch?v=SZKEzNL9als) \n     \n       \n  •  RFC: add the Freeze trait to libcore/libstd (https://github.com/rust-lang/rfcs/pull/2944) \n     \n       \n  •  add Windows system error codes that should map to io::ErrorKind::TimedOut (https://github.com/rust-lang/rust/pull/71756) \n     \n       \n  •  impl PartialEq (https://github.com/rust-lang/rust/pull/71660) \n     \n     \n\nCredits\n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Nell Shamrell-Harrington (https://twitter.com/nellshamrell) \n\n\n\n\nHosts: Nell Shamrell-Harrington",
        total_duration: "6 mins 5 secs",
        remaining_duration: "6 mins 5 secs",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDBV6UEZ8tq3w",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/BV6UEZ8tq3w/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3lIrP3w7gGuhDHGQlF91TCJU1SrWA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/BV6UEZ8tq3w/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3ka73l4x7a6YNRZkLgT_WLdILG5MQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 341 and 342",
        description: "Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from this week’s issue of TWiR.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nReferenced resources\n\n\nIssue 341\n\n\n\n     \n       \n  •  This Week in Rust 341 (https://this-week-in-rust.org/blog/2020/06/02/this-week-in-rust-341/) \n     \n       \n  •  RustConf (https://rustconf.com/) \n     \n       \n  •  Rust Contributor Survey (https://docs.google.com/forms/d/e/1FAIpQLSek3vddlYf3YFbV1RVavm9qAJhGxw-Zi_XJ8RBIhNUuuf34Pw/viewform) \n     \n       \n  •  A Retrospective on the 2018 rust-lang.org redesign (https://blog.rust-lang.org/inside-rust/2020/05/26/website-retrospective.html) \n     \n       \n  •  Contributing to Rust (https://blog.elinvynia.com/posts/2020-05-26-contributing-to-rust.html) \n     \n       \n  •  How to build a WebSocket server with Rust (https://blog.logrocket.com/how-to-build-a-websocket-server-with-rust/) \n     \n       \n  •  Custom Types in Diesel (https://kitsu.me/posts/2020_05_24_custom_types_in_diesel) \n     \n       \n  •  Fuzzing Sequoia-PGP (https://blog.hackeriet.no/fuzzing-sequoia/) \n     \n       \n  •  Sorting algorithms in Rust (https://dev.to/jlkiri/sorting-algorithms-in-rust-1386) \n     \n       \n  •  3D boids swimming in perfect harmony: Implementing the boids flocking algorithm in Rust (https://www.reddit.com/r/rust/comments/gsldbi/3d_boids_swimming_along_in_perfect_harmony/) \n     \n       \n  •  Aprende Rust en español (https://dev.to/robertohuertasm/aprende-rust-en-espanol-1pea) \n     \n       \n  •  A Rust and WASM tutorial on building Bitcoin infrastructure (https://www.youtube.com/watch?v=qaykNPHJcyw) \n     \n       \n  •  Crust of Rust: Iterators (https://www.youtube.com/watch?v=yozQ9C69pNs&feature=emb_logo) \n     \n       \n  •  Rust and Tell Berlin - May 2020 (https://www.youtube.com/watch?v=rpilJV-eIVw&feature=emb_logo) \n     \n     \n\nIssue 342\n\n\n\n     \n       \n  •  Announcing Rust 1.44.0 (https://blog.rust-lang.org/2020/06/04/Rust-1.44.0.html) \n     \n       \n  •  So What’s Up with Microsoft’s (and Everyone Else’s) Love of Rust? (https://visualstudiomagazine.com/articles/2020/06/02/rust-love.aspx?m=1) \n     \n       \n  •  Why the developers who use Rust love it so much (https://stackoverflow.blog/2020/06/05/why-the-developers-who-use-rust-love-it-so-much/?cb=1) \n     \n       \n  •  Zero To Production #1: Setup - Toolchain, IDEs, CI (https://www.lpalmieri.com/posts/2020-06-06-zero-to-production-1-setup-toolchain-ides-ci/) \n     \n       \n  •  This Month in Rust OSDev (May 2020) (https://rust-osdev.com/this-month/2020-05/) \n     \n       \n  •  This Month in Rust GameDev #10 - May 2020 (https://rust-gamedev.github.io/posts/newsletter-010/) \n     \n       \n  •  This month in rustsim #11 (April - May 2020) (https://www.rustsim.org/blog/2020/06/01/this-month-in-rustsim/) \n     \n       \n  •  RiB Newsletter #12 - ZK-Rustups (https://rustinblockchain.org/newsletters/2020-06-03-zk-rustups/) \n     \n       \n  •  Graph & Tree Traversals in Rust (https://sachanganesh.com/programming/graph-tree-traversals-in-rust/) \n     \n       \n  •  Memory-Safety Challenge Considered Solved? An Empirical Study with All Rust CVEs (https://arxiv.org/abs/2003.03296) \n     \n       \n  •  Simple sorting algorithms in Rust (https://www.bilibili.com/read/cv4991161) \n     \n       \n  •  Berbagai alasan melakukan Programming dalam Rust (https://dev.to/rizki96/berbagai-alasan-melakukan-programming-dalam-rust-p67) \n     \n       \n  •  \n         \n           \n             \n               \n               \n             \n           \n         [Rust Web developmentBoilerplate free with Rocket](https://youtu.be/tjH0Mye8U_A)\n       \n     \n       \n  •  Educational Rust Live Coding - Building a web app - Part 4 (https://www.youtube.com/watch?v=Dj8i3rM8FIQ) \n     \n       \n  •  Iterators - Rust (https://www.youtube.com/watch?time_continue=1&v=HZftwxCIXqE&feature=emb_logo) \n     \n       \n  •  Browser computation with WebAssembly Live Stream (https://www.twitch.tv/occupy_paul_st) \n     \n       \n  •  Jonathan Teaches Jason Rust! (https://www.youtube.com/watch?v=Y5-ZgxfQvpc) \n     \n       \n  •  Ruma-events project (https://github.com/ruma/ruma-events) \n     \n       \n  •  Database project (https://alex-dukhno.github.io/2020-05-30-Writing-database-management-system-in-Rust.-When-the-flame-is-born-from-the-ashes/) \n     \n       \n  •  Maud project (https://github.com/lambda-fairy/maud) \n     \n     \n\nCredits\n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jon...",
        total_duration: "11 mins 21 secs",
        remaining_duration: "11 mins 21 secs",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDwTyITd9vvXw",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/wTyITd9vvXw/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3nnf0_dN0lr5XyWNjTeGWGn1Am1Jg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/wTyITd9vvXw/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3nzhMnVthF5QK-yCuYu8801D-3lCw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 340",
        description: "Nell Shamrell-Harrington — lead editor of This Week in Rust — takes you through highlights from this week’s issue of TWiR.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nReferenced resources\n\n\n\n     \n       \n  •  Compiling Rust binaries for Windows 98 SE and more: a journey (https://seri.tools/blog/compiling-rust-for-legacy-windows/) ]\n     \n       \n  •  Conway’s Game of Life on the NES in Rust (https://gridbugs.org/conways-game-of-life-on-the-nes-in-rust/) \n     \n       \n  •  Writing Python inside your Rust code — Part 4 (https://blog.m-ou.se/writing-python-inside-rust-4/) \n     \n       \n  •  Zero To Production #0: Foreword (https://www.lpalmieri.com/posts/2020-05-24-zero-to-production-0-foreword/) \n     \n       \n  •  How to organize your Rust tests (https://blog.logrocket.com/how-to-organize-your-rust-tests/) \n     \n       \n  •  Rust Macro Rules in Practice (https://dev.to/sassman/rust-macro-rules-in-practice-40ne) \n     \n       \n  •  Bringing WebAssembly outside the web with WASI by Lin Clark (https://www.youtube.com/watch?v=fh9WXPu0hw8) \n     \n       \n  •  Microsoft’s Safe Systems Programming Languages Effort (https://mybuild.microsoft.com/sessions/61de34c5-b111-4ece-928f-541854875862?source=sessions) \n     \n       \n  •  3 Part Video for Beginners to Rust Programming on Iteration (https://tim.mcnamara.nz/post/618982870485172224/rust-iteration) \n     \n     \n\nCredits\n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Nell Shamrell-Harrington (https://twitter.com/nellshamrell) \n\n\n\n\nHosts: Nell Shamrell-Harrington",
        total_duration: "5 mins 24 secs",
        remaining_duration: "5 mins 24 secs",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDgoLtq4XmNMI",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/goLtq4XmNMI/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3lYNX5bbrJDBHtswmGp7PCc_Nm5SA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/goLtq4XmNMI/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3m6vg0afFKPnXRt8yTnrAv0q-rhjQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "This Week in Rust - Issue 339",
        description: "Nell Shamrell-Harrington - lead editor of This Week in Rust - takes you through highlights from this week’s issue of TWiR.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nReferenced Resources\n\n\n\n     \n       \n  •  This Week in Rust GitHub Repository (https://github.com/emberian/this-week-in-rust) \n     \n       \n  •  Five Years of Rust (https://blog.rust-lang.org/2020/05/15/five-years-of-rust.html) \n     \n       \n  •  The case for using Rust for Automotive Software (https://medium.com/@sojan.james/the-case-for-using-rust-for-automotive-software-19400779f126) \n     \n       \n  •  Rust releases for single and multiple targets with GitHub Actions (https://mateuscosta.me/rust-releases-with-github-actions) \n     \n       \n  •  Rust and C++ Cardiff Virtual Meetup (https://www.youtube.com/watch?v=s8WMaVU3EBs&feature=youtu.be) \n     \n       \n  •  Jonathan Teaches Jason Rust! (https://www.youtube.com/watch?v=EzQ7YIIo1rY&feature=youtu.be) \n     \n       \n  •  RFC: Transition to rust-analyzer as our official LSP (Language Server Protocol) implementation (https://github.com/rust-lang/rfcs/pull/2912) \n     \n       \n  •  RFC: Reading into uninitialized buffers (https://github.com/rust-lang/rfcs/pull/2930) \n     \n     \n\nCredits\n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Nell Shamrell-Harrington (https://twitter.com/nellshamrell) \n\n\n\n\nHosts: Nell Shamrell-Harrington",
        total_duration: "7 mins 7 secs",
        remaining_duration: "7 mins 7 secs",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDnIFEbQrcEv4",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/nIFEbQrcEv4/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3mk9wtQRl5AkbOHfVZjwB_sFa3PhQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/nIFEbQrcEv4/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kCpsPANBj720XakIn6071s0oAbqQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's New in Rust 1.42 and 1.43",
        description: "Jon and Ben examine the features of Rust 1.42 (https://blog.rust-lang.org/2020/03/12/Rust-1.42.html)  and Rust 1.43 (https://blog.rust-lang.org/2020/04/23/Rust-1.43.0.html) .\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n     \n       \n  •  [@01:45] - Useful line numbers on unwrap (https://blog.rust-lang.org/2020/03/12/Rust-1.42.html#useful-line-numbers-in-option-and-result-panic-messages) \n         \n          \n                \n       •  #[track_caller] (https://github.com/rust-lang/rust/issues/47809) \n          \n              \n       \n     \n       \n  •  [@04:22] - Subslice patterns (https://blog.rust-lang.org/2020/03/12/Rust-1.42.html#subslice-patterns) \n         \n          \n                \n       •  Stabilization report (https://github.com/rust-lang/rust/pull/67712/) \n          \n                \n       •  Ignoring with .. (https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html#ignoring-remaining-parts-of-a-value-with-) \n          \n                \n       •  @-patterns (https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html#-bindings) \n          \n                \n       •  struct updates with .. (https://doc.rust-lang.org/book/ch05-01-defining-structs.html#creating-instances-from-other-instances-with-struct-update-syntax) \n          \n              \n       \n     \n       \n  •  [@16:09] - matches! (https://blog.rust-lang.org/2020/03/12/Rust-1.42.html#matches) \n         \n          \n                \n       •  Macro documentation (https://doc.rust-lang.org/stable/std/macro.matches.html) \n          \n                \n       •  Jon proposes assert_matches (https://github.com/rust-lang/rust/issues/65721#issuecomment-566158398) \n          \n              \n       \n     \n       \n  •  [@18:13] - Error::description deprecation (https://blog.rust-lang.org/2020/03/12/Rust-1.42.html#errordescription-is-deprecated) \n         \n          \n                \n       •  RFC (https://rust-lang.github.io/rfcs/2504-fix-error.html) \n          \n                \n       •  Soft deprecation in 1.27 (https://github.com/rust-lang/rust/pull/50163) \n          \n                \n       •  failure (https://crates.io/crates/failure) \n          \n                \n       •  thiserror (https://crates.io/crates/thiserror) \n          \n                \n       •  anyhow (https://crates.io/crates/anyhow) \n          \n                \n       •  eyre (https://crates.io/crates/eyre) \n          \n                \n       •  Jane expermenting with track_caller in eyre (https://twitter.com/yaahc_/status/1253771822920634369) \n          \n              \n       \n     \n       \n  •  [@24:23] - Other changes in 1.42 (https://blog.rust-lang.org/2020/03/12/Rust-1.42.html#other-changes) \n         \n          \n                \n       •  Documentation improvements to cargo (https://github.com/rust-lang/cargo/pull/7733) \n          \n              \n       \n     \n       \n  •  [@26:47] - Rust 1.43 (https://blog.rust-lang.org/2020/04/23/Rust-1.43.0.html) \n     \n       \n  •  [@27:17] - item macro fragments (https://blog.rust-lang.org/2020/04/23/Rust-1.43.0.html#item-fragments)  and parser improvements in general\n         \n          \n                \n       •  More details about the problem (https://github.com/rust-lang/rust/issues/48137) \n          \n                \n       •  PR that fixed this (https://github.com/rust-lang/rust/pull/69366) \n          \n              \n       \n     \n       \n  •  [@33:30] - Primitive type inference (https://blog.rust-lang.org/2020/04/23/Rust-1.43.0.html#type-inference-around-primitives) \n     \n       \n  •  [@36:22] - Smaller changes surfacing in release notes\n         \n          \n                \n       •  Steve Klabnik’s blog post (https://words.steveklabnik.com/how-often-does-rust-change) \n          \n                \n       •  Rust 2020 roadmap on “finishing things” (https://github.com/rust-lang/rfcs/blob/master/text/2857-roadmap-2020.md#follow-through-with-in-progress-designs-and-efforts) \n          \n              \n       \n     \n       \n  •  [@39:00] - New cargo environment variables (https://blog.rust-lang.org/2020/04/23/Rust-1.43.0.html#new-cargo-environment-variable-for-tests) \n         \n          \n                \n       •  Cargo target directory (https://doc.rust-lang.org/cargo/reference/config.html#buildtarget-dir) \n          \n                \n       •  assert_cmd (https://crates.io/crates/assert_cmd) \n          \n                \n       •  Environment variables set by cargo (https://doc.rust-lang.org/ni...",
        total_duration: "1 hr 10 mins",
        remaining_duration: "1 hr 10 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDlLpLglnCm2E",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/lLpLglnCm2E/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3lgp98m0WqRDxYVDGtwzoDG5YVmOA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/lLpLglnCm2E/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3khuazYTJs9boVgKbd4XYeBvZECvg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's New in Rust 1.41",
        description: "Jon and Ben examine the features of Rust 1.41 (https://blog.rust-lang.org/2020/01/30/Rust-1.41.0.html) .\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n     \n       \n  •  [@02:39] - Relaxed restrictions when implementing traits (https://blog.rust-lang.org/2020/01/30/Rust-1.41.0.html#relaxed-restrictions-when-implementing-traits) \n     \n       \n  •  [@09:54] - cargo install updates packages when outdated (https://blog.rust-lang.org/2020/01/30/Rust-1.41.0.html#cargo-install-updates-packages-when-outdated) \n     \n       \n  •  [@12:20] - Less conflict-prone Cargo.lock format (https://blog.rust-lang.org/2020/01/30/Rust-1.41.0.html#less-conflict-prone-cargolock-format) \n     \n       \n  •  [@20:27] - More guarantees when using Box in FFI (https://blog.rust-lang.org/2020/01/30/Rust-1.41.0.html#more-guarantees-when-using-boxt%3E-in-ffi) \n         \n          \n                \n       •  Rust Unsafe Code Guidelines Working Group (https://github.com/rust-lang/unsafe-code-guidelines) \n          \n              \n       \n     \n       \n  •  [@26:22] - NonZero* numeric types now implement From for smaller integer widths\n     \n       \n  •  [@30:40] - Reducing support for 32-bit Apple targets soon (https://blog.rust-lang.org/2020/01/30/Rust-1.41.0.html#reducing-support-for-32-bit-apple-targets-soon) \n     \n       \n  •  [@31:47] - Compiler frontend support for constant propagation\n         \n          \n                \n       •  Inside Rust Blog - Constant propagation is now on by default (https://blog.rust-lang.org/inside-rust/2019/12/02/const-prop-on-by-default.html) \n          \n              \n       \n     \n       \n  •  [@35:06] - Cargo profile overrides (https://doc.rust-lang.org/nightly/cargo/reference/profiles.html#overrides) \n     \n       \n  •  [@39:52] - Nested custom Self receivers (https://github.com/rust-lang/rust/pull/64325) \n     \n     \n\n\n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Zoran Zaric (https://twitter.com/zoranzaric) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Ben Striegel (https://twitter.com/bstrie/) \n\n\n\n\nHosts: Jon Gjengset and Ben Striegel",
        total_duration: "45 mins",
        remaining_duration: "45 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED-vkYF0JE1Q0",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/-vkYF0JE1Q0/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3m3eJX3dQCbyNkrqw-jbT5aChmUOg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/-vkYF0JE1Q0/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3k4SahZWoMilTZspqosWWKjN0FhNg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "RustFest Interviews Triple Feature: Rust Release Engineering; Developing the Developer Tools; Rus...",
        description: "Another trio of interviews from RustFest 2019: Pietro Albini (https://twitter.com/pietroalbini)  on Crater and the Rust Infrastructure Team; Pascal Hertleif (https://twitter.com/killercup)  on the Rust Developer Tools Team; and Santiago Pastorino (https://twitter.com/spastorino)  on the Rust Latam (https://rustlatam.org/)  conference in Latin America.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n[@00:00] Part 1: Crater & Rust Release Infrastructure w/ Pietro Albini\n\n\n\n     \n       \n  •  [@01:01] - What is your role in the Rust project?\n     \n       \n  •  [@01:46] - What lessons did the infrastructure team learn from the Rust 2018 release?\n     \n       \n  •  [@03:29] - How do you feel about potential future Rust editions in 2021 or beyond?\n     \n       \n  •  [@06:26] - Do you think Rust’s regular release cycle too fast or too slow?\n     \n       \n  •  [@08:56] - How does Crater guard against language regressions, and what things doesn’t it catch?\n         \n          \n                \n       •  rust-lang/crater (https://github.com/rust-lang/crater) \n          \n              \n       \n     \n       \n  •  [@11:12] - How has Crater scaled as the ecosystem has grown, and is it at risk of becoming infeasible to run?\n     \n       \n  •  [@16:17] - How can someone get involved with the Infrastructure Team?\n         \n          \n                \n       •  #infra Discord channel (https://discord.gg/AxXmxzN) \n          \n              \n       \n     \n     \n\n[@17:25] Part 2: Developer Tools w/ Pascal Hertleif\n\n\n\n     \n       \n  •  [@18:23] - What is the Developer Tools Team?\n     \n       \n  •  [@19:39] - What tools is the Developer Tools Team responsible for, and what purposes do they serve?\n     \n       \n  •  [@24:46] - Which tools in particular would you like to draw attention to?\n     \n       \n  •  [@26:19] - How does rust-analyzer compare to RLS?\n         \n          \n                \n       •  rust-lang/rls (https://github.com/rust-lang/rls) \n          \n                \n       •  rust-analyzer/rust-analyzer (https://github.com/rust-analyzer/rust-analyzer) \n          \n              \n       \n     \n       \n  •  [@29:42] - How does the Developer Tools Team coordinate?\n     \n       \n  •  [@32:00] - How was your experience at RustFest this year?\n     \n     \n\n[@36:21] Part 3: Rust Latam w/ Santiago Pastorino\n\n\n\n     \n       \n  •  [@36:46] - What is Rust Latam (https://rustlatam.org/) ?\n     \n       \n  •  [@37:42] - What inspired you to start a Rust conference in Latin America?\n     \n       \n  •  [@39:06] - How big is Rust Latam?\n     \n       \n  •  [@40:15] - What is interest in Rust like in Latin America?\n     \n       \n  •  [@42:42] - What is the broader software industry like in Latin America?\n     \n       \n  •  [@44:59] - What’s next for Rust Latam?\n     \n       \n  •  [@45:42] - How did you get into Rust?\n     \n       \n  •  [@50:17] - What venues are there for Spanish or Portuguese-speaking Rust users?\n         \n          \n                \n       •  Rust Brazilian Telegram Group (https://t.me/rustlangbr) \n          \n              \n       \n     \n       \n  •  [@51:34] - How can someone learn more about Rust Latam?\n     \n     \n\n\n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Zoran Zaric (https://twitter.com/zoranzaric) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Ben Striegel (https://twitter.com/bstrie/) \n\n\n\n\nHosts: Ben Striegel (https://twitter.com/bstrie/)",
        total_duration: "53 mins",
        remaining_duration: "53 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED3hr5vkg--pQ",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/3hr5vkg--pQ/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3n8ejrcxdoK3lh5cib-bryCK5pcpA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/3hr5vkg--pQ/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3mXWc6nNWc5NgnHUVT032og4ne5MA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "RustFest Interviews Triple Feature: Rust for AAA Game Development; Async Foundations with `async-...",
        description: "Three more interviews from RustFest 2019: Jake Shadle (https://twitter.com/Ca1ne)  on using Rust for high-performance game engines at Embark (https://www.embark-studios.com/) , applying lessons learned from working on EA DICE’s Frostbite engine; Yoshua Wuyts (https://twitter.com/yoshuawuyts)  on async-std and Rust’s async ecosystem; and Stjepan Glavina (https://twitter.com/stjepang)  on crossbeam, Rust’s foundational library for powerful concurrency primitives.\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n[@00:00] Part 1: Game Development @ Embark Studios w/ Jake Shadle\n\n\n\n     \n       \n  •  [@01:25] - What is yours (and Embark’s) background in game development?\n     \n       \n  •  [@02:14] - What is the relevance of the Frostbite engine and what is your experience with it?\n     \n       \n  •  [@04:15] - What makes you think that Rust as a language is suitable for game development?\n     \n       \n  •  [@06:13] - How is parallelism employed in a game engine on the scale of Frostbite?\n     \n       \n  •  [@07:07] - Where is the Rust library ecosystem lacking for your use case, and what crates are you making use of?\n     \n       \n  •  [@11:13] - Why is Embark interested in WebAssembly?\n     \n       \n  •  [@14:20] - How can someone get in touch or learn more about Embark?\n         \n          \n                \n       •  embark.dev (https://www.embark.dev/) \n          \n                \n       •  Inside Rust at Embark (https://medium.com/embarkstudios/inside-rust-at-embark-b82c06d1d9f4) \n          \n              \n       \n     \n     \n\n[@15:09] Part 2: async-std w/ Yoshua Wuyts\n\n\n\n     \n       \n  •  [@15:48] - How much of the Rust standard library is async-std intended to emulate?\n     \n       \n  •  [@17:12] - Is there anything from async-std that ought to be upstreamed into the standard library?\n     \n       \n  •  [@19:20] - Does async-std run into any conflicts with the types or traits defined in futures-rs or the standard library?\n     \n       \n  •  [@22:21] - How complete or incomplete is Rust’s async ecosystem and async language support?\n         \n          \n                \n       •  async-trait: a procedural macro for providing async trait methods on stable Rust (https://crates.io/crates/async-trait) \n          \n              \n       \n     \n       \n  •  [@26:21] - How close is async-std to being a drop-in replacement for the standard library?\n     \n       \n  •  [@28:32] - What’s next for the development of async-std?\n     \n       \n  •  [@30:07] - With the advent of async-std version 1.0, what would an eventual 2.0 release look like?\n     \n       \n  •  [@32:09] - Who is using async-std?\n     \n       \n  •  [@32:54] - How can someone get in touch or get involved?\n         \n          \n                \n       •  async.rs (https://async.rs/) \n          \n                \n       •  github.com/async-rs (https://github.com/async-rs/) \n          \n              \n       \n     \n     \n\n[@34:02] Part 3: crossbeam w/ Stjepan Glavina\n\n\n\n     \n       \n  •  [@34:29] - What is crossbeam and what is its history?\n     \n       \n  •  [@36:41] - What is epoch-based garbage collection, and why would a Rust user want to use it?\n     \n       \n  •  [@38:17] - How does epoch-based garbage collection compare to std::sync::Arc?\n     \n       \n  •  [@41:30] - What is your background in concurrent programming?\n     \n       \n  •  [@42:59] - How do crossbeam’s channels compare to those in the standard library?\n     \n       \n  •  [@44:33] - How much research was involved in writing crossbeam?\n     \n       \n  •  [@45:35] - Do crossbeam’s channels provide a selection interface?\n     \n       \n  •  [@46:34] - What other primitives does crossbeam provide?\n     \n       \n  •  [@48:37] - How confident are you in the correctness of crossbeam’s implementation?\n     \n       \n  •  [@49:46] - How is crossbeam related to rayon and async-std?\n     \n       \n  •  [@51:53] - What’s next for crossbeam?\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Zoran Zaric (https://twitter.com/zoranzaric) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Ben Striegel (https://twitter.com/bstrie/) , Zoran Zaric (https://twitter.com/zoranzaric) \n\n\n\n\nHosts: Ben Striegel (https://twitter.com/bstrie/)",
        total_duration: "53 mins",
        remaining_duration: "53 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDcm4F_FXZmJ4",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/cm4F_FXZmJ4/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3nvBDtrpYwymM6zkfleZVx1AvRstQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/cm4F_FXZmJ4/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3kZ8ND21flZ3DpEt-qAPYuRrDwuOg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's New in Rust 1.40",
        description: "Jon and Ben review the changes introduced in Rust 1.40 (https://blog.rust-lang.org/2019/12/19/Rust-1.40.0.html) .\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to suggest an idea for an episode or offer your services as a host or audio editor!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n     \n       \n  •  [@00:52] - #[non_exhaustive] structs, enums, and variants (https://blog.rust-lang.org/2019/12/19/Rust-1.40.0.html#[non_exhaustive]-structs,-enums,-and-variants) \n     \n       \n  •  [@12:31] - Macro and attribute improvements (https://blog.rust-lang.org/2019/12/19/Rust-1.40.0.html#macro-and-attribute-improvements) \n         \n          \n                \n       •  StackOverflow: How do I create a function-like procedural macro? (https://stackoverflow.com/questions/58922119/how-do-i-create-a-function-like-procedural-macro) \n          \n              \n       \n     \n       \n  •  [@24:33] - Borrow check migration warnings are hard errors in Rust 2015 (https://blog.rust-lang.org/2019/12/19/Rust-1.40.0.html#borrow-check-migration-warnings-are-hard-errors-in-rust-2015) \n     \n       \n  •  [@25:21] - More const fns in the standard library (https://blog.rust-lang.org/2019/12/19/Rust-1.40.0.html#macro-and-attribute-improvements) \n         \n          \n                \n       •  const-hack issue label (https://github.com/rust-lang/rust/issues?q=label%3Aconst-hack) \n          \n                \n       •  Rustacean Station: Compile-Time Evaluation, Interpreted Rust, and UB Sanitizing: Talking to Oliver Scherer about Miri (https://rustacean-station.org/episode/008-oli-miri/) \n          \n              \n       \n     \n       \n  •  [@28:31] - The todo! macro (https://doc.rust-lang.org/std/macro.todo.html) \n     \n       \n  •  [@34:28] - slice::repeat (https://doc.rust-lang.org/std/primitive.slice.html#method.repeat) \n     \n       \n  •  [@35:09] - mem::take (https://doc.rust-lang.org/std/mem/fn.take.html) \n     \n       \n  •  [@36:55] - BTreeMap::get_key_value (https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.get_key_value)  and HashMap::get_key_value (https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get_key_value) \n         \n          \n                \n       •  Ivan Dubrov: Tricking the HashMap (http://idubrov.name/rust/2018/06/01/tricking-the-hashmap.html) \n          \n              \n       \n     \n       \n  •  [@40:24] - Standardized functions for converting floating-point types to byte arrays of specific endianness\n         \n          \n                \n       •  Proposed Rust RFC: Standard lazy types (https://github.com/rust-lang/rfcs/pull/2788) \n          \n                \n       •  Rust PR: Stabilize the matches! macro (https://github.com/rust-lang/rust/pull/67659) \n          \n              \n       \n     \n       \n  •  [@45:55] - Cargo tweaks\n     \n     \n\n\n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Jeremy Jung (https://twitter.com/jertype) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Ben Striegel (https://twitter.com/bstrie/) \n\n\n\n\nHosts: Jon Gjengset and Ben Striegel",
        total_duration: "49 mins",
        remaining_duration: "49 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDuvHE_YFxQk4",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/uvHE_YFxQk4/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3krHc9mjzI6c4WsVbpkByJCLllZsw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/uvHE_YFxQk4/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3mzpcfvHwOHyojl5qXqu7XsQ4agbA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Double Feature: Jan-Erik Rediger on RustFest & Lucio Franco on the Tonic gRPC framework",
        description: "Two more interviews from RustFest 2019, first with lead RustFest organizer Jan-Erik Rediger and second with Tokio contributor Lucio Franco on the Tower gRPC framework.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help with hosting or audio editing!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n[@00:00] Part 1: RustFest w/ Jan-Erik Rediger\n\n\n\n     \n       \n  •  [@00:43] - Who were the original founders of RustFest and what is the history of the conference?\n     \n       \n  •  [@06:04] - What is timeline like for organizing a conference of this scale and what has been your experience with organizing RustFest?\n     \n     \n\n[@12:04] Part 2: Tonic w/ Lucio Franco\n\n\n\n     \n       \n  •  [@12:52] - What is Tonic?\n     \n       \n  •  [@13:38] - What is gRPC?\n     \n       \n  •  [@14:57] - What is Tonic/gRPC useful for?\n     \n       \n  •  [@16:05] - How is Tonic related to Tower and Tokio?\n     \n       \n  •  [@22:11] - What are you using Tonic for?\n     \n       \n  •  [@25:13] - How can people learn more about Tonic and get involved?\n     \n     \n\n\n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Jeremy Jung (https://twitter.com/jertype) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Ben Striegel (https://twitter.com/bstrie/) \n\n\n\n\nHost: Ben Striegel (https://twitter.com/bstrie/)",
        total_duration: "26 mins",
        remaining_duration: "26 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDd5XiM__mNUo",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/d5XiM__mNUo/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3n-phn8yJ6281ydtYO4Ts9riQfADg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/d5XiM__mNUo/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3lbwZgzDZtawFTn0L9DEHGq7-0z2A",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Compile-Time Evaluation, Interpreted Rust, and UB Sanitizing: Talking to Oliver Scherer about Miri",
        description: "In the first of our mini-interviews from RustFest 2019, we talk to Oliver Scherer (https://twitter.com/oli_obk)  about Miri (https://github.com/rust-lang/miri) , an interpreter for rustc’s internal bytecode, its use in const-evaluation, and its potential as an external tool for sanitizing unsafe code.\n\n\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help create the podcast itself!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n     \n       \n  •  [@01:15] - What is const-evaluation and what can you do with it?\n     \n       \n  •  [@03:23] - What is Miri and how long has it been in development?\n     \n       \n  •  [@07:05] - What does the future hold for Miri?\n     \n       \n  •  [@07:54] - How long have you been working on rustc and Miri?\n     \n       \n  •  [@12:22] - How much of Miri does rustc use today?\n     \n       \n  •  [@13:33] - How does Miri help people detect undefined behavior in unsafe code?\n     \n       \n  •  [@16:46] - How would a user begin using Miri directly to test their unsafe code?\n     \n       \n  •  [@19:15] - What happens if you try to const-evaluate unsafe code?\n     \n       \n  •  [@20:33] - What’s next for const-evaluation in rustc?\n     \n       \n  •  [@21:58] - Who else is helping to develop Miri?\n     \n     \n\n\n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: alphastrata\n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Ben Striegel (https://twitter.com/bstrie) \n\n\n\n\nHosts: Ben Striegel (https://twitter.com/bstrie)",
        total_duration: "24 mins",
        remaining_duration: "24 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDMkAvm8oW-fg",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/MkAvm8oW-fg/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kibz7LADe31A8wXydmueflIZ_mUQ",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/MkAvm8oW-fg/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3lqREUqXpDWI8iSApfxcQVV2BtIHg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Creating Static Sites in Rust with Vincent Prouillet",
        description: "Vincent Prouillet (https://www.vincentprouillet.com/)  talks about his experience building the Zola (https://twitter.com/jertype)  static site generator (formerly known as Gutenberg) and reflects on five years of working with Rust.\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help create the podcast itself!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps\n\n\n\n     \n       \n  •  [@00:59] - What’s a static site generator?\n     \n       \n  •  [@03:52] - How easy is it to build and edit a site?\n     \n       \n  •  [@07:58] - Why create a new static site generator?\n     \n       \n  •  [@12:35] - The Tera template engine and Vincent’s experience building it\n     \n       \n  •  [@17:53] - Creating filters and tests to use with Tera\n     \n       \n  •  [@24:29] - What’s a taxonomy?\n     \n       \n  •  [@25:48] - Mapping content to URLs\n     \n       \n  •  [@30:53] - The experience of being an open source maintainer\n     \n       \n  •  [@33:57] - Rust crates and features used by Zola\n     \n       \n  •  [@36:57] - How the Rust ecosystem ensured fast performance\n     \n       \n  •  [@40:35] - Is Rust ready for web applications?\n     \n       \n  •  [@43:25] - What applications are best suited to Rust now?\n     \n       \n  •  [@46:50] - Issues or things you wish existed in Rust?\n     \n       \n  •  [@51:08] - Helping out with Zola\n     \n     \n\n\n\nReferences and Resources\n\n\nVincent Prouillet\n\n\n     \n       \n  •  Personal Site (https://www.vincentprouillet.com/) \n     \n       \n  •  @20100Prouillet (https://twitter.com/20100Prouillet) \n     \n     \n\nZola\n\n\n     \n       \n  •  Zola Website (https://www.getzola.org) \n     \n       \n  •  Zola Forum (https://zola.discourse.group/) \n     \n     \n\nTools/Crates used by Zola\n\n\n     \n       \n  •  pulldown-cmark (https://github.com/raphlinus/pulldown-cmark)  (Markdown)\n     \n       \n  •  syntec (https://github.com/trishume/syntect)  (Syntax highlighting using Sublime Text definitions)\n     \n       \n  •  rayon (https://github.com/rayon-rs/rayon)  (Parallel computation)\n     \n       \n  •  heaptrack (https://github.com/KDE/heaptrack)  (Memory Profiler)\n     \n     \n\nStatic Site Hosts\n\n\n     \n       \n  •  Github Pages (https://pages.github.com/) \n     \n       \n  •  Netlify (https://www.netlify.com/) \n     \n     \n\nCrates for Web Applications\n\n\n     \n       \n  •  jsonwebtoken (https://github.com/Keats/jsonwebtoken) \n     \n       \n  •  Bcrypt (https://github.com/Keats/rust-bcrypt) \n     \n       \n  •  Validator (https://github.com/Keats/validator) \n     \n     \n\nCompiled Template Engines\n\n\n     \n       \n  •  askama (https://github.com/djc/askama) \n     \n       \n  •  maud (https://maud.lambda.xyz/) \n     \n       \n  •  horrowshow (https://github.com/Stebalien/horrorshow-rs) \n     \n     \n\nRuntime Template Engines\n\n\n     \n       \n  •  Tera (https://github.com/Keats/tera)  (Jinja2 (https://www.palletsprojects.com/p/jinja/) -like HTML template engine)\n     \n       \n  •  ramhorns (https://github.com/maciejhirsz/ramhorns) \n     \n       \n  •  rust-mustache (https://github.com/nickel-org/rust-mustache) \n     \n     \n\nStatic Site Generators\n\n\n     \n       \n  •  Hugo (https://www.gohugo.io) \n     \n       \n  •  Jekyll (https://www.jekyllrb.com) \n     \n       \n  •  Pelican (https://blog.getpelican.com/) \n     \n     \n\nOther links\n\n\n     \n       \n  •  Forestry (https://forestry.io/)  (WYSIWYG CMS for Static Sites)\n     \n       \n  •  Keyword Arguments RFC (https://github.com/rust-lang/rfcs/issues/323) \n     \n       \n  •  kickstart (https://github.com/Keats/kickstart)  (Scaffolding tool)\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Jeremy Jung (https://twitter.com/jertype) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Ben Striegel (https://twitter.com/bstrie) \n\n\n\n\nHosts: Jeremy Jung (https://twitter.com/jertype)",
        total_duration: "54 mins",
        remaining_duration: "54 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED68WwtpfT_70",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/68WwtpfT_70/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3nXN-1x1C3O3eLlj7tf2s1hOEmSMA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/68WwtpfT_70/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kajicjYrPSA0Huj7SeGjCW9S3waw",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's New in Rust 1.39",
        description: "Jon and Ben review the long-awaited changes in Rust 1.39 (https://blog.rust-lang.org/2019/11/07/Rust-1.39.0.html) .\n\n\nContributing to Rustacean Station\n\n\n\n\n\n\nRustacean Station is a community project; get in touch with us if you’d like to be interviewed, propose a topic for an episode, or help create the podcast itself!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n     \n       \n  •  [@1:03] - References to by-move bindings in match guards (https://blog.rust-lang.org/2019/11/07/Rust-1.39.0.html#references-to-by-move-bindings-in-match-guards) \n     \n       \n  •  [@2:44] - Attributes on function parameters (https://blog.rust-lang.org/2019/11/07/Rust-1.39.0.html#attributes-on-function-parameters) \n     \n       \n  •  [@7:01] - Borrow check migration warnings are hard errors in Rust 2018 (https://blog.rust-lang.org/2019/11/07/Rust-1.39.0.html#borrow-check-migration-warnings-are-hard-errors-in-rust-2018) \n         \n          \n                \n       •  “NLL for Rust 2015” in Rustacean Station episode on Rust 1.36 (timestamp: 36:24) (https://rustacean-station.org/episode/000-rust-1.36.0/) \n          \n              \n       \n     \n       \n  •  [@10:15] - More const fns in the standard library (https://blog.rust-lang.org/2019/11/07/Rust-1.39.0.html#more-const-fns-in-the-standard-library) \n         \n          \n                \n       •  Inside Rust Blog: if and match in constants on nightly Rust (https://blog.rust-lang.org/inside-rust/2019/11/25/const-if-match.html) \n          \n              \n       \n     \n       \n  •  [@14:16] - Improvements to std::time::Instant (https://blog.rust-lang.org/2019/11/07/Rust-1.39.0.html#additions-to-the-standard-library) \n     \n       \n  •  [@16:22] - rustup 1.20.0 (https://blog.rust-lang.org/2019/10/15/Rustup-1.20.0.html) \n     \n       \n  •  [@19:32] - Stable async/await (https://blog.rust-lang.org/2019/11/07/Rust-1.39.0.html#the-await-is-over,-async-fns-are-here) \n         \n          \n                \n       •  “std::future” in Rustacean Station episode on Rust 1.36 (timestamp: 4:27) (https://rustacean-station.org/episode/000-rust-1.36.0/) \n          \n                \n       •  How Rust optimizes async/await I (https://tmandry.gitlab.io/blog/posts/optimizing-await-1/) \n          \n                \n       •  How Rust optimizes async/await II (https://tmandry.gitlab.io/blog/posts/optimizing-await-2/) \n          \n                \n       •  Rust Blog: Async-await on stable Rust! (https://blog.rust-lang.org/2019/11/07/Async-await-stable.html) \n          \n                \n       •  Announcing the Async Interviews (https://smallcultfollowing.com/babysteps/blog/2019/11/22/announcing-the-async-interviews/) \n          \n                \n       •  wasm-bindgen-futures (https://crates.io/crates/wasm-bindgen-futures) \n          \n              \n       \n     \n       \n  •  [@34:42] - What’s next in Rust?\n         \n          \n                \n       •  Polonius (https://github.com/rust-lang/polonius) \n          \n                \n       •  Chalk (https://github.com/rust-lang/chalk) \n          \n              \n       \n     \n       \n  •  [@36:20] - A public call for feedback for the Rust 2020 Development Roadmap (https://blog.rust-lang.org/2019/10/29/A-call-for-blogs-2020.html) \n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Jeremy Jung (https://www.softwaresessions.com) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Ben Striegel (https://twitter.com/bstrie/) \n\n\n\n\nHosts: Jon Gjengset and Ben Striegel",
        total_duration: "43 mins",
        remaining_duration: "43 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDGr59dR_w4WY",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/Gr59dR_w4WY/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3kGQ8lNXtAsGcmCzTHk85mivwNM_A",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/Gr59dR_w4WY/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3mhQhZ-S5qLXi2a4nq32weYXQvDmg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's new in Rust 1.38",
        description: "Jon and Ben review the changes introduced by the Rust 1.38 release (https://blog.rust-lang.org/2019/09/26/Rust-1.38.0.html) .\n\n\n\n\nGet in touch with us if you’d like to be interviewed, propose a topic for an episode, or help out!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n     \n       \n  •  [@1:15] - Pipelined compilation\n     \n       \n  •  [@3:25] - Linting some incorrect uses of mem::uninitialized\n         \n          \n                \n       •  Rustacean Station episode on Rust 1.36 with discussion on std::mem::MaybeUninit (https://rustacean-station.org/episode/000-rust-1.36.0/) \n          \n              \n       \n     \n       \n  •  [@6:30] - #[deprecated] attribute on macros\n         \n          \n                \n       •  Rust reference: Diagnostic attributes (https://doc.rust-lang.org/stable/reference/attributes/diagnostics.html) \n          \n              \n       \n     \n       \n  •  [@11:30] - std::any::type_name\n         \n          \n                \n       •  Security advisory for the destabilization of std::error::Error::type_id in Rust 1.34.2 (https://groups.google.com/d/msg/rustlang-security-announcements/aZabeCMUv70/-2Y6-SL6AQAJ) \n          \n              \n       \n     \n       \n  •  [@16:00] - slice::{concat, connect, join} now accepts &[T] in addition to &T\n     \n       \n  •  [@18:10] - *const T and *mut T now implement std::marker::Unpin\n     \n       \n  •  [@20:55] - New convenience methods for working with std::time::Duration\n     \n       \n  •  [@22:25] - cargo fix --clippy\n     \n       \n  •  [@23:40] - Diff-friendly format for Cargo.lock\n     \n       \n  •  [@25:00] - Looking forward to Rust 1.39\n         \n          \n                \n       •  futures v0.3 milestone (https://github.com/rust-lang-nursery/futures-rs/milestone/2) \n          \n                \n       •  tokio v0.2 milestone (https://github.com/tokio-rs/tokio/milestone/2) \n          \n                \n       •  tower v0.1 milestone (https://github.com/tower-rs/tower/milestone/1) \n          \n                \n       •  hyper v0.13 milestone (https://github.com/hyperium/hyper/milestone/5) \n          \n              \n       \n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity (https://twitter.com/AerocityMusic) \n\n\n\n\nAudio Editing: Zoran Zaric (https://twitter.com/zoranzaric) \n\n\n\n\nHosting Infrastructure: Jon Gjengset (https://twitter.com/jonhoo/) \n\n\n\n\nShow Notes: Ben Striegel (https://twitter.com/bstrie/) \n\n\n\n\nHosts: Jon Gjengset and Ben Striegel",
        total_duration: "34 mins",
        remaining_duration: "34 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDVn5FimXSMSo",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/Vn5FimXSMSo/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3mA2jlMurDXZqb5drd4gXtSlUQVVw",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/Vn5FimXSMSo/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3kB1zoIKzaKV6YJ7NcdbVF9JfWxZg",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Rust in Production: An Interview with Armin Ronacher",
        description: "Armin Ronacher (https://twitter.com/mitsuhiko)  talks about getting into Rust, when to use it, writing Rust extensions for Python, building the Symbolicator (https://github.com/getsentry/symbolicator)  web application with actix, creating debugging libraries, and the Rust ecosystem.\n\n\n\n\nGet in touch with us if you’d like to be interviewed, propose a topic, or help out!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n     \n       \n  •  [@01:16] - What got you interested in Rust?\n     \n       \n  •  [@02:58] - Abstraction with good performance in Rust vs Python\n     \n       \n  •  [@04:50] - Rust doesn’t need asynchronous code\n     \n       \n  •  [@06:10] - Building thread safe applications\n     \n       \n  •  [@07:05] - What excited you about using Rust?\n     \n       \n  •  [@08:59] - Sentry (https://sentry.io/welcome/) \n     \n       \n  •  [@11:41] - Introducing Rust to Sentry\n     \n       \n  •  [@13:49] - Anything easier to write in Rust vs Python?\n     \n       \n  •  [@16:53] - Writing extensions vs writing services\n     \n       \n  •  [@20:01] - Flow of sending a minidump to Symbolicator\n     \n       \n  •  [@22:35] - Symbolicator makes sense as a service\n     \n       \n  •  [@24:05] - Building a better debugging world\n     \n       \n  •  [@25:12] - More things symbolicator does\n     \n       \n  •  [@26:06] - What’s Milksnake\n     \n       \n  •  [@28:43] - Other ways to embed Rust in Python\n     \n       \n  •  [@30:47] - Why use Actix for Symbolicator?\n     \n       \n  •  [@35:23] - Is it too early to write web applications?\n     \n       \n  •  [@38:09] - What would you do differently in hindsight?\n     \n       \n  •  [@42:59] - Don’t want a Django or Rails\n     \n       \n  •  [@44:37] - When to write a web application?\n     \n       \n  •  [@48:13] - What do you wish existed in Rust?\n     \n       \n  •  [@50:36] - Game backends\n     \n       \n  •  [@52:23] - Anything else?\n     \n       \n  •  [@54:05] - Why companies aren’t using Rust for web development\n     \n       \n  •  [@54:52] - Why async/await is not the only blocker for web development\n     \n       \n  •  [@57:22] - Resources for web development in Rust\n     \n       \n  •  [@59:03] - Wrap Up\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity\n\n\n\n\nHosting Infrastructure: Jon Gjengset\n\n\n\n\nShow Notes: Jeremy Jung\n\n\n\n\nHost: Jeremy Jung",
        total_duration: "1 hr 2 mins",
        remaining_duration: "1 hr 2 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPED_3BGMlHfx24",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/_3BGMlHfx24/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3lbpXPApjKlihJEGtQzbROpNc1iXA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/_3BGMlHfx24/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3njIqr8rm2jaQjy9KXKDADBRUSiLQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "What's New in Rust 1.37",
        description: "We review the new features in the Rust 1.37 release (https://blog.rust-lang.org/2019/08/15/Rust-1.37.0.html)  and give shout-outs to all the volunteers who have helped make Rustacean Station so far.\n\n\n\n\nGet in touch with us if you’d like to be interviewed, propose a topic, or help out!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n     \n       \n  •  [@01:21] - Referring to enum variants through type aliases\n     \n       \n  •  [@02:55] - Built-in Cargo support for vendored dependencies\n     \n       \n  •  [@04:08] - Using unnamed const items for macros\n     \n       \n  •  [@06:41] - Profile-guided optimization\n     \n       \n  •  [@09:06] - Choosing a default binary in Cargo projects\n     \n       \n  •  [@10:17] - #[repr(align(N))] on enums\n     \n       \n  •  [@11:06] - Library changes\n     \n       \n  •  [@16:48] - New sponsors of Rust infrastructure\n         \n          \n                \n       •  Async/Await in Libra Core (https://community.libra.org/t/async-await-in-libra-core/1566) \n          \n              \n       \n     \n       \n  •  [@19:58] - async/await stabilization in Rust 1.39\n     \n       \n  •  [@22:08] - Miscellaneous new features\n     \n       \n  •  [@26:06] - Thanking the people who make Rustacean Station possible!\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity\n\n\n\n\nAudio Editing: Jon Gjenset\n\n\n\n\nHosting Infrastructure: Jon Gjengset\n\n\n\n\nShow Notes: Ben Striegel\n\n\n\n\nHosts: Jon Gjenset & Ben Striegel",
        total_duration: "33 mins",
        remaining_duration: "33 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDxY_Qzy3cL9g",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/xY_Qzy3cL9g/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDg&rs=AMzJL3kAf4Vmsx6nCdf3GBqCzwcVZjetGg",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/xY_Qzy3cL9g/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA4&rs=AMzJL3lz4bNacNxv_-wolJebJffku8M86A",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Organizing Colorado Gold Rust: An interview with conference founder J Haigh",
        description: "We interview J Haigh about their experience organizing this year’s first-ever Colorado Gold Rust (https://www.cogoldrust.com/)  conference, what brought them to Rust, and what inspired them to give back to Rust’s community.\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n     \n       \n  •  [@00:41] - Colorado Gold Rust (https://www.cogoldrust.com/) \n     \n       \n  •  [@01:48] - What got you into Rust?\n         \n          \n                \n       •  RustConf (https://rustconf.com/) \n          \n                \n       •  @ag_dubs (Ashley Williams) (https://twitter.com/ag_dubs) \n          \n                \n       •  @carols10cents (Carol Nichols) (https://twitter.com/carols10cents) \n          \n              \n       \n     \n       \n  •  [@03:01] - Getting involved with the Rust community\n         \n          \n                \n       •  Rust Boulder/Denver Meetup (https://www.meetup.com/Rust-Boulder-Denver/) \n          \n                \n       •  @focusaurus (Peter Lyons) (https://twitter.com/focusaurus) \n          \n              \n       \n     \n       \n  •  [@07:50] - What is the Recurse Center (https://www.recurse.com/) ?\n     \n       \n  •  [@09:21] - Organizing a conference\n         \n          \n                \n       •  Auraria Campus (https://www.ahec.edu/) \n          \n                \n       •  @argorak (Florian Gilcher) (https://twitter.com/Argorak) \n          \n                \n       •  Rust Fest (https://www.rustfest.eu) \n          \n                \n       •  Rust Community Events Team’s example timeline for organizing a conference (https://github.com/rust-community/events-team/blob/master/guidelines/timeline.md) \n          \n                \n       •  Rust Belt Rust (https://www.rust-belt-rust.com/) \n          \n                \n       •  Rust Belt Rust 2018’s budgeting report (https://www.integer32.com/2018/11/29/2018-rust-belt-rust-finance-report.html) \n          \n              \n       \n     \n       \n  •  [@17:27] - What have you learned for next time?\n     \n       \n  •  [@19:36] - Who is helping with the conference?\n         \n          \n                \n       •  Nicholas Young (https://www.secretfader.com/) \n          \n              \n       \n     \n       \n  •  [@22:05] - Community Inclusivity\n     \n       \n  •  [@24:44] - CFP software (https://github.com/rubycentral/cfp-app) \n     \n       \n  •  [@25:34] - Finding a venue for a conference\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity\n\n\n\n\nAudio Editing: Reece McMillin\n\n\n\n\nHosting Infrastructure: Jon Gjengset\n\n\n\n\nShow Notes: Jeremy Jung\n\n\n\n\nHosts: Ben Striegel",
        total_duration: "28 mins",
        remaining_duration: "28 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDMEOhH8pgXIM",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/MEOhH8pgXIM/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3lSSceU3qAUK3ScoQIwCv62jFq9bA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/MEOhH8pgXIM/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3l2FcxwNBOS5gCFrwvJixeyYUrwEQ",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Ruma and the Matrix Communication Protocol: An Interview with Jimmy Cuadra",
        description: "We interview Jimmy Cuadra about Matrix (https://matrix.org/) , an open and decentralized communication protocol, and his implementation in Rust known as Ruma (https://github.com/ruma/ruma) .\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nTimestamps & referenced resources\n\n\n\n     \n       \n  •  [@01:35] - Meet Jimmy Cuadra\n     \n       \n  •  [@04:46] - How did you get into Rust?\n         \n          \n                \n       •  @bascule (Tony Arcieri) (https://twitter.com/bascule) \n          \n                \n       •  The Rust Programming Language Book (https://doc.rust-lang.org/book/) \n          \n              \n       \n     \n       \n  •  [@08:47] - What is Matrix?\n         \n          \n                \n       •  Matrix: an open network for secure, decentralized communication (https://matrix.org/) \n          \n                \n       •  libpurple (https://developer.pidgin.im/wiki/WhatIsLibpurple) \n          \n                \n       •  Ruma: Introduction to Matrix (https://www.ruma.io/docs/matrix/) \n          \n              \n       \n     \n       \n  •  [@14:32] - Why “Matrix”?\n     \n       \n  •  [@16:44] - What forms of communication does Matrix enable?\n     \n       \n  •  [@17:59] - What pieces of Matrix does Ruma implement?\n     \n       \n  •  [@20:27] - Why did you decide to use Rust?\n     \n       \n  •  [@23:52] - How challenging has Ruma been to implement?\n     \n       \n  •  [@30:27] - What libraries does Ruma leverage?\n         \n          \n                \n       •  Serde: a framework for serializing and deserializing data structures efficiently and generically (https://crates.io/crates/serde) \n          \n                \n       •  Diesel: a safe, extensible ORM and query builder (https://crates.io/crates/diesel) \n          \n              \n       \n     \n       \n  •  [@34:02] - If you could start all over again, what would you do differently?\n     \n       \n  •  [@38:57] - Does Ruma use any unstable Rust features? Has it previously?\n     \n       \n  •  [@42:30] - What other implementations of Matrix exist?\n     \n       \n  •  [@46:42] - How difficult to implement is the Matrix specification?\n     \n       \n  •  [@52:59] - How close to maturity is Ruma?\n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity\n\n\n\n\nAudio Editing: Reece McMillin\n\n\n\n\nHosting Infrastructure: Jon Gjengset\n\n\n\n\nShow Notes: Ben Striegel\n\n\n\n\nHosts: Abdou Seck, Ben Striegel",
        total_duration: "1 hr 3 mins",
        remaining_duration: "1 hr 3 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDyjFXZ44X_fY",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/yjFXZ44X_fY/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3k6d6eyhAQssG7yZe_V_RHsidVpBA",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/yjFXZ44X_fY/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3leMVY1sSU5VefNYlLkMrx5M3onRA",
            },
        ],
    },
    PodcastChannelEpisode {
        title: "Announcing Rustacean Station and Rust 1.36",
        description: "Meet Rustacean Station, a new Rust “meta podcast”, and take a dive into the new 1.36.0 Rust release with Ben and Jon.\n\n\n\n\nIf you would like to offer Rust-related podcast content for us to host, or would like advice and resources on making your own Rust podcast, get in touch with us via the venues below!\n\n\n\n     \n       \n  •  Twitter: @rustaceanfm (https://twitter.com/rustaceanfm) \n     \n       \n  •  Discord: Rustacean Station (https://discord.gg/cHc3Gyc) \n     \n       \n  •  Github: @rustacean-station (https://github.com/rustacean-station/) \n     \n       \n  •  Email: hello@rustacean-station.org (mailto:hello@rustacean-station.org) \n     \n     \n\nIn the episode\n\n\n\n     \n       \n  •  [@4:27] - std::future (https://doc.rust-lang.org/std/future/trait.Future.html) \n     \n       \n  •  [@11:29] - std::task (https://doc.rust-lang.org/std/task/struct.Waker.html) \n     \n       \n  •  [@14:22] - the alloc (https://doc.rust-lang.org/alloc/index.html)  crate\n     \n       \n  •  [@18:52] - std::collections::HashMap and hashbrown (https://github.com/rust-lang/hashbrown) \n     \n       \n  •  [@22:50] - std::mem::MaybeUninit (https://doc.rust-lang.org/std/mem/union.MaybeUninit.html)  and the deprecation (https://gankro.github.io/blah/initialize-me-maybe/)  of std::mem::uninitialized (https://gankro.github.io/blah/initialize-me-maybe/)   (mentioned: Error::type_id (https://github.com/rust-lang/rust/issues/60784)  destabilization and std::pin (https://github.com/rust-lang/rust/issues/49150)  discussion)\n     \n       \n  •  [@36:24] - NLL for Rust 2015 (http://blog.pnkfx.org/blog/2019/06/26/breaking-news-non-lexical-lifetimes-arrives-for-everyone/)  (mentioned: MIR (https://blog.rust-lang.org/2016/04/19/MIR.html) )\n     \n       \n  •  [@44:45] - cargo --offline (https://github.com/rust-lang/cargo/issues/4686)  and cargo fetch (https://doc.rust-lang.org/cargo/commands/cargo-fetch.html) \n     \n       \n  •  [@46:50] - ongoing stdlib constification\n     \n       \n  •  [@47:25] - read_vectored (https://doc.rust-lang.org/std/io/trait.Read.html#method.read_vectored)  and write_vectored (https://doc.rust-lang.org/std/io/trait.Write.html#method.write_vectored) \n     \n       \n  •  [@49:05] - Iterator::copied (https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.copied) \n     \n       \n  •  [@49:58] - dbg! (https://doc.rust-lang.org/std/macro.dbg.html)  enhancements\n     \n       \n  •  [@51:19] - #[must_use] (https://doc.rust-lang.org/reference/attributes/diagnostics.html#the-must_use-attribute)  for is_err (https://doc.rust-lang.org/std/result/enum.Result.html#method.is_err)  and is_ok (https://doc.rust-lang.org/std/result/enum.Result.html#method.is_ok) \n     \n     \n\nCredits\n\n\n\n\nIntro Theme: Aerocity\n\n\n\n\nAudio Editing: Reece McMillin\n\n\n\n\nHosting Infrastructure: Jon Gjengset\n\n\n\n\nShow Notes: Ben Striegel\n\n\n\n\nHosts: Ben Striegel, Jon Gjengset\n\n\n\n\nSpecial Thanks: Chris Krycho, Andrew Gallant, Mae McCauley",
        total_duration: "54 mins",
        remaining_duration: "54 mins",
        date: "7 Feb",
        video_id: VideoID(
            "MPEDLRKmGeguf7E",
        ),
        thumbnails: [
            Thumbnail {
                height: 360,
                width: 640,
                url: "https://i.ytimg.com/vi/LRKmGeguf7E/sddefault.jpg?sqp=-oaymwElCIAFEOgCIAQqCghQELAEGAAg4ANIWvKriqkDCZoCBggzEBwYDQ&rs=AMzJL3m9-q-5N7rgbgnPcBMkCOmFLEEA3Q",
            },
            Thumbnail {
                height: 720,
                width: 1280,
                url: "https://i.ytimg.com/vi/LRKmGeguf7E/hq720.jpg?sqp=-oaymwEmCIAKENAFIAQqCwiYAhDoBxgAINAFSFryq4qpAwmaAgYIMxAcGA0&rs=AMzJL3k5B91ge2IeL4xVv-OqBPb9tiLLzg",
            },
        ],
    },
]
